{"version":3,"sources":["EA1/index.js","EA2/index.js","App.js","serviceWorker.js","index.js"],"names":["EA1","props","handleKeyDown","key","refName","console","log","tempKey","state","eventKey","setState","yOffset","string","style","background","toString","ref","position","width","height","src","alt","this","handleKeys","onKeyEvent","e","href","Component","defaultProps","EA2","gui","wireframe","renderer","scene","camera","camera2","controls","wireframe1","matLine","matLineBasic","matLineDashed","stats","insetWidth","insetHeight","gl","getContext","drawRect","x","y","color","scissor","clearColor","clear","COLOR_BUFFER_BIT","enable","SCISSOR_TEST","i","rand","min","max","undefined","Math","random","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b8b625d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\n\nimport './ea1.css';\n\nexport default class EA1 extends Component {\n    static propTypes = {}\n    static defaultProps = {}\n\n    constructor(props) {\n        super(props);\n        this.state = { // state keys go here\n            yOffset: 0,\n            eventKey: \" \"\n        }\n    }\n\n    handleKeyDown = (key,refName) => {\n\n        console.log(key + \"is down\");\n\n        var tempKey = key + \" \" + this.state.eventKey;\n\n        this.setState(\n            {\n                eventKey: tempKey\n            })\n\n        if (key === 'l') {\n            console.log('L pressed ! ')\n\n            if (this.state.yOffset >= 512) {\n                this.setState(\n                    {\n                        yOffset: this.state.yOffset - 512\n                    })\n            }\n\n        } else if (key === 'r') {\n            console.log('R pressed ! ')\n\n\n            this.setState(\n                {\n                    yOffset: this.state.yOffset + 512\n                })\n        }\n\n        var string = `url(\"https://i.ibb.co/b7HgSFy/Graph-Viz-Tech-EA1.png\") 0px ${this.state.yOffset}px`;\n        this[refName].style.background = string.toString();\n    }\n\n     //background: 'url(\"images/GraphVizTechEA1.png\") 0 0'},} \n     //src={process.env.PUBLIC_URL + '/images/placeholder1x1.png'} alt=\"circle\" width=\"1\" height=\"1\"></img>\n\n    render() {\n        //TODO change clippingrect css by jscript code on key input left right\n        let refName = 'clippingrect';\n\n        return (\n            <div>\n                <div><h2>EA1</h2></div>\n\n                <img \n                ref={ref => this[refName] = ref}\n                style= {{position: 'relative',\n                width: '512px',\n                height: '512px',\n                background: 'url(\"https://i.ibb.co/b7HgSFy/Graph-Viz-Tech-EA1.png\") 0 0'}}\n                src={'https://i.ibb.co/Yc3S8ZW/placeholder1x1.png'} alt=\"circle\" width=\"1\" height=\"1\"></img>\n                \n                <div>Input Key detected: {this.state.eventKey}</div>\n\n                <KeyboardEventHandler\n                    handleKeys={['l', 'r']}\n                    onKeyEvent={(key, e) => this.handleKeyDown(key,refName)} />\n\n                    <div style= {{position: 'relative', height: '30px'}}></div>\n                    <a href='https://www.searchpng.com/2019/01/07/blue-circle-glow-png-free-download/'>Circle Image Reference</a>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\n\nimport './ea2.css';\n\nexport default class EA2 extends Component {\n\n    static propTypes = {}\n    static defaultProps = {}\n\n    constructor(props) {\n        super(props);\n        this.state = { // state keys go here\n            eventKey: \" \",\n            gui: null,\n            wireframe: null,\n            renderer: null,\n            scene: null,\n            camera: null,\n            camera2: null,\n            controls: null,\n            wireframe1: null,\n            matLine: null,\n            matLineBasic: null,\n            matLineDashed: null,\n            stats: null,\n            insetWidth: null,\n            insetHeight: null\n        }\n    }\n\n    componentDidMount() {\n\n        'use strict'; \n        const gl =  this['webGLCanvas'].getContext('webgl');\n\n        gl.enable(gl.SCISSOR_TEST);\n        \n        function drawRect(x, y, width, height, color) {\n          gl.scissor(x, y, width, height);\n          gl.clearColor(...color);\n          gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n        \n        for (let i = 0; i < 100; ++i) {\n          const x = rand(0, 300);\n          const y = rand(0, 150);\n          const width = rand(0, 300 - x);\n          const height = rand(0, 150 - y);\n          drawRect(x, y, width, height, [rand(1), rand(1), rand(1), 1]);\n        }\n        \n        function rand(min, max) {\n          if (max === undefined) {\n            max = min;\n            min = 0;\n          }\n          return Math.random() * (max - min) + min;\n        }\n\n      }\n\n    handleKeyDown = (key) => {\n\n        this.setState(\n            {\n                eventKey: key\n            })\n\n        if (key === '?') {\n            console.log('? pressed ! ')\n        } \n    }\n\n    render() {\n\n        return (\n            <div>\n                <div><h2>EA2</h2></div>\n\n                <canvas ref={ref => this['webGLCanvas'] = ref}></canvas>\n\n                <div>Input Key detected: {this.state.eventKey}</div>\n                <KeyboardEventHandler\n                    handleKeys={['?']}\n                    onKeyEvent={(key, e) => this.handleKeyDown(key)} />\n\n                    <div style= {{position: 'relative', height: '30px'}}></div>\n            </div>\n        );\n    }\n}\n\n\n\n/*NODE.JS headless webgl Code\n\n//Create context\nvar width   = 64\nvar height  = 64\nvar gl = require('gl')(width, height, { preserveDrawingBuffer: true })\n\n//Clear screen to red\ngl.clearColor(1, 0, 0, 1)\ngl.clear(gl.COLOR_BUFFER_BIT)\n\n//Write output as a PPM formatted image\nvar pixels = new Uint8Array(width * height * 4)\n\ngl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels)\n\nprocess.stdout.write(['P3\\n# gl.ppm\\n', width, \" \", height, '\\n255\\n'].join(''))\nfor(var i=0; i<pixels.length; i+=4) {\n  for(var j=0; j<3; ++j) {\n    process.stdout.write(pixels[i+j] + ' ')\n  }\n}\n\n*/","import React from 'react';\nimport './App.css';\nimport EA1 from './EA1/index.js';\nimport EA2 from './EA2/index.js';\n\nfunction App() {\n  return (\n\n    <div>\n       <EA1></EA1>\n       <EA2></EA2>\n    </div>\n  );\n}\n\nexport default App;\n\n\n/*\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n    </div>\n    */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}