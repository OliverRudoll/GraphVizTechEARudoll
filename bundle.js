!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=159)}([function(e,t,n){"use strict";e.exports=n(82)},function(e,t,n){e.exports=n(90)()},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(96),a=(r=o)&&r.__esModule?r:{default:r};t.default=a.default||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(59),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(e,t,n){return t in e?(0,a.default)(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(36),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":(0,a.default)(t))&&"function"!=typeof t?e:t}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t,n){"use strict";t.__esModule=!0;var r=i(n(125)),o=i(n(129)),a=i(n(36));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":(0,a.default)(t)));e.prototype=(0,o.default)(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(r.default?(0,r.default)(e,t):e.__proto__=t)}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(83)},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(59),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),(0,a.default)(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()},function(e,t){var n=e.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var a=typeof r;if("string"===a||"number"===a)e.push(r);else if(Array.isArray(r)&&r.length){var i=o.apply(null,r);i&&e.push(i)}else if("object"===a)for(var l in r)n.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){var r,o;window,e.exports=(r=n(0),o=n(1),function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return function(e){return e&&e.__esModule?e:{default:e}}(r).default}}),e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(2)),i=u(n(3)),l=n(4);function u(e){return e&&e.__esModule?e:{default:e}}var s=[],c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleKeyboardEvent=n.handleKeyboardEvent.bind(n),n.registerExclusiveHandler=n.registerExclusiveHandler.bind(n),n.deregisterExclusiveHandler=n.deregisterExclusiveHandler.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"componentDidMount",value:function(){document.addEventListener("keydown",this.handleKeyboardEvent,!1),document.addEventListener("keyup",this.handleKeyboardEvent,!1),document.addEventListener("keypress",this.handleKeyboardEvent,!1);var e=this.props,t=e.isExclusive,n=e.isDisabled;t&&!n&&this.registerExclusiveHandler()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("keydown",this.handleKeyboardEvent,!1),document.removeEventListener("keyup",this.handleKeyboardEvent,!1),document.removeEventListener("keypress",this.handleKeyboardEvent,!1),this.deregisterExclusiveHandler()}},{key:"componentDidUpdate",value:function(e){var t=e.isExclusive,n=e.isDisabled;(this.props.isExclusive!==t||this.props.isDisabled!==n)&&(this.props.isExclusive&&!this.props.isDisabled?this.registerExclusiveHandler():this.deregisterExclusiveHandler())}},{key:"registerExclusiveHandler",value:function(){this.deregisterExclusiveHandler(),s.unshift(this)}},{key:"deregisterExclusiveHandler",value:function(){var e=this;s.includes(this)&&(s=s.filter((function(t){return t!==e})))}},{key:"handleKeyboardEvent",value:function(e){var t=this.props,n=t.isDisabled,r=t.handleKeys,o=t.onKeyEvent,a=t.handleEventType,i=t.children,u=t.handleFocusableElements;if(n)return!1;if(a!==e.type)return!1;if(s.length>0&&s[0]!==this)return!1;var c=e.target===document.body||u,f=this.childrenContainer&&this.childrenContainer.contains(e.target);if(!(i?f:c))return!1;var p=(0,l.findMatchedKey)(e,r);return!!p&&(o(p,e),!0)}},{key:"render",value:function(){var e=this,n=this.props.children,o=Object.assign({},this.props),i=!0,l=!1,u=void 0;try{for(var s,c=Object.keys(t.propTypes)[Symbol.iterator]();!(i=(s=c.next()).done);i=!0)delete o[s.value]}catch(e){l=!0,u=e}finally{try{!i&&c.return&&c.return()}finally{if(l)throw u}}return n?a.default.createElement("span",r({ref:function(t){e.childrenContainer=t}},o),n):null}}]),t}();t.default=c,c.propTypes={handleKeys:i.default.array,handleEventType:i.default.oneOf(["keydown","keyup","keypress"]),handleFocusableElements:i.default.bool,onKeyEvent:i.default.func,isDisabled:i.default.bool,isExclusive:i.default.bool,children:i.default.any},c.defaultProps={handleKeys:[],handleFocusableElements:!1,handleEventType:"keydown",onKeyEvent:function(){return null}},e.exports=t.default},function(e,t){e.exports=r},function(e,t){e.exports=o},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.matchKeyEvent=d,t.findMatchedKey=function(e,t){var n=t.map((function(e){var t=e.toLowerCase();return p[t]||[e]})).reduce((function(e,t){return e.concat(t)}),[]).find((function(t){return d(e,t)}));return!n&&t.includes("all")&&(n="other"),n};var o={backspace:[8],del:[46],delete:[46],ins:[45],insert:[45],tab:[9],enter:[13],return:[13],esc:[27],space:[32],pageup:[33],pagedown:[34],end:[35],home:[36],left:[37],up:[38],right:[39],down:[40],shift:[16],ctrl:[17],alt:[18],cap:[20],num:[144],clear:[12],meta:[91],";":[186,59],"=":[187,61],",":[188,44],"-":[189,45,173,109],minus:[189,45,173,109],".":[190,110],"/":[191,111],"`":[192],"[":[219],"\\":[220],"]":[221],"*":[106],"+":[107],plus:[107]},a=Object.keys(o).reduce((function(e,t){return Object.assign(e,r({},t.toUpperCase(),o[t]))}),{}),i="0123456789".split("").reduce((function(e,t,n){return Object.assign(e,r({},t,[n+48,n+96]))}),{}),l="ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("").reduce((function(e,t,n){return Object.assign(e,r({},t.toLowerCase(),[n+65]),r({},t,[n+65]))}),{}),u="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19".split(",").reduce((function(e,t,n){return Object.assign(e,r({},"f"+t,[n+112]))}),{}),s={control:"ctrl",ctrl:"ctrl",shift:"shift",meta:"meta",cmd:"meta",command:"meta",option:"alt",alt:"alt"},c=t.AllKeys=Object.assign({},o,a,i,l,u),f=Object.assign({},i,l),p={all:Object.keys(c),alphanumeric:Object.keys(f),numeric:Object.keys(i),alphabetic:Object.keys(l),function:Object.keys(u)};function d(e,t){var n=e.which||e.keyCode,r=e.type,o=Object.keys(s).filter((function(t){return e[t+"Key"]})).sort(),a=t.toLowerCase().trim(),i="+"===a?["+"]:a.split(/\s?\+\s?/),l=i.pop(),u=c[l],f=i;if("keypress"===r)return t==String.fromCharCode(n).toLowerCase();if(0===f.length&&0===o.length)return u.indexOf(n)>=0;if(f.length>0&&o.length>0){var p=f.map((function(e){return s[e]})).sort(),d=p.length===o.length&&p.every((function(e,t){return o[t]===e}));return u.indexOf(n)>=0&&d}return 0==f.length&&1===o.length&&l===o[0]}}]))},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}},function(e,t,n){var r=n(46)("wks"),o=n(33),a=n(17).Symbol,i="function"==typeof a;(e.exports=function(e){return r[e]||(r[e]=i&&a[e]||(i?a:o)("Symbol."+e))}).store=r},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(u," */")),a=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")}));return[n].concat(a).concat([o]).join("\n")}var i,l,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var i=0;i<e.length;i++){var l=e[i];null!=l[0]&&r[l[0]]||(n&&!l[2]?l[2]=n:n&&(l[2]="(".concat(l[2],") and (").concat(n,")")),t.push(l))}},t}},function(e,t,n){"use strict";var r,o={},a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function l(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],l={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(l):n.push(r[i]={id:i,parts:[l]})}return n}function u(e,t){for(var n=0;n<e.length;n++){var r=e[n],a=o[r.id],i=0;if(a){for(a.refs++;i<a.parts.length;i++)a.parts[i](r.parts[i]);for(;i<r.parts.length;i++)a.parts.push(v(r.parts[i],t))}else{for(var l=[];i<r.parts.length;i++)l.push(v(r.parts[i],t));o[r.id]={id:r.id,refs:1,parts:l}}}}function s(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var r=n.nc;r&&(e.attributes.nonce=r)}if(Object.keys(e.attributes).forEach((function(n){t.setAttribute(n,e.attributes[n])})),"function"==typeof e.insert)e.insert(t);else{var o=i(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var c,f=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function d(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o&&e.setAttribute("media",o),a&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function v(e,t){var n,r,o;if(t.singleton){var a=m++;n=h||(h=s(t)),r=p.bind(null,n,a,!1),o=p.bind(null,n,a,!0)}else n=s(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a());var n=l(e,t);return u(n,t),function(e){for(var r=[],a=0;a<n.length;a++){var i=n[a],s=o[i.id];s&&(s.refs--,r.push(s))}e&&u(l(e,t),t);for(var c=0;c<r.length;c++){var f=r[c];if(0===f.refs){for(var p=0;p<f.parts.length;p++)f.parts[p]();delete o[f.id]}}}}},function(e,t,n){var r=n(17),o=n(9),a=n(40),i=n(23),l=n(20),u=function(e,t,n){var s,c,f,p=e&u.F,d=e&u.G,h=e&u.S,m=e&u.P,v=e&u.B,y=e&u.W,b=d?o:o[t]||(o[t]={}),g=b.prototype,E=d?r:h?r[t]:(r[t]||{}).prototype;for(s in d&&(n=t),n)(c=!p&&E&&void 0!==E[s])&&l(b,s)||(f=c?E[s]:n[s],b[s]=d&&"function"!=typeof E[s]?n[s]:v&&c?a(f,r):y&&E[s]==f?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(f):m&&"function"==typeof f?a(Function.call,f):f,m&&((b.virtual||(b.virtual={}))[s]=f,e&u.R&&g&&!g[s]&&i(g,s,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){var r=n(24),o=n(54),a=n(41),i=Object.defineProperty;t.f=n(19)?Object.defineProperty:function(e,t,n){if(r(e),t=a(t,!0),r(n),o)try{return i(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){e.exports=!n(26)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(57),o=n(43);e.exports=function(e){return r(o(e))}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){var r=n(18),o=n(28);e.exports=n(19)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(25);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(140),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return(0,a.default)(e)}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(43);e.exports=function(e){return Object(r(e))}},function(e,t){e.exports={}},function(e,t,n){var r=n(56),o=n(47);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t){e.exports=!0},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){var r=n(149);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";t.__esModule=!0;var r=i(n(105)),o=i(n(115)),a="function"==typeof o.default&&"symbol"==typeof r.default?function(e){return typeof e}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":typeof e};function i(e){return e&&e.__esModule?e:{default:e}}t.default="function"==typeof o.default&&"symbol"===a(r.default)?function(e){return void 0===e?"undefined":a(e)}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":void 0===e?"undefined":a(e)}},function(e,t){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){e.exports=n(2)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r=n(3))&&r.__esModule?r:{default:r};t.default=o.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=i(n(4)),a=i(n(8));function i(e){return e&&e.__esModule?e:{default:e}}n(12);var l="#4A4A4A";function u(e){return("string"==typeof e||e instanceof String)&&e.match(/^#(([a-fA-F]|\w){3}|([a-fA-F]|\w){6})$/gi)}var s=function(e){var t=e.backAnimationDuration,n=e.borderThickness,a=e.checked,i=e.className,s=e.color,c=e.delay,f=e.id,p=e.onChange,d=e.size,h=e.tickAnimationDuration,m=e.tickSize,v=["Checkbox"];v.push(i),v.push(a?"checked":"unchecked");var y=.25+.25*d,b=""!==f?{id:f}:{},g=function(e){var t={},n=u(e);return t.backgroundColor=n?e:l,!n&&u(e.backgroundColor)&&(t.backgroundColor=e.backgroundColor),t.borderColor=n?e:l,!n&&u(e.borderColor)&&(t.borderColor=e.borderColor),t.uncheckedBorderColor=n?e:l,!n&&u(e.uncheckedBorderColor)&&(t.uncheckedBorderColor=e.uncheckedBorderColor),t.tickColor=u(e.tickColor)?e.tickColor:"#FFFFFF",t}(s),E=a?120+c:c,w=a?c:600+c;return o.default.createElement("div",{className:v.join(" "),role:"checkbox","aria-checked":"false",tabIndex:"0",onClick:function(){p(!a)},onKeyPress:function(){p(!a)}},o.default.createElement("input",r({},b,{type:"checkbox",style:{display:"none"}})),o.default.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",version:"1.1",width:"24px",height:"24px",viewBox:"0 0 24 24",transform:"scale("+y+")"},o.default.createElement("rect",{className:"square",x:"2",y:"2",width:"20",height:"20",rx:"2",ry:"2",fill:g.backgroundColor,stroke:a?g.borderColor:g.uncheckedBorderColor,strokeWidth:n+"px",style:{transitionDelay:w+"ms",transitionDuration:t+"ms"}}),o.default.createElement("path",{className:"tick",d:"M6,6 v8 h16",strokeWidth:m,stroke:g.tickColor,fill:"none",transform:"rotate(-45, 12, 12)",style:{transitionDelay:E+"ms",transitionDuration:h+"ms"}})))};s.propTypes={backAnimationDuration:a.default.number,borderThickness:a.default.oneOf([1,2,3,4]),checked:a.default.bool,className:a.default.string,color:a.default.oneOfType([a.default.string,a.default.object]),delay:a.default.number,id:a.default.string,onChange:a.default.func,size:a.default.oneOf([1,2,3]),tickAnimationDuration:a.default.number,tickSize:a.default.oneOf([1,2,3])},s.defaultProps={backAnimationDuration:180,borderThickness:3,checked:!1,className:"",color:{},delay:0,id:"",onChange:function(){},size:1,tickAnimationDuration:500,tickSize:2},t.default=s},function(e,t,n){"use strict";e.exports=n(5)},function(e,t,n){"use strict";
/** @license React v16.2.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(6),o=n(7),a=n(0),i="function"==typeof Symbol&&Symbol.for,l=i?Symbol.for("react.element"):60103,u=i?Symbol.for("react.call"):60104,s=i?Symbol.for("react.return"):60105,c=i?Symbol.for("react.portal"):60106,f=i?Symbol.for("react.fragment"):60107,p="function"==typeof Symbol&&Symbol.iterator;function d(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function m(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||h}function v(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||h}function y(){}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&d("85"),this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=m.prototype;var b=v.prototype=new y;function g(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||h}b.constructor=v,r(b,m.prototype),b.isPureReactComponent=!0;var E=g.prototype=new y;E.constructor=g,r(E,m.prototype),E.unstable_isAsyncReactComponent=!0,E.render=function(){return this.props.children};var w={current:null},x=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r,o={},a=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(a=""+t.key),t)x.call(t,r)&&!S.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:l,type:e,key:a,ref:i,props:o,_owner:w.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var C=/\/+/g,M=[];function _(e,t,n,r){if(M.length){var o=M.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function P(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>M.length&&M.push(e)}function O(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case l:case u:case s:case c:a=!0}}if(a)return n(r,e,""===t?"."+A(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var i=0;i<e.length;i++){var f=t+A(o=e[i],i);a+=O(o,f,n,r)}else if("function"==typeof(f=null==e?null:"function"==typeof(f=p&&e[p]||e["@@iterator"])?f:null))for(e=f.call(e),i=0;!(o=e.next()).done;)a+=O(o=o.value,f=t+A(o,i++),n,r);else"object"===o&&d("31","[object Object]"==(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return a}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function R(e,t){e.func.call(e.context,t,e.count++)}function N(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,a.thatReturnsArgument):null!=e&&(k(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(C,"$&/")+"/")+n,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function L(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(C,"$&/")+"/"),t=_(t,a,r,o),null==e||O(e,"",N,t),P(t)}var F={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=_(null,null,t,n),null==e||O(e,"",R,t),P(t)},count:function(e){return null==e?0:O(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return L(e,t,null,a.thatReturnsArgument),t},only:function(e){return k(e)||d("143"),e}},Component:m,PureComponent:v,unstable_AsyncComponent:g,Fragment:f,createElement:T,cloneElement:function(e,t,n){var o=r({},e.props),a=e.key,i=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,u=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)x.call(t,c)&&!S.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];o.children=s}return{$$typeof:l,type:e.type,key:a,ref:i,props:o,_owner:u}},createFactory:function(e){var t=T.bind(null,e);return t.type=e,t},isValidElement:k,version:"16.2.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:w,assign:r}},j=Object.freeze({default:F}),D=j&&F||j;e.exports=D.default?D.default:D},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,l=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var s in n=Object(arguments[u]))o.call(n,s)&&(l[s]=n[s]);if(r){i=r(n);for(var c=0;c<i.length;c++)a.call(n,i[c])&&(l[i[c]]=n[i[c]])}}return l}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){e.exports=n(9)()},function(e,t,n){"use strict";var r=n(0),o=n(10),a=n(11);e.exports=function(){function e(e,t,n,r,i,l){l!==a&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,l){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,a,i,l],c=0;(u=new Error(t.replace(/%s/g,(function(){return s[c++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r=n(13);"string"==typeof r&&(r=[[e.i,r,""]]);n(15)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(14)(!1)).push([e.i,".Checkbox{display:inline-block;cursor:pointer;position:relative;top:6px;width:24px;height:24px;outline:none}.Checkbox .tick{stroke-dasharray:24;stroke-dashoffset:24;transition:stroke-dashoffset 0.5s cubic-bezier(1, 0, 0.55, 0.41);transition-property:stroke-dashoffset;transition-timing-function:cubic-bezier(1, 0, 0.55, 0.41)}.Checkbox .square{fill-opacity:0;transition:fill-opacity .18s ease-in-out, stroke .18s ease-in-out}.Checkbox.checked .tick{stroke-dashoffset:0}.Checkbox.checked .square{fill-opacity:1}.Checkbox.unchecked .tick{stroke-dashoffset:24}.Checkbox.unchecked .square{fill-opacity:0}\n",""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n,r,o,a=e[1]||"",i=e[3];if(!i)return a;if(t&&"function"==typeof btoa){var l=(n=i,r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),"/*# ".concat(o," */")),u=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot).concat(e," */")}));return[a].concat(u).concat([l]).join("\n")}return[a].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var i=0;i<e.length;i++){var l=e[i];null!=l[0]&&r[l[0]]||(n&&!l[2]?l[2]=n:n&&(l[2]="(".concat(l[2],") and (").concat(n,")")),t.push(l))}},t}},function(e,t,n){var r,o,a={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),u=null,s=0,c=[],f=n(16);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(b(r.parts[i],t))}else{var l=[];for(i=0;i<r.parts.length;i++)l.push(b(r.parts[i],t));a[r.id]={id:r.id,refs:1,parts:l}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],l={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(l):n.push(r[i]={id:i,parts:[l]})}return n}function h(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function v(e){var t=document.createElement("style");return e.attrs.type="text/css",y(t,e.attrs),h(e,t),t}function y(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function b(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var i=s++;n=u||(u=v(t)),r=w.bind(null,n,i,!1),o=w.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",y(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=f(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(i),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var i=n[o];(l=a[i.id]).refs--,r.push(l)}for(e&&p(d(e,t),t),o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete a[l.id]}}}};var g,E=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function w(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=E(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")}))}}])},function(e,t,n){"use strict";t.__esModule=!0;var r=a(n(132)),o=a(n(135));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function e(t,n,a){null===t&&(t=Function.prototype);var i=(0,o.default)(t,n);if(void 0===i){var l=(0,r.default)(t);return null===l?void 0:e(l,n,a)}if("value"in i)return i.value;var u=i.get;return void 0!==u?u.call(a):void 0}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=i(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){l=r(n);for(var f=0;f<l.length;f++)a.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t,n){var r=n(99);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(25);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(46)("keys"),o=n(33);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t,n){var r=n(9),o=n(17),a=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return a[e]||(a[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(32)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(24),o=n(109),a=n(47),i=n(45)("IE_PROTO"),l=function(){},u=function(){var e,t=n(55)("iframe"),r=a.length;for(t.style.display="none",n(110).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;r--;)delete u.prototype[a[r]];return u()};e.exports=Object.create||function(e,t){var n;return null!==e?(l.prototype=r(e),n=new l,l.prototype=null,n[i]=e):n=u(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(18).f,o=n(20),a=n(13)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,a)&&r(e,a,{configurable:!0,value:t})}},function(e,t,n){t.f=n(13)},function(e,t,n){var r=n(17),o=n(9),a=n(32),i=n(51),l=n(18).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=a?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||l(t,e,{value:i.f(e)})}},function(e,t,n){var r=n(34),o=n(28),a=n(21),i=n(41),l=n(20),u=n(54),s=Object.getOwnPropertyDescriptor;t.f=n(19)?s:function(e,t){if(e=a(e),t=i(t,!0),u)try{return s(e,t)}catch(e){}if(l(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){e.exports=!n(19)&&!n(26)((function(){return 7!=Object.defineProperty(n(55)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(25),o=n(17).document,a=r(o)&&r(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},function(e,t,n){var r=n(20),o=n(21),a=n(101)(!1),i=n(45)("IE_PROTO");e.exports=function(e,t){var n,l=o(e),u=0,s=[];for(n in l)n!=i&&r(l,n)&&s.push(n);for(;t.length>u;)r(l,n=t[u++])&&(~a(s,n)||s.push(n));return s}},function(e,t,n){var r=n(42);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){var r=n(44),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){e.exports={default:n(103),__esModule:!0}},function(e,t,n){"use strict";var r=n(107)(!0);n(61)(String,"String",(function(e){this._t=String(e),this._i=0}),(function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})}))},function(e,t,n){"use strict";var r=n(32),o=n(16),a=n(62),i=n(23),l=n(30),u=n(108),s=n(50),c=n(63),f=n(13)("iterator"),p=!([].keys&&"next"in[].keys()),d=function(){return this};e.exports=function(e,t,n,h,m,v,y){u(n,t,h);var b,g,E,w=function(e){if(!p&&e in k)return k[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},x=t+" Iterator",S="values"==m,T=!1,k=e.prototype,C=k[f]||k["@@iterator"]||m&&k[m],M=C||w(m),_=m?S?w("entries"):M:void 0,P="Array"==t&&k.entries||C;if(P&&(E=c(P.call(new e)))!==Object.prototype&&E.next&&(s(E,x,!0),r||"function"==typeof E[f]||i(E,f,d)),S&&C&&"values"!==C.name&&(T=!0,M=function(){return C.call(this)}),r&&!y||!p&&!T&&k[f]||i(k,f,M),l[t]=M,l[x]=d,m)if(b={values:S?M:w("values"),keys:v?M:w("keys"),entries:_},y)for(g in b)g in k||a(k,g,b[g]);else o(o.P+o.F*(p||T),t,b);return b}},function(e,t,n){e.exports=n(23)},function(e,t,n){var r=n(20),o=n(29),a=n(45)("IE_PROTO"),i=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,a)?e[a]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?i:null}},function(e,t,n){var r=n(56),o=n(47).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(16),o=n(9),a=n(26);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],i={};i[e]=t(n),r(r.S+r.F*a((function(){n(1)})),"Object",i)}},function(e,t){e.exports=function(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0;n<e.length;++n)if(e[n]===t)return n;return-1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){function o(t){var r=new a.default(t);n.call(e,r)}if(e.addEventListener){var i=(l=!1,"object"==typeof r?l=r.capture||!1:"boolean"==typeof r&&(l=r),e.addEventListener(t,o,r||!1),{v:{remove:function(){e.removeEventListener(t,o,l)}}});if("object"==typeof i)return i.v}else if(e.attachEvent)return e.attachEvent("on"+t,o),{remove:function(){e.detachEvent("on"+t,o)}};var l};var r,o=n(138),a=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t){e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var a=Object.keys(e),i=Object.keys(t);if(a.length!==i.length)return!1;for(var l=Object.prototype.hasOwnProperty.bind(t),u=0;u<a.length;u++){var s=a[u];if(!l(s))return!1;var c=e[s],f=t[s];if(!1===(o=n?n.call(r,c,f,s):void 0)||void 0===o&&c!==f)return!1}return!0}},function(e,t,n){try{var r=n(66)}catch(e){r=n(66)}var o=/\s+/,a=Object.prototype.toString;function i(e){if(!e||!e.nodeType)throw new Error("A DOM element reference is required");this.el=e,this.list=e.classList}e.exports=function(e){return new i(e)},i.prototype.add=function(e){if(this.list)return this.list.add(e),this;var t=this.array();return~r(t,e)||t.push(e),this.el.className=t.join(" "),this},i.prototype.remove=function(e){if("[object RegExp]"==a.call(e))return this.removeMatching(e);if(this.list)return this.list.remove(e),this;var t=this.array(),n=r(t,e);return~n&&t.splice(n,1),this.el.className=t.join(" "),this},i.prototype.removeMatching=function(e){for(var t=this.array(),n=0;n<t.length;n++)e.test(t[n])&&this.remove(t[n]);return this},i.prototype.toggle=function(e,t){return this.list?(void 0!==t?t!==this.list.toggle(e,t)&&this.list.toggle(e):this.list.toggle(e),this):(void 0!==t?t?this.add(e):this.remove(e):this.has(e)?this.remove(e):this.add(e),this)},i.prototype.array=function(){var e=(this.el.getAttribute("class")||"").replace(/^\s+|\s+$/g,"").split(o);return""===e[0]&&e.shift(),e},i.prototype.has=i.prototype.contains=function(e){return this.list?this.list.contains(e):!!~r(this.array(),e)}},function(e,t,n){var r,o,a;o=[],void 0===(a="function"==typeof(r=function(){function e(e){switch(this.clear(),arguments.length){case 0:break;case 1:"length"in e?n(this,Array.prototype.concat.apply([],e)):this.copy(e);break;default:n(this,arguments)}}var t=e.prototype={constructor:e,get:function(e){var t=this._data[this.hash(e)];return t&&t[1]},set:function(e,t){var n=this.hash(e);n in this._data||this.size++,this._data[n]=[e,t]},multi:function(){n(this,arguments)},copy:function(e){for(var t in e._data)t in this._data||this.size++,this._data[t]=e._data[t]},has:function(e){return this.hash(e)in this._data},search:function(e){for(var t in this._data)if(this._data[t][1]===e)return this._data[t][0];return null},delete:function(e){var t=this.hash(e);t in this._data&&(this.size--,delete this._data[t])},type:function(e){var t=Object.prototype.toString.call(e).slice(8,-1).toLowerCase();return e||"domwindow"!==t&&"window"!==t?t:e+""},keys:function(){var e=[];return this.forEach((function(t,n){e.push(n)})),e},values:function(){var e=[];return this.forEach((function(t){e.push(t)})),e},entries:function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),e},count:function(){return this.size},clear:function(){this._data={},this.size=0},clone:function(){return new e(this)},hash:function(t){switch(this.type(t)){case"undefined":case"null":case"boolean":case"number":case"regexp":return t+"";case"date":return"♣"+t.getTime();case"string":return"♠"+t;case"array":for(var n=[],r=0;r<t.length;r++)n[r]=this.hash(t[r]);return"♥"+n.join("⁞");default:return t.hasOwnProperty("_hmuid_")||(t._hmuid_=++e.uid,o=t,a="_hmuid_",Object.defineProperty&&Object.defineProperty(o,a,{enumerable:!1})),"♦"+t._hmuid_}var o,a},forEach:function(e,t){for(var n in this._data){var r=this._data[n];e.call(t||this,r[1],r[0])}}};function n(e,t){for(var n=0;n<t.length;n+=2)e.set(t[n],t[n+1])}return e.uid=0,"undefined"!=typeof Symbol&&void 0!==Symbol.iterator&&(t[Symbol.iterator]=function(){var e=this.entries(),t=0;return{next:function(){if(t===e.length)return{done:!0};var n=e[t++];return{value:{key:n[0],value:n[1]},done:!1}}}}),["set","multi","copy","delete","clear","forEach"].forEach((function(e){var n=t[e];t[e]=function(){return n.apply(this,arguments),this}})),e.prototype.remove=e.prototype.delete,e})?r.apply(t,o):r)||(e.exports=a)},function(e,t){e.exports="attribute vec3 aPosition;\nuniform mat4 uPMatrix;\nuniform mat4 uMVMatrix;\nvarying vec4 position_;\nvoid main() {\n\tmat4 modelViewProjectionMatrix = uPMatrix * uMVMatrix;\n\tgl_Position = modelViewProjectionMatrix * vec4(aPosition, 1.0);\n\tposition_ = modelViewProjectionMatrix * vec4(aPosition, 1.0);\n}\n"},function(e,t){e.exports="precision mediump float;\nvarying vec4 position_;\nvoid main() {\n\tfloat depth = ((position_.z / position_.w) + 1.0) * 0.5;\n\tgl_FragColor = vec4(depth, depth, depth, 1.0);\n}\n"},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return r}));Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function r(){"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}}).call(this,n(158))},,,,,,,,,function(e,t,n){"use strict";
/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(39),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.forward_ref"):60112,d=o?Symbol.for("react.suspense"):60113;o&&Symbol.for("react.suspense_list");var h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116;o&&Symbol.for("react.fundamental"),o&&Symbol.for("react.responder"),o&&Symbol.for("react.scope");var v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function E(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}function w(){}function x(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}E.prototype.isReactComponent={},E.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},E.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=E.prototype;var S=x.prototype=new w;S.constructor=x,r(S,E.prototype),S.isPureReactComponent=!0;var T={current:null},k={current:null},C=Object.prototype.hasOwnProperty,M={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,n){var r,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)C.call(t,r)&&!M.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:k.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var O=/\/+/g,A=[];function R(e,t,n,r){if(A.length){var o=A.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function L(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case a:case i:u=!0}}if(u)return r(o,t,""===n?"."+F(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+F(l=t[s],s);u+=e(l,c,r,o)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=v&&t[v]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(l=t.next()).done;)u+=e(l=l.value,c=n+F(l,s++),r,o);else if("object"===l)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function F(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function j(e,t){e.func.call(e.context,t,e.count++)}function D(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(O,"$&/")+"/")+n)),r.push(e))}function U(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(O,"$&/")+"/"),L(e,D,t=R(t,a,r,o)),N(t)}function I(){var e=T.current;if(null===e)throw Error(y(321));return e}var B={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;L(e,j,t=R(null,null,t,n)),N(t)},count:function(e){return L(e,(function(){return null}),null)},toArray:function(e){var t=[];return U(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(y(143));return e}},createRef:function(){return{current:null}},Component:E,PureComponent:x,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return I().useCallback(e,t)},useContext:function(e,t){return I().useContext(e,t)},useEffect:function(e,t){return I().useEffect(e,t)},useImperativeHandle:function(e,t,n){return I().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return I().useLayoutEffect(e,t)},useMemo:function(e,t){return I().useMemo(e,t)},useReducer:function(e,t,n){return I().useReducer(e,t,n)},useRef:function(e){return I().useRef(e)},useState:function(e){return I().useState(e)},Fragment:l,Profiler:s,StrictMode:u,Suspense:d,createElement:_,cloneElement:function(e,t,n){if(null==e)throw Error(y(267,e));var o=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=k.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)C.call(t,c)&&!M.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];o.children=s}return{$$typeof:a,type:e.type,key:i,ref:l,props:o,_owner:u}},createFactory:function(e){var t=_.bind(null,e);return t.type=e,t},isValidElement:P,version:"16.12.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:k,IsSomeRendererActing:{current:!1},assign:r}},V={default:B},z=V&&B||V;e.exports=z.default||z},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(39),a=n(84);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=null,u={};function s(){if(l)for(var e in u){var t=u[e],n=l.indexOf(e);if(!(-1<n))throw Error(i(96,e));if(!f[n]){if(!t.extractEvents)throw Error(i(97,e));for(var r in f[n]=t,n=t.eventTypes){var o=void 0,a=n[r],s=t,d=r;if(p.hasOwnProperty(d))throw Error(i(99,d));p[d]=a;var h=a.phasedRegistrationNames;if(h){for(o in h)h.hasOwnProperty(o)&&c(h[o],s,d);o=!0}else a.registrationName?(c(a.registrationName,s,d),o=!0):o=!1;if(!o)throw Error(i(98,r,e))}}}}function c(e,t,n){if(d[e])throw Error(i(100,e));d[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],p={},d={},h={};function m(e,t,n,r,o,a,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var v=!1,y=null,b=!1,g=null,E={onError:function(e){v=!0,y=e}};function w(e,t,n,r,o,a,i,l,u){v=!1,y=null,m.apply(E,arguments)}var x=null,S=null,T=null;function k(e,t,n){var r=e.type||"unknown-event";e.currentTarget=T(n),function(e,t,n,r,o,a,l,u,s){if(w.apply(this,arguments),v){if(!v)throw Error(i(198));var c=y;v=!1,y=null,b||(b=!0,g=c)}}(r,t,void 0,e),e.currentTarget=null}function C(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function M(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var _=null;function P(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)k(e,t[r],n[r]);else t&&k(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function O(e){if(null!==e&&(_=C(_,e)),e=_,_=null,e){if(M(e,P),_)throw Error(i(95));if(b)throw e=g,b=!1,g=null,e}}var A={injectEventPluginOrder:function(e){if(l)throw Error(i(101));l=Array.prototype.slice.call(e),s()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!u.hasOwnProperty(t)||u[t]!==r){if(u[t])throw Error(i(102,t));u[t]=r,n=!0}}n&&s()}};function R(e,t){var n=e.stateNode;if(!n)return null;var r=x(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var N=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;N.hasOwnProperty("ReactCurrentDispatcher")||(N.ReactCurrentDispatcher={current:null}),N.hasOwnProperty("ReactCurrentBatchConfig")||(N.ReactCurrentBatchConfig={suspense:null});var L=/^(.*)[\\\/]/,F="function"==typeof Symbol&&Symbol.for,j=F?Symbol.for("react.element"):60103,D=F?Symbol.for("react.portal"):60106,U=F?Symbol.for("react.fragment"):60107,I=F?Symbol.for("react.strict_mode"):60108,B=F?Symbol.for("react.profiler"):60114,V=F?Symbol.for("react.provider"):60109,z=F?Symbol.for("react.context"):60110,W=F?Symbol.for("react.concurrent_mode"):60111,H=F?Symbol.for("react.forward_ref"):60112,Y=F?Symbol.for("react.suspense"):60113,K=F?Symbol.for("react.suspense_list"):60120,X=F?Symbol.for("react.memo"):60115,G=F?Symbol.for("react.lazy"):60116;F&&Symbol.for("react.fundamental"),F&&Symbol.for("react.responder"),F&&Symbol.for("react.scope");var Z="function"==typeof Symbol&&Symbol.iterator;function $(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=Z&&e[Z]||e["@@iterator"])?e:null}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case U:return"Fragment";case D:return"Portal";case B:return"Profiler";case I:return"StrictMode";case Y:return"Suspense";case K:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case z:return"Context.Consumer";case V:return"Context.Provider";case H:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case X:return q(e.type);case G:if(e=1===e._status?e._result:null)return q(e)}return null}function Q(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,a=q(e.type);n=null,r&&(n=q(r.type)),r=a,a="",o?a=" (at "+o.fileName.replace(L,"")+":"+o.lineNumber+")":n&&(a=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+a}t+=n,e=e.return}while(e);return t}var J=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),ee=null,te=null,ne=null;function re(e){if(e=S(e)){if("function"!=typeof ee)throw Error(i(280));var t=x(e.stateNode);ee(e.stateNode,e.type,t)}}function oe(e){te?ne?ne.push(e):ne=[e]:te=e}function ae(){if(te){var e=te,t=ne;if(ne=te=null,re(e),t)for(e=0;e<t.length;e++)re(t[e])}}function ie(e,t){return e(t)}function le(e,t,n,r){return e(t,n,r)}function ue(){}var se=ie,ce=!1,fe=!1;function pe(){null===te&&null===ne||(ue(),ae())}new Map;var de=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,he=Object.prototype.hasOwnProperty,me={},ve={};function ye(e,t,n,r,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a}var be={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){be[e]=new ye(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];be[t]=new ye(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){be[e]=new ye(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){be[e]=new ye(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){be[e]=new ye(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){be[e]=new ye(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){be[e]=new ye(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){be[e]=new ye(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){be[e]=new ye(e,5,!1,e.toLowerCase(),null,!1)}));var ge=/[\-:]([a-z])/g;function Ee(e){return e[1].toUpperCase()}function we(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function xe(e,t,n,r){var o=be.hasOwnProperty(t)?be[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!he.call(ve,e)||!he.call(me,e)&&(de.test(e)?ve[e]=!0:(me[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Se(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Te(e){e._valueTracker||(e._valueTracker=function(e){var t=Se(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ke(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Se(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Ce(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Me(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=we(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function _e(e,t){null!=(t=t.checked)&&xe(e,"checked",t,!1)}function Pe(e,t){_e(e,t);var n=we(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ae(e,t.type,we(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Oe(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ae(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Re(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+we(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Fe(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw Error(i(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(i(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:we(n)}}function je(e,t){var n=we(t.value),r=we(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function De(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(ge,Ee);be[t]=new ye(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(ge,Ee);be[t]=new ye(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(ge,Ee);be[t]=new ye(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){be[e]=new ye(e,1,!1,e.toLowerCase(),null,!1)})),be.xlinkHref=new ye("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){be[e]=new ye(e,1,!1,e.toLowerCase(),null,!0)}));var Ue={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Be(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Ve,ze=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Ue.svg||"innerHTML"in e)e.innerHTML=t;else{for((Ve=Ve||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Ve.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function We(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function He(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ye={animationend:He("Animation","AnimationEnd"),animationiteration:He("Animation","AnimationIteration"),animationstart:He("Animation","AnimationStart"),transitionend:He("Transition","TransitionEnd")},Ke={},Xe={};function Ge(e){if(Ke[e])return Ke[e];if(!Ye[e])return e;var t,n=Ye[e];for(t in n)if(n.hasOwnProperty(t)&&t in Xe)return Ke[e]=n[t];return e}J&&(Xe=document.createElement("div").style,"AnimationEvent"in window||(delete Ye.animationend.animation,delete Ye.animationiteration.animation,delete Ye.animationstart.animation),"TransitionEvent"in window||delete Ye.transitionend.transition);var Ze=Ge("animationend"),$e=Ge("animationiteration"),qe=Ge("animationstart"),Qe=Ge("transitionend"),Je="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");function et(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function tt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function nt(e){if(et(e)!==e)throw Error(i(188))}function rt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=et(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return nt(o),e;if(a===r)return nt(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var ot,at,it,lt=!1,ut=[],st=null,ct=null,ft=null,pt=new Map,dt=new Map,ht=[],mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),vt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function yt(e,t,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r}}function bt(e,t){switch(e){case"focus":case"blur":st=null;break;case"dragenter":case"dragleave":ct=null;break;case"mouseover":case"mouseout":ft=null;break;case"pointerover":case"pointerout":pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":dt.delete(t.pointerId)}}function gt(e,t,n,r,o){return null===e||e.nativeEvent!==o?(e=yt(t,n,r,o),null!==t&&(null!==(t=dr(t))&&at(t)),e):(e.eventSystemFlags|=r,e)}function Et(e){var t=pr(e.target);if(null!==t){var n=et(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=tt(n)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){it(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function wt(e){if(null!==e.blockedOn)return!1;var t=An(e.topLevelType,e.eventSystemFlags,e.nativeEvent);if(null!==t){var n=dr(t);return null!==n&&at(n),e.blockedOn=t,!1}return!0}function xt(e,t,n){wt(e)&&n.delete(t)}function St(){for(lt=!1;0<ut.length;){var e=ut[0];if(null!==e.blockedOn){null!==(e=dr(e.blockedOn))&&ot(e);break}var t=An(e.topLevelType,e.eventSystemFlags,e.nativeEvent);null!==t?e.blockedOn=t:ut.shift()}null!==st&&wt(st)&&(st=null),null!==ct&&wt(ct)&&(ct=null),null!==ft&&wt(ft)&&(ft=null),pt.forEach(xt),dt.forEach(xt)}function Tt(e,t){e.blockedOn===t&&(e.blockedOn=null,lt||(lt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,St)))}function kt(e){function t(t){return Tt(t,e)}if(0<ut.length){Tt(ut[0],e);for(var n=1;n<ut.length;n++){var r=ut[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==st&&Tt(st,e),null!==ct&&Tt(ct,e),null!==ft&&Tt(ft,e),pt.forEach(t),dt.forEach(t),n=0;n<ht.length;n++)(r=ht[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ht.length&&null===(n=ht[0]).blockedOn;)Et(n),null===n.blockedOn&&ht.shift()}function Ct(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Mt(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function _t(e,t,n){(t=R(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function Pt(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Mt(t);for(t=n.length;0<t--;)_t(n[t],"captured",e);for(t=0;t<n.length;t++)_t(n[t],"bubbled",e)}}function Ot(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=R(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function At(e){e&&e.dispatchConfig.registrationName&&Ot(e._targetInst,null,e)}function Rt(e){M(e,Pt)}function Nt(){return!0}function Lt(){return!1}function Ft(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Nt:Lt,this.isPropagationStopped=Lt,this}function jt(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Dt(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Ut(e){e.eventPool=[],e.getPooled=jt,e.release=Dt}o(Ft.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Nt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Nt)},persist:function(){this.isPersistent=Nt},isPersistent:Lt,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Lt,this._dispatchInstances=this._dispatchListeners=null}}),Ft.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Ft.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return o(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Ut(n),n},Ut(Ft);var It=Ft.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Bt=Ft.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Vt=Ft.extend({view:null,detail:null}),zt=Vt.extend({relatedTarget:null});function Wt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Ht={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Yt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Kt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Xt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Kt[e])&&!!t[e]}function Gt(){return Xt}for(var Zt=Vt.extend({key:function(e){if(e.key){var t=Ht[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Wt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Yt[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Gt,charCode:function(e){return"keypress"===e.type?Wt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Wt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),$t=0,qt=0,Qt=!1,Jt=!1,en=Vt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Gt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=$t;return $t=e.screenX,Qt?"mousemove"===e.type?e.screenX-t:0:(Qt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=qt;return qt=e.screenY,Jt?"mousemove"===e.type?e.screenY-t:0:(Jt=!0,0)}}),tn=en.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),nn=en.extend({dataTransfer:null}),rn=Vt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Gt}),on=Ft.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),an=en.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ln=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Ze,"animationEnd",2],[$e,"animationIteration",2],[qe,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Qe,"transitionEnd",2],["waiting","waiting",2]],un={},sn={},cn=0;cn<ln.length;cn++){var fn=ln[cn],pn=fn[0],dn=fn[1],hn=fn[2],mn="on"+(dn[0].toUpperCase()+dn.slice(1)),vn={phasedRegistrationNames:{bubbled:mn,captured:mn+"Capture"},dependencies:[pn],eventPriority:hn};un[dn]=vn,sn[pn]=vn}var yn={eventTypes:un,getEventPriority:function(e){return void 0!==(e=sn[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var o=sn[e];if(!o)return null;switch(e){case"keypress":if(0===Wt(n))return null;case"keydown":case"keyup":e=Zt;break;case"blur":case"focus":e=zt;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=en;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=nn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=rn;break;case Ze:case $e:case qe:e=It;break;case Qe:e=on;break;case"scroll":e=Vt;break;case"wheel":e=an;break;case"copy":case"cut":case"paste":e=Bt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=tn;break;default:e=Ft}return Rt(t=e.getPooled(o,t,n,r)),t}},bn=a.unstable_UserBlockingPriority,gn=a.unstable_runWithPriority,En=yn.getEventPriority,wn=10,xn=[];function Sn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=pr(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Ct(e.nativeEvent);r=e.topLevelType;for(var a=e.nativeEvent,i=e.eventSystemFlags,l=null,u=0;u<f.length;u++){var s=f[u];s&&(s=s.extractEvents(r,t,a,o,i))&&(l=C(l,s))}O(l)}}var Tn=!0;function kn(e,t){Cn(t,e,!1)}function Cn(e,t,n){switch(En(t)){case 0:var r=Mn.bind(null,t,1);break;case 1:r=_n.bind(null,t,1);break;default:r=On.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Mn(e,t,n){ce||ue();var r=On,o=ce;ce=!0;try{le(r,e,t,n)}finally{(ce=o)||pe()}}function _n(e,t,n){gn(bn,On.bind(null,e,t,n))}function Pn(e,t,n,r){if(xn.length){var o=xn.pop();o.topLevelType=e,o.eventSystemFlags=t,o.nativeEvent=n,o.targetInst=r,e=o}else e={topLevelType:e,eventSystemFlags:t,nativeEvent:n,targetInst:r,ancestors:[]};try{if(t=Sn,n=e,fe)t(n,void 0);else{fe=!0;try{se(t,n,void 0)}finally{fe=!1,pe()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,xn.length<wn&&xn.push(e)}}function On(e,t,n){if(Tn)if(0<ut.length&&-1<mt.indexOf(e))e=yt(null,e,t,n),ut.push(e);else{var r=An(e,t,n);null===r?bt(e,n):-1<mt.indexOf(e)?(e=yt(r,e,t,n),ut.push(e)):function(e,t,n,r){switch(t){case"focus":return st=gt(st,e,t,n,r),!0;case"dragenter":return ct=gt(ct,e,t,n,r),!0;case"mouseover":return ft=gt(ft,e,t,n,r),!0;case"pointerover":var o=r.pointerId;return pt.set(o,gt(pt.get(o)||null,e,t,n,r)),!0;case"gotpointercapture":return o=r.pointerId,dt.set(o,gt(dt.get(o)||null,e,t,n,r)),!0}return!1}(r,e,t,n)||(bt(e,n),Pn(e,t,n,null))}}function An(e,t,n){var r=Ct(n);if(null!==(r=pr(r))){var o=et(r);if(null===o)r=null;else{var a=o.tag;if(13===a){if(null!==(r=tt(o)))return r;r=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;r=null}else o!==r&&(r=null)}}return Pn(e,t,n,r),null}function Rn(e){if(!J)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var Nn=new("function"==typeof WeakMap?WeakMap:Map);function Ln(e){var t=Nn.get(e);return void 0===t&&(t=new Set,Nn.set(e,t)),t}function Fn(e,t,n){if(!n.has(e)){switch(e){case"scroll":Cn(t,"scroll",!0);break;case"focus":case"blur":Cn(t,"focus",!0),Cn(t,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":Rn(e)&&Cn(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Je.indexOf(e)&&kn(e,t)}n.add(e)}}var jn={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Dn=["Webkit","ms","Moz","O"];function Un(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||jn.hasOwnProperty(e)&&jn[e]?(""+t).trim():t+"px"}function In(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=Un(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(jn).forEach((function(e){Dn.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),jn[t]=jn[e]}))}));var Bn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Vn(e,t){if(t){if(Bn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62,""))}}function zn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Wn(e,t){var n=Ln(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++)Fn(t[r],e,n)}function Hn(){}function Yn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Kn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Xn(e,t){var n,r=Kn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Kn(r)}}function Gn(){for(var e=window,t=Yn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Yn((e=t.contentWindow).document)}return t}function Zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var $n="$",qn="/$",Qn="$?",Jn="$!",er=null,tr=null;function nr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function rr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var or="function"==typeof setTimeout?setTimeout:void 0,ar="function"==typeof clearTimeout?clearTimeout:void 0;function ir(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function lr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===$n||n===Jn||n===Qn){if(0===t)return e;t--}else n===qn&&t++}e=e.previousSibling}return null}var ur=Math.random().toString(36).slice(2),sr="__reactInternalInstance$"+ur,cr="__reactEventHandlers$"+ur,fr="__reactContainere$"+ur;function pr(e){var t=e[sr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[fr]||n[sr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=lr(e);null!==e;){if(n=e[sr])return n;e=lr(e)}return t}n=(e=n).parentNode}return null}function dr(e){return!(e=e[sr]||e[fr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function hr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function mr(e){return e[cr]||null}var vr=null,yr=null,br=null;function gr(){if(br)return br;var e,t,n=yr,r=n.length,o="value"in vr?vr.value:vr.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return br=o.slice(e,1<t?1-t:void 0)}var Er=Ft.extend({data:null}),wr=Ft.extend({data:null}),xr=[9,13,27,32],Sr=J&&"CompositionEvent"in window,Tr=null;J&&"documentMode"in document&&(Tr=document.documentMode);var kr=J&&"TextEvent"in window&&!Tr,Cr=J&&(!Sr||Tr&&8<Tr&&11>=Tr),Mr=String.fromCharCode(32),_r={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Pr=!1;function Or(e,t){switch(e){case"keyup":return-1!==xr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ar(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Rr=!1;var Nr={eventTypes:_r,extractEvents:function(e,t,n,r){var o;if(Sr)e:{switch(e){case"compositionstart":var a=_r.compositionStart;break e;case"compositionend":a=_r.compositionEnd;break e;case"compositionupdate":a=_r.compositionUpdate;break e}a=void 0}else Rr?Or(e,n)&&(a=_r.compositionEnd):"keydown"===e&&229===n.keyCode&&(a=_r.compositionStart);return a?(Cr&&"ko"!==n.locale&&(Rr||a!==_r.compositionStart?a===_r.compositionEnd&&Rr&&(o=gr()):(yr="value"in(vr=r)?vr.value:vr.textContent,Rr=!0)),a=Er.getPooled(a,t,n,r),o?a.data=o:null!==(o=Ar(n))&&(a.data=o),Rt(a),o=a):o=null,(e=kr?function(e,t){switch(e){case"compositionend":return Ar(t);case"keypress":return 32!==t.which?null:(Pr=!0,Mr);case"textInput":return(e=t.data)===Mr&&Pr?null:e;default:return null}}(e,n):function(e,t){if(Rr)return"compositionend"===e||!Sr&&Or(e,t)?(e=gr(),br=yr=vr=null,Rr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Cr&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=wr.getPooled(_r.beforeInput,t,n,r)).data=e,Rt(t)):t=null,null===o?t:null===t?o:[o,t]}},Lr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Lr[e.type]:"textarea"===t}var jr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Dr(e,t,n){return(e=Ft.getPooled(jr.change,e,t,n)).type="change",oe(n),Rt(e),e}var Ur=null,Ir=null;function Br(e){O(e)}function Vr(e){if(ke(hr(e)))return e}function zr(e,t){if("change"===e)return t}var Wr=!1;function Hr(){Ur&&(Ur.detachEvent("onpropertychange",Yr),Ir=Ur=null)}function Yr(e){if("value"===e.propertyName&&Vr(Ir))if(e=Dr(Ir,e,Ct(e)),ce)O(e);else{ce=!0;try{ie(Br,e)}finally{ce=!1,pe()}}}function Kr(e,t,n){"focus"===e?(Hr(),Ir=n,(Ur=t).attachEvent("onpropertychange",Yr)):"blur"===e&&Hr()}function Xr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Vr(Ir)}function Gr(e,t){if("click"===e)return Vr(t)}function Zr(e,t){if("input"===e||"change"===e)return Vr(t)}J&&(Wr=Rn("input")&&(!document.documentMode||9<document.documentMode));var $r,qr={eventTypes:jr,_isInputEventSupported:Wr,extractEvents:function(e,t,n,r){var o=t?hr(t):window,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type)var i=zr;else if(Fr(o))if(Wr)i=Zr;else{i=Xr;var l=Kr}else(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Gr);if(i&&(i=i(e,t)))return Dr(i,n,r);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Ae(o,"number",o.value)}},Qr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Jr={eventTypes:Qr,extractEvents:function(e,t,n,r,o){var a="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(a&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!i&&!a)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,null!==(t=(t=n.relatedTarget||n.toElement)?pr(t):null)&&(t!==(a=et(t))||5!==t.tag&&6!==t.tag)&&(t=null)):i=null,i===t)return null;if("mouseout"===e||"mouseover"===e)var l=en,u=Qr.mouseLeave,s=Qr.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=tn,u=Qr.pointerLeave,s=Qr.pointerEnter,c="pointer");if(e=null==i?o:hr(i),o=null==t?o:hr(t),(u=l.getPooled(u,i,n,r)).type=c+"leave",u.target=e,u.relatedTarget=o,(r=l.getPooled(s,t,n,r)).type=c+"enter",r.target=o,r.relatedTarget=e,c=t,(l=i)&&c)e:{for(e=c,i=0,t=s=l;t;t=Mt(t))i++;for(t=0,o=e;o;o=Mt(o))t++;for(;0<i-t;)s=Mt(s),i--;for(;0<t-i;)e=Mt(e),t--;for(;i--;){if(s===e||s===e.alternate)break e;s=Mt(s),e=Mt(e)}s=null}else s=null;for(e=s,s=[];l&&l!==e&&(null===(i=l.alternate)||i!==e);)s.push(l),l=Mt(l);for(l=[];c&&c!==e&&(null===(i=c.alternate)||i!==e);)l.push(c),c=Mt(c);for(c=0;c<s.length;c++)Ot(s[c],"bubbled",u);for(c=l.length;0<c--;)Ot(l[c],"captured",r);return n===$r?($r=null,[u]):($r=n,[u,r])}};var eo="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},to=Object.prototype.hasOwnProperty;function no(e,t){if(eo(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!to.call(t,n[r])||!eo(e[n[r]],t[n[r]]))return!1;return!0}var ro=J&&"documentMode"in document&&11>=document.documentMode,oo={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},ao=null,io=null,lo=null,uo=!1;function so(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return uo||null==ao||ao!==Yn(n)?null:("selectionStart"in(n=ao)&&Zn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},lo&&no(lo,n)?null:(lo=n,(e=Ft.getPooled(oo.select,io,e,t)).type="select",e.target=ao,Rt(e),e))}var co={eventTypes:oo,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Ln(a),o=h.onSelect;for(var i=0;i<o.length;i++)if(!a.has(o[i])){a=!1;break e}a=!0}o=!a}if(o)return null;switch(a=t?hr(t):window,e){case"focus":(Fr(a)||"true"===a.contentEditable)&&(ao=a,io=t,lo=null);break;case"blur":lo=io=ao=null;break;case"mousedown":uo=!0;break;case"contextmenu":case"mouseup":case"dragend":return uo=!1,so(n,r);case"selectionchange":if(ro)break;case"keydown":case"keyup":return so(n,r)}return null}};A.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=mr,S=dr,T=hr,A.injectEventPluginsByName({SimpleEventPlugin:yn,EnterLeaveEventPlugin:Jr,ChangeEventPlugin:qr,SelectEventPlugin:co,BeforeInputEventPlugin:Nr}),new Set;var fo=[],po=-1;function ho(e){0>po||(e.current=fo[po],fo[po]=null,po--)}function mo(e,t){po++,fo[po]=e.current,e.current=t}var vo={},yo={current:vo},bo={current:!1},go=vo;function Eo(e,t){var n=e.type.contextTypes;if(!n)return vo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function wo(e){return null!=(e=e.childContextTypes)}function xo(e){ho(bo),ho(yo)}function So(e){ho(bo),ho(yo)}function To(e,t,n){if(yo.current!==vo)throw Error(i(168));mo(yo,t),mo(bo,n)}function ko(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,q(t)||"Unknown",a));return o({},n,{},r)}function Co(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||vo,go=yo.current,mo(yo,t),mo(bo,bo.current),!0}function Mo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(t=ko(e,t,go),r.__reactInternalMemoizedMergedChildContext=t,ho(bo),ho(yo),mo(yo,t)):ho(bo),mo(bo,n)}var _o=a.unstable_runWithPriority,Po=a.unstable_scheduleCallback,Oo=a.unstable_cancelCallback,Ao=a.unstable_shouldYield,Ro=a.unstable_requestPaint,No=a.unstable_now,Lo=a.unstable_getCurrentPriorityLevel,Fo=a.unstable_ImmediatePriority,jo=a.unstable_UserBlockingPriority,Do=a.unstable_NormalPriority,Uo=a.unstable_LowPriority,Io=a.unstable_IdlePriority,Bo={},Vo=void 0!==Ro?Ro:function(){},zo=null,Wo=null,Ho=!1,Yo=No(),Ko=1e4>Yo?No:function(){return No()-Yo};function Xo(){switch(Lo()){case Fo:return 99;case jo:return 98;case Do:return 97;case Uo:return 96;case Io:return 95;default:throw Error(i(332))}}function Go(e){switch(e){case 99:return Fo;case 98:return jo;case 97:return Do;case 96:return Uo;case 95:return Io;default:throw Error(i(332))}}function Zo(e,t){return e=Go(e),_o(e,t)}function $o(e,t,n){return e=Go(e),Po(e,t,n)}function qo(e){return null===zo?(zo=[e],Wo=Po(Fo,Jo)):zo.push(e),Bo}function Qo(){if(null!==Wo){var e=Wo;Wo=null,Oo(e)}Jo()}function Jo(){if(!Ho&&null!==zo){Ho=!0;var e=0;try{var t=zo;Zo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),zo=null}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),Po(Fo,Qo),t}finally{Ho=!1}}}var ea=3;function ta(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function na(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ra={current:null},oa=null,aa=null,ia=null;function la(){ia=aa=oa=null}function ua(e,t){var n=e.type._context;mo(ra,n._currentValue),n._currentValue=t}function sa(e){var t=ra.current;ho(ra),e.type._context._currentValue=t}function ca(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function fa(e,t){oa=e,ia=aa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Yi=!0),e.firstContext=null)}function pa(e,t){if(ia!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ia=e,t=1073741823),t={context:e,observedBits:t,next:null},null===aa){if(null===oa)throw Error(i(308));aa=t,oa.dependencies={expirationTime:0,firstContext:t,responders:null}}else aa=aa.next=t;return e._currentValue}var da=!1;function ha(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function ma(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function va(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function ya(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function ba(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=ha(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=ha(e.memoizedState),o=n.updateQueue=ha(n.memoizedState)):r=e.updateQueue=ma(o):null===o&&(o=n.updateQueue=ma(r));null===o||r===o?ya(r,t):null===r.lastUpdate||null===o.lastUpdate?(ya(r,t),ya(o,t)):(ya(r,t),o.lastUpdate=t)}function ga(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=ha(e.memoizedState):Ea(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Ea(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=ma(t)),t}function wa(e,t,n,r,a,i){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(i,r,a):e;case 3:e.effectTag=-4097&e.effectTag|64;case 0:if(null==(a="function"==typeof(e=n.payload)?e.call(i,r,a):e))break;return o({},r,a);case 2:da=!0}return r}function xa(e,t,n,r,o){da=!1;for(var a=(t=Ea(e,t)).baseState,i=null,l=0,u=t.firstUpdate,s=a;null!==u;){var c=u.expirationTime;c<o?(null===i&&(i=u,a=s),l<c&&(l=c)):(Mu(c,u.suspenseConfig),s=wa(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(c=null,u=t.firstCapturedUpdate;null!==u;){var f=u.expirationTime;f<o?(null===c&&(c=u,null===i&&(a=s)),l<f&&(l=f)):(s=wa(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===i&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===c&&(a=s),t.baseState=a,t.firstUpdate=i,t.firstCapturedUpdate=c,_u(l),e.expirationTime=l,e.memoizedState=s}function Sa(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),Ta(t.firstEffect,n),t.firstEffect=t.lastEffect=null,Ta(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function Ta(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw Error(i(191,n));n.call(r)}e=e.nextEffect}}var ka=N.ReactCurrentBatchConfig,Ca=(new r.Component).refs;function Ma(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var _a={isMounted:function(e){return!!(e=e._reactInternalFiber)&&et(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=hu(),o=ka.suspense;(o=va(r=mu(r,e,o),o)).payload=t,null!=n&&(o.callback=n),ba(e,o),vu(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=hu(),o=ka.suspense;(o=va(r=mu(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),ba(e,o),vu(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=hu(),r=ka.suspense;(r=va(n=mu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ba(e,r),vu(e,n)}};function Pa(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!no(n,r)||!no(o,a))}function Oa(e,t,n){var r=!1,o=vo,a=t.contextType;return"object"==typeof a&&null!==a?a=pa(a):(o=wo(t)?go:yo.current,a=(r=null!=(r=t.contextTypes))?Eo(e,o):vo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=_a,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Aa(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&_a.enqueueReplaceState(t,t.state,null)}function Ra(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ca;var a=t.contextType;"object"==typeof a&&null!==a?o.context=pa(a):(a=wo(t)?go:yo.current,o.context=Eo(e,a)),null!==(a=e.updateQueue)&&(xa(e,a,n,o,r),o.state=e.memoizedState),"function"==typeof(a=t.getDerivedStateFromProps)&&(Ma(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&_a.enqueueReplaceState(o,o.state,null),null!==(a=e.updateQueue)&&(xa(e,a,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Na=Array.isArray;function La(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===Ca&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Fa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function ja(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Gu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=qu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=La(e,t,n),r.return=e,r):((r=Zu(n.type,n.key,n.props,null,e.mode,r)).ref=La(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Qu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=$u(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=qu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case j:return(n=Zu(t.type,t.key,t.props,null,e.mode,n)).ref=La(e,null,t),n.return=e,n;case D:return(t=Qu(t,e.mode,n)).return=e,t}if(Na(t)||$(t))return(t=$u(t,e.mode,n,null)).return=e,t;Fa(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case j:return n.key===o?n.type===U?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case D:return n.key===o?c(e,t,n,r):null}if(Na(n)||$(n))return null!==o?null:f(e,t,n,r,null);Fa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case j:return e=e.get(null===r.key?n:r.key)||null,r.type===U?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case D:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Na(r)||$(r))return f(t,e=e.get(n)||null,r,o,null);Fa(t,r)}return null}function m(o,i,l,u){for(var s=null,c=null,f=i,m=i=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=d(o,f,l[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),i=a(y,i,m),null===c?s=y:c.sibling=y,c=y,f=v}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)null!==(f=p(o,l[m],u))&&(i=a(f,i,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),s}function v(o,l,u,s){var c=$(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var f=c=null,m=l,v=l=0,y=null,b=u.next();null!==m&&!b.done;v++,b=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var g=d(o,m,b.value,s);if(null===g){null===m&&(m=y);break}e&&m&&null===g.alternate&&t(o,m),l=a(g,l,v),null===f?c=g:f.sibling=g,f=g,m=y}if(b.done)return n(o,m),c;if(null===m){for(;!b.done;v++,b=u.next())null!==(b=p(o,b.value,s))&&(l=a(b,l,v),null===f?c=b:f.sibling=b,f=b);return c}for(m=r(o,m);!b.done;v++,b=u.next())null!==(b=h(m,o,v,b.value,s))&&(e&&null!==b.alternate&&m.delete(null===b.key?v:b.key),l=a(b,l,v),null===f?c=b:f.sibling=b,f=b);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,a,u){var s="object"==typeof a&&null!==a&&a.type===U&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case j:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){if(7===s.tag?a.type===U:s.elementType===a.type){n(e,s.sibling),(r=o(s,a.type===U?a.props.children:a.props)).ref=La(e,s,a),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}a.type===U?((r=$u(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Zu(a.type,a.key,a.props,null,e.mode,u)).ref=La(e,r,a),u.return=e,e=u)}return l(e);case D:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Qu(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=qu(a,e.mode,u)).return=e,e=r),l(e);if(Na(a))return m(e,r,a,u);if($(a))return v(e,r,a,u);if(c&&Fa(e,a),void 0===a&&!s)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Da=ja(!0),Ua=ja(!1),Ia={},Ba={current:Ia},Va={current:Ia},za={current:Ia};function Wa(e){if(e===Ia)throw Error(i(174));return e}function Ha(e,t){mo(za,t),mo(Va,e),mo(Ba,Ia);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Be(null,"");break;default:t=Be(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}ho(Ba),mo(Ba,t)}function Ya(e){ho(Ba),ho(Va),ho(za)}function Ka(e){Wa(za.current);var t=Wa(Ba.current),n=Be(t,e.type);t!==n&&(mo(Va,e),mo(Ba,n))}function Xa(e){Va.current===e&&(ho(Ba),ho(Va))}var Ga={current:0};function Za(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===Qn||n.data===Jn))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function $a(e,t){return{responder:e,props:t}}var qa=N.ReactCurrentDispatcher,Qa=N.ReactCurrentBatchConfig,Ja=0,ei=null,ti=null,ni=null,ri=null,oi=null,ai=null,ii=0,li=null,ui=0,si=!1,ci=null,fi=0;function pi(){throw Error(i(321))}function di(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!eo(e[n],t[n]))return!1;return!0}function hi(e,t,n,r,o,a){if(Ja=a,ei=t,ni=null!==e?e.memoizedState:null,qa.current=null===ni?Ni:Li,t=n(r,o),si){do{si=!1,fi+=1,ni=null!==e?e.memoizedState:null,ai=ri,li=oi=ti=null,qa.current=Li,t=n(r,o)}while(si);ci=null,fi=0}if(qa.current=Ri,(e=ei).memoizedState=ri,e.expirationTime=ii,e.updateQueue=li,e.effectTag|=ui,e=null!==ti&&null!==ti.next,Ja=0,ai=oi=ri=ni=ti=ei=null,ii=0,li=null,ui=0,e)throw Error(i(300));return t}function mi(){qa.current=Ri,Ja=0,ai=oi=ri=ni=ti=ei=null,ii=0,li=null,ui=0,si=!1,ci=null,fi=0}function vi(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===oi?ri=oi=e:oi=oi.next=e,oi}function yi(){if(null!==ai)ai=(oi=ai).next,ni=null!==(ti=ni)?ti.next:null;else{if(null===ni)throw Error(i(310));var e={memoizedState:(ti=ni).memoizedState,baseState:ti.baseState,queue:ti.queue,baseUpdate:ti.baseUpdate,next:null};oi=null===oi?ri=e:oi.next=e,ni=ti.next}return oi}function bi(e,t){return"function"==typeof t?t(e):t}function gi(e){var t=yi(),n=t.queue;if(null===n)throw Error(i(311));if(n.lastRenderedReducer=e,0<fi){var r=n.dispatch;if(null!==ci){var o=ci.get(n);if(void 0!==o){ci.delete(n);var a=t.memoizedState;do{a=e(a,o.action),o=o.next}while(null!==o);return eo(a,t.memoizedState)||(Yi=!0),t.memoizedState=a,t.baseUpdate===n.last&&(t.baseState=a),n.lastRenderedState=a,[a,r]}}return[t.memoizedState,r]}r=n.last;var l=t.baseUpdate;if(a=t.baseState,null!==l?(null!==r&&(r.next=null),r=l.next):r=null!==r?r.next:null,null!==r){var u=o=null,s=r,c=!1;do{var f=s.expirationTime;f<Ja?(c||(c=!0,u=l,o=a),f>ii&&_u(ii=f)):(Mu(f,s.suspenseConfig),a=s.eagerReducer===e?s.eagerState:e(a,s.action)),l=s,s=s.next}while(null!==s&&s!==r);c||(u=l,o=a),eo(a,t.memoizedState)||(Yi=!0),t.memoizedState=a,t.baseUpdate=u,t.baseState=o,n.lastRenderedState=a}return[t.memoizedState,n.dispatch]}function Ei(e){var t=vi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:bi,lastRenderedState:e}).dispatch=Ai.bind(null,ei,e),[t.memoizedState,e]}function wi(e){return gi(bi)}function xi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===li?(li={lastEffect:null}).lastEffect=e.next=e:null===(t=li.lastEffect)?li.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,li.lastEffect=e),e}function Si(e,t,n,r){var o=vi();ui|=e,o.memoizedState=xi(t,n,void 0,void 0===r?null:r)}function Ti(e,t,n,r){var o=yi();r=void 0===r?null:r;var a=void 0;if(null!==ti){var i=ti.memoizedState;if(a=i.destroy,null!==r&&di(r,i.deps))return void xi(0,n,a,r)}ui|=e,o.memoizedState=xi(t,n,a,r)}function ki(e,t){return Si(516,192,e,t)}function Ci(e,t){return Ti(516,192,e,t)}function Mi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function _i(){}function Pi(e,t){return vi().memoizedState=[e,void 0===t?null:t],e}function Oi(e,t){var n=yi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&di(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ai(e,t,n){if(!(25>fi))throw Error(i(301));var r=e.alternate;if(e===ei||null!==r&&r===ei)if(si=!0,e={expirationTime:Ja,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===ci&&(ci=new Map),void 0===(n=ci.get(t)))ci.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var o=hu(),a=ka.suspense;a={expirationTime:o=mu(o,e,a),suspenseConfig:a,action:n,eagerReducer:null,eagerState:null,next:null};var l=t.last;if(null===l)a.next=a;else{var u=l.next;null!==u&&(a.next=u),l.next=a}if(t.last=a,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var s=t.lastRenderedState,c=r(s,n);if(a.eagerReducer=r,a.eagerState=c,eo(c,s))return}catch(e){}vu(e,o)}}var Ri={readContext:pa,useCallback:pi,useContext:pi,useEffect:pi,useImperativeHandle:pi,useLayoutEffect:pi,useMemo:pi,useReducer:pi,useRef:pi,useState:pi,useDebugValue:pi,useResponder:pi,useDeferredValue:pi,useTransition:pi},Ni={readContext:pa,useCallback:Pi,useContext:pa,useEffect:ki,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Si(4,36,Mi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Si(4,36,e,t)},useMemo:function(e,t){var n=vi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=vi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ai.bind(null,ei,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},vi().memoizedState=e},useState:Ei,useDebugValue:_i,useResponder:$a,useDeferredValue:function(e,t){var n=Ei(e),r=n[0],o=n[1];return ki((function(){a.unstable_next((function(){var n=Qa.suspense;Qa.suspense=void 0===t?null:t;try{o(e)}finally{Qa.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=Ei(!1),n=t[0],r=t[1];return[Pi((function(t){r(!0),a.unstable_next((function(){var n=Qa.suspense;Qa.suspense=void 0===e?null:e;try{r(!1),t()}finally{Qa.suspense=n}}))}),[e,n]),n]}},Li={readContext:pa,useCallback:Oi,useContext:pa,useEffect:Ci,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ti(4,36,Mi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ti(4,36,e,t)},useMemo:function(e,t){var n=yi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&di(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:gi,useRef:function(){return yi().memoizedState},useState:wi,useDebugValue:_i,useResponder:$a,useDeferredValue:function(e,t){var n=wi(),r=n[0],o=n[1];return Ci((function(){a.unstable_next((function(){var n=Qa.suspense;Qa.suspense=void 0===t?null:t;try{o(e)}finally{Qa.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=wi(),n=t[0],r=t[1];return[Oi((function(t){r(!0),a.unstable_next((function(){var n=Qa.suspense;Qa.suspense=void 0===e?null:e;try{r(!1),t()}finally{Qa.suspense=n}}))}),[e,n]),n]}},Fi=null,ji=null,Di=!1;function Ui(e,t){var n=Ku(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ii(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Bi(e){if(Di){var t=ji;if(t){var n=t;if(!Ii(e,t)){if(!(t=ir(n.nextSibling))||!Ii(e,t))return e.effectTag=-1025&e.effectTag|2,Di=!1,void(Fi=e);Ui(Fi,n)}Fi=e,ji=ir(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Di=!1,Fi=e}}function Vi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Fi=e}function zi(e){if(e!==Fi)return!1;if(!Di)return Vi(e),Di=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!rr(t,e.memoizedProps))for(t=ji;t;)Ui(e,t),t=ir(t.nextSibling);if(Vi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if(n===qn){if(0===t){ji=ir(e.nextSibling);break e}t--}else n!==$n&&n!==Jn&&n!==Qn||t++}e=e.nextSibling}ji=null}}else ji=Fi?ir(e.stateNode.nextSibling):null;return!0}function Wi(){ji=Fi=null,Di=!1}var Hi=N.ReactCurrentOwner,Yi=!1;function Ki(e,t,n,r){t.child=null===e?Ua(t,null,n,r):Da(t,e.child,n,r)}function Xi(e,t,n,r,o){n=n.render;var a=t.ref;return fa(t,o),r=hi(e,t,n,r,a,o),null===e||Yi?(t.effectTag|=1,Ki(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),cl(e,t,o))}function Gi(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Xu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Zu(n.type,null,r,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Zi(e,t,i,r,o,a))}return i=e.child,o<a&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:no)(o,r)&&e.ref===t.ref)?cl(e,t,a):(t.effectTag|=1,(e=Gu(i,r)).ref=t.ref,e.return=t,t.child=e)}function Zi(e,t,n,r,o,a){return null!==e&&no(e.memoizedProps,r)&&e.ref===t.ref&&(Yi=!1,o<a)?cl(e,t,a):qi(e,t,n,r,a)}function $i(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function qi(e,t,n,r,o){var a=wo(n)?go:yo.current;return a=Eo(t,a),fa(t,o),n=hi(e,t,n,r,a,o),null===e||Yi?(t.effectTag|=1,Ki(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),cl(e,t,o))}function Qi(e,t,n,r,o){if(wo(n)){var a=!0;Co(t)}else a=!1;if(fa(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Oa(t,n,r),Ra(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;"object"==typeof s&&null!==s?s=pa(s):s=Eo(t,s=wo(n)?go:yo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&Aa(t,i,r,s),da=!1;var p=t.memoizedState;u=i.state=p;var d=t.updateQueue;null!==d&&(xa(t,d,r,i,o),u=t.memoizedState),l!==r||p!==u||bo.current||da?("function"==typeof c&&(Ma(t,n,c,r),u=t.memoizedState),(l=da||Pa(t,n,l,r,p,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,l=t.memoizedProps,i.props=t.type===t.elementType?l:na(t.type,l),u=i.context,"object"==typeof(s=n.contextType)&&null!==s?s=pa(s):s=Eo(t,s=wo(n)?go:yo.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&Aa(t,i,r,s),da=!1,u=t.memoizedState,p=i.state=u,null!==(d=t.updateQueue)&&(xa(t,d,r,i,o),p=t.memoizedState),l!==r||u!==p||bo.current||da?("function"==typeof c&&(Ma(t,n,c,r),p=t.memoizedState),(c=da||Pa(t,n,l,r,u,p,s))?(f||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,p,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),i.props=r,i.state=p,i.context=s,r=c):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Ji(e,t,n,r,a,o)}function Ji(e,t,n,r,o,a){$i(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return o&&Mo(t,n,!1),cl(e,t,a);r=t.stateNode,Hi.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=Da(t,e.child,null,a),t.child=Da(t,null,l,a)):Ki(e,t,l,a),t.memoizedState=r.state,o&&Mo(t,n,!0),t.child}function el(e){var t=e.stateNode;t.pendingContext?To(0,t.pendingContext,t.pendingContext!==t.context):t.context&&To(0,t.context,!1),Ha(e,t.containerInfo)}var tl,nl,rl,ol,al={dehydrated:null,retryTime:0};function il(e,t,n){var r,o=t.mode,a=t.pendingProps,i=Ga.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&i)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),mo(Ga,1&i),null===e){if(void 0!==a.fallback&&Bi(t),l){if(l=a.fallback,(a=$u(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=$u(l,o,n,null)).return=t,a.sibling=n,t.memoizedState=al,t.child=a,n}return o=a.children,t.memoizedState=null,t.child=Ua(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(a=a.fallback,(n=Gu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(o=Gu(o,a,o.expirationTime)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=al,t.child=n,o}return n=Da(t,e.child,a.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=a.fallback,(a=$u(null,o,0,null)).return=t,a.child=e,null!==e&&(e.return=a),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=$u(l,o,n,null)).return=t,a.sibling=n,n.effectTag|=2,a.childExpirationTime=0,t.memoizedState=al,t.child=a,n}return t.memoizedState=null,t.child=Da(t,e,a.children,n)}function ll(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ca(e.return,t)}function ul(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=o,i.lastEffect=a)}function sl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Ki(e,t,r.children,n),0!=(2&(r=Ga.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ll(e,n);else if(19===e.tag)ll(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(mo(Ga,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Za(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),ul(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Za(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}ul(t,!0,n,null,a,t.lastEffect);break;case"together":ul(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function cl(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&_u(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Gu(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Gu(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function fl(e){e.effectTag|=4}function pl(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function dl(e){switch(e.tag){case 1:wo(e.type)&&xo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ya(),So(),0!=(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return Xa(e),null;case 13:return ho(Ga),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ho(Ga),null;case 4:return Ya(),null;case 10:return sa(e),null;default:return null}}function hl(e,t){return{value:e,source:t,stack:Q(t)}}tl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},nl=function(){},rl=function(e,t,n,r,a){var i=e.memoizedProps;if(i!==r){var l,u,s=t.stateNode;switch(Wa(Ba.current),e=null,n){case"input":i=Ce(s,i),r=Ce(s,r),e=[];break;case"option":i=Re(s,i),r=Re(s,r),e=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":i=Le(s,i),r=Le(s,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(s.onclick=Hn)}for(l in Vn(n,r),n=null,i)if(!r.hasOwnProperty(l)&&i.hasOwnProperty(l)&&null!=i[l])if("style"===l)for(u in s=i[l])s.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(d.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var c=r[l];if(s=null!=i?i[l]:void 0,r.hasOwnProperty(l)&&c!==s&&(null!=c||null!=s))if("style"===l)if(s){for(u in s)!s.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in c)c.hasOwnProperty(u)&&s[u]!==c[u]&&(n||(n={}),n[u]=c[u])}else n||(e||(e=[]),e.push(l,n)),n=c;else"dangerouslySetInnerHTML"===l?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(l,""+c)):"children"===l?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(l,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(d.hasOwnProperty(l)?(null!=c&&Wn(a,l),e||s===c||(e=[])):(e=e||[]).push(l,c))}n&&(e=e||[]).push("style",n),a=e,(t.updateQueue=a)&&fl(t)}},ol=function(e,t,n,r){n!==r&&fl(t)};var ml="function"==typeof WeakSet?WeakSet:Set;function vl(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=Q(n)),null!==n&&q(n.type),t=t.value,null!==e&&1===e.tag&&q(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function yl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Bu(e,t)}else t.current=null}function bl(e,t){switch(t.tag){case 0:case 11:case 15:gl(2,0,t);break;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:na(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:case 17:break;default:throw Error(i(163))}}function gl(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&e)){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}0!=(r.tag&t)&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function El(e,t,n){switch("function"==typeof Hu&&Hu(t),t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Zo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){Bu(o,e)}}e=e.next}while(e!==r)}))}break;case 1:yl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Bu(e,t)}}(t,n);break;case 5:yl(t);break;case 4:Tl(e,t,n)}}function wl(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,null!==t&&wl(t)}function xl(e){return 5===e.tag||3===e.tag||4===e.tag}function Sl(e){e:{for(var t=e.return;null!==t;){if(xl(t)){var n=t;break e}t=t.return}throw Error(i(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.effectTag&&(We(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||xl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){var a=5===o.tag||6===o.tag;if(a){var l=a?o.stateNode:o.stateNode.instance;if(n)if(r){var u=l;l=n,8===(a=t).nodeType?a.parentNode.insertBefore(u,l):a.insertBefore(u,l)}else t.insertBefore(l,n);else r?(8===(u=t).nodeType?(a=u.parentNode).insertBefore(l,u):(a=u).appendChild(l),null!=(u=u._reactRootContainer)||null!==a.onclick||(a.onclick=Hn)):t.appendChild(l)}else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Tl(e,t,n){for(var r,o,a=t,l=!1;;){if(!l){l=a.return;e:for(;;){if(null===l)throw Error(i(160));switch(r=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===a.tag||6===a.tag){e:for(var u=e,s=a,c=n,f=s;;)if(El(u,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===s)break;for(;null===f.sibling;){if(null===f.return||f.return===s)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(u=r,s=a.stateNode,8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)):r.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){r=a.stateNode.containerInfo,o=!0,a.child.return=a,a=a.child;continue}}else if(El(e,a,n),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(l=!1)}a.sibling.return=a.return,a=a.sibling}}function kl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:gl(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[cr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&_e(n,r),zn(e,o),t=zn(e,r),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?In(n,u):"dangerouslySetInnerHTML"===l?ze(n,u):"children"===l?We(n,u):xe(n,l,u,t)}switch(e){case"input":Pe(n,r);break;case"textarea":je(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Ne(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Ne(n,!!r.multiple,r.defaultValue,!0):Ne(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw Error(i(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:(t=t.stateNode).hydrate&&(t.hydrate=!1,kt(t.containerInfo));break;case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,tu=Ko()),null!==n)e:for(e=n;;){if(5===e.tag)a=e.stateNode,r?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,a.style.display=Un("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}Cl(t);break;case 19:Cl(t);break;case 17:case 20:case 21:break;default:throw Error(i(163))}}function Cl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ml),t.forEach((function(t){var r=zu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var Ml="function"==typeof WeakMap?WeakMap:Map;function _l(e,t,n){(n=va(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ou||(ou=!0,au=r),vl(e,t)},n}function Pl(e,t,n){(n=va(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return vl(e,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===iu?iu=new Set([this]):iu.add(this),vl(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Ol,Al=Math.ceil,Rl=N.ReactCurrentDispatcher,Nl=N.ReactCurrentOwner,Ll=0,Fl=8,jl=16,Dl=32,Ul=0,Il=1,Bl=2,Vl=3,zl=4,Wl=5,Hl=Ll,Yl=null,Kl=null,Xl=0,Gl=Ul,Zl=null,$l=1073741823,ql=1073741823,Ql=null,Jl=0,eu=!1,tu=0,nu=500,ru=null,ou=!1,au=null,iu=null,lu=!1,uu=null,su=90,cu=null,fu=0,pu=null,du=0;function hu(){return(Hl&(jl|Dl))!==Ll?1073741821-(Ko()/10|0):0!==du?du:du=1073741821-(Ko()/10|0)}function mu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Xo();if(0==(4&t))return 99===r?1073741823:1073741822;if((Hl&jl)!==Ll)return Xl;if(null!==n)e=ta(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=ta(e,150,100);break;case 97:case 96:e=ta(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==Yl&&e===Xl&&--e,e}function vu(e,t){if(50<fu)throw fu=0,pu=null,Error(i(185));if(null!==(e=yu(e,t))){var n=Xo();1073741823===t?(Hl&Fl)!==Ll&&(Hl&(jl|Dl))===Ll?wu(e):(gu(e),Hl===Ll&&Qo()):gu(e),(4&Hl)===Ll||98!==n&&99!==n||(null===cu?cu=new Map([[e,t]]):(void 0===(n=cu.get(e))||n>t)&&cu.set(e,t))}}function yu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Yl===o&&(_u(t),Gl===zl&&ts(o,Xl)),ns(o,t)),o}function bu(e){var t=e.lastExpiredTime;return 0!==t?t:es(e,t=e.firstPendingTime)?(t=e.lastPingedTime)>(e=e.nextKnownPendingLevel)?t:e:t}function gu(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=qo(wu.bind(null,e));else{var t=bu(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=hu();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Bo&&Oo(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?qo(wu.bind(null,e)):$o(r,Eu.bind(null,e),{timeout:10*(1073741821-t)-Ko()}),e.callbackNode=t}}}function Eu(e,t){if(du=0,t)return rs(e,t=hu()),gu(e),null;var n=bu(e);if(0!==n){if(t=e.callbackNode,(Hl&(jl|Dl))!==Ll)throw Error(i(327));if(Du(),e===Yl&&n===Xl||Tu(e,n),null!==Kl){var r=Hl;Hl|=jl;for(var o=Cu();;)try{Ou();break}catch(t){ku(e,t)}if(la(),Hl=r,Rl.current=o,Gl===Il)throw t=Zl,Tu(e,n),ts(e,n),gu(e),t;if(null===Kl)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Gl,Yl=null,r){case Ul:case Il:throw Error(i(345));case Bl:rs(e,2<n?2:n);break;case Vl:if(ts(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Nu(o)),1073741823===$l&&10<(o=tu+nu-Ko())){if(eu){var a=e.lastPingedTime;if(0===a||a>=n){e.lastPingedTime=n,Tu(e,n);break}}if(0!==(a=bu(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=or(Lu.bind(null,e),o);break}Lu(e);break;case zl:if(ts(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Nu(o)),eu&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,Tu(e,n);break}if(0!==(o=bu(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==ql?r=10*(1073741821-ql)-Ko():1073741823===$l?r=0:(r=10*(1073741821-$l)-5e3,0>(r=(o=Ko())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Al(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=or(Lu.bind(null,e),r);break}Lu(e);break;case Wl:if(1073741823!==$l&&null!==Ql){a=$l;var l=Ql;if(0>=(r=0|l.busyMinDurationMs)?r=0:(o=0|l.busyDelayMs,r=(a=Ko()-(10*(1073741821-a)-(0|l.timeoutMs||5e3)))<=o?0:o+r-a),10<r){ts(e,n),e.timeoutHandle=or(Lu.bind(null,e),r);break}}Lu(e);break;default:throw Error(i(329))}if(gu(e),e.callbackNode===t)return Eu.bind(null,e)}}return null}function wu(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,e.finishedExpirationTime===t)Lu(e);else{if((Hl&(jl|Dl))!==Ll)throw Error(i(327));if(Du(),e===Yl&&t===Xl||Tu(e,t),null!==Kl){var n=Hl;Hl|=jl;for(var r=Cu();;)try{Pu();break}catch(t){ku(e,t)}if(la(),Hl=n,Rl.current=r,Gl===Il)throw n=Zl,Tu(e,t),ts(e,t),gu(e),n;if(null!==Kl)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Yl=null,Lu(e),gu(e)}}return null}function xu(e,t){var n=Hl;Hl|=1;try{return e(t)}finally{(Hl=n)===Ll&&Qo()}}function Su(e,t){var n=Hl;Hl&=-2,Hl|=Fl;try{return e(t)}finally{(Hl=n)===Ll&&Qo()}}function Tu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ar(n)),null!==Kl)for(n=Kl.return;null!==n;){var r=n;switch(r.tag){case 1:var o=r.type.childContextTypes;null!=o&&xo();break;case 3:Ya(),So();break;case 5:Xa(r);break;case 4:Ya();break;case 13:case 19:ho(Ga);break;case 10:sa(r)}n=n.return}Yl=e,Kl=Gu(e.current,null),Xl=t,Gl=Ul,Zl=null,ql=$l=1073741823,Ql=null,Jl=0,eu=!1}function ku(e,t){for(;;){try{if(la(),mi(),null===Kl||null===Kl.return)return Gl=Il,Zl=t,null;e:{var n=e,r=Kl.return,o=Kl,a=t;if(t=Xl,o.effectTag|=2048,o.firstEffect=o.lastEffect=null,null!==a&&"object"==typeof a&&"function"==typeof a.then){var i=a,l=0!=(1&Ga.current),u=r;do{var s;if(s=13===u.tag){var c=u.memoizedState;if(null!==c)s=null!==c.dehydrated;else{var f=u.memoizedProps;s=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!l)}}if(s){var p=u.updateQueue;if(null===p){var d=new Set;d.add(i),u.updateQueue=d}else p.add(i);if(0==(2&u.mode)){if(u.effectTag|=64,o.effectTag&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var h=va(1073741823,null);h.tag=2,ba(o,h)}o.expirationTime=1073741823;break e}a=void 0,o=t;var m=n.pingCache;if(null===m?(m=n.pingCache=new Ml,a=new Set,m.set(i,a)):void 0===(a=m.get(i))&&(a=new Set,m.set(i,a)),!a.has(o)){a.add(o);var v=Vu.bind(null,n,i,o);i.then(v,v)}u.effectTag|=4096,u.expirationTime=t;break e}u=u.return}while(null!==u);a=Error((q(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+Q(o))}Gl!==Wl&&(Gl=Bl),a=hl(a,o),u=r;do{switch(u.tag){case 3:i=a,u.effectTag|=4096,u.expirationTime=t,ga(u,_l(u,i,t));break e;case 1:i=a;var y=u.type,b=u.stateNode;if(0==(64&u.effectTag)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===iu||!iu.has(b)))){u.effectTag|=4096,u.expirationTime=t,ga(u,Pl(u,i,t));break e}}u=u.return}while(null!==u)}Kl=Ru(Kl)}catch(e){t=e;continue}break}}function Cu(){var e=Rl.current;return Rl.current=Ri,null===e?Ri:e}function Mu(e,t){e<$l&&2<e&&($l=e),null!==t&&e<ql&&2<e&&(ql=e,Ql=t)}function _u(e){e>Jl&&(Jl=e)}function Pu(){for(;null!==Kl;)Kl=Au(Kl)}function Ou(){for(;null!==Kl&&!Ao();)Kl=Au(Kl)}function Au(e){var t=Ol(e.alternate,e,Xl);return e.memoizedProps=e.pendingProps,null===t&&(t=Ru(e)),Nl.current=null,t}function Ru(e){Kl=e;do{var t=Kl.alternate;if(e=Kl.return,0==(2048&Kl.effectTag)){e:{var n=t,r=Xl,a=(t=Kl).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:wo(t.type)&&xo();break;case 3:Ya(),So(),(a=t.stateNode).pendingContext&&(a.context=a.pendingContext,a.pendingContext=null),(null===n||null===n.child)&&zi(t)&&fl(t),nl(t);break;case 5:Xa(t),r=Wa(za.current);var l=t.type;if(null!==n&&null!=t.stateNode)rl(n,t,l,a,r),n.ref!==t.ref&&(t.effectTag|=128);else if(a){var u=Wa(Ba.current);if(zi(t)){var s=(a=t).stateNode;n=a.type;var c=a.memoizedProps,f=r;switch(s[sr]=a,s[cr]=c,l=void 0,r=s,n){case"iframe":case"object":case"embed":kn("load",r);break;case"video":case"audio":for(s=0;s<Je.length;s++)kn(Je[s],r);break;case"source":kn("error",r);break;case"img":case"image":case"link":kn("error",r),kn("load",r);break;case"form":kn("reset",r),kn("submit",r);break;case"details":kn("toggle",r);break;case"input":Me(r,c),kn("invalid",r),Wn(f,"onChange");break;case"select":r._wrapperState={wasMultiple:!!c.multiple},kn("invalid",r),Wn(f,"onChange");break;case"textarea":Fe(r,c),kn("invalid",r),Wn(f,"onChange")}for(l in Vn(n,c),s=null,c)c.hasOwnProperty(l)&&(u=c[l],"children"===l?"string"==typeof u?r.textContent!==u&&(s=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(s=["children",""+u]):d.hasOwnProperty(l)&&null!=u&&Wn(f,l));switch(n){case"input":Te(r),Oe(r,c,!0);break;case"textarea":Te(r),De(r);break;case"select":case"option":break;default:"function"==typeof c.onClick&&(r.onclick=Hn)}l=s,a.updateQueue=l,(a=null!==l)&&fl(t)}else{n=t,f=l,c=a,s=9===r.nodeType?r:r.ownerDocument,u===Ue.html&&(u=Ie(f)),u===Ue.html?"script"===f?((c=s.createElement("div")).innerHTML="<script><\/script>",s=c.removeChild(c.firstChild)):"string"==typeof c.is?s=s.createElement(f,{is:c.is}):(s=s.createElement(f),"select"===f&&(f=s,c.multiple?f.multiple=!0:c.size&&(f.size=c.size))):s=s.createElementNS(u,f),(c=s)[sr]=n,c[cr]=a,tl(c,t,!1,!1),t.stateNode=c;var p=r,h=zn(f=l,n=a);switch(f){case"iframe":case"object":case"embed":kn("load",c),r=n;break;case"video":case"audio":for(r=0;r<Je.length;r++)kn(Je[r],c);r=n;break;case"source":kn("error",c),r=n;break;case"img":case"image":case"link":kn("error",c),kn("load",c),r=n;break;case"form":kn("reset",c),kn("submit",c),r=n;break;case"details":kn("toggle",c),r=n;break;case"input":Me(c,n),r=Ce(c,n),kn("invalid",c),Wn(p,"onChange");break;case"option":r=Re(c,n);break;case"select":c._wrapperState={wasMultiple:!!n.multiple},r=o({},n,{value:void 0}),kn("invalid",c),Wn(p,"onChange");break;case"textarea":Fe(c,n),r=Le(c,n),kn("invalid",c),Wn(p,"onChange");break;default:r=n}Vn(f,r),s=void 0,u=f;var m=c,v=r;for(s in v)if(v.hasOwnProperty(s)){var y=v[s];"style"===s?In(m,y):"dangerouslySetInnerHTML"===s?null!=(y=y?y.__html:void 0)&&ze(m,y):"children"===s?"string"==typeof y?("textarea"!==u||""!==y)&&We(m,y):"number"==typeof y&&We(m,""+y):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(d.hasOwnProperty(s)?null!=y&&Wn(p,s):null!=y&&xe(m,s,y,h))}switch(f){case"input":Te(c),Oe(c,n,!1);break;case"textarea":Te(c),De(c);break;case"option":null!=n.value&&c.setAttribute("value",""+we(n.value));break;case"select":(r=c).multiple=!!n.multiple,null!=(c=n.value)?Ne(r,!!n.multiple,c,!1):null!=n.defaultValue&&Ne(r,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(c.onclick=Hn)}(a=nr(l,a))&&fl(t)}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw Error(i(166));break;case 6:if(n&&null!=t.stateNode)ol(n,t,n.memoizedProps,a);else{if("string"!=typeof a&&null===t.stateNode)throw Error(i(166));r=Wa(za.current),Wa(Ba.current),zi(t)?(l=(a=t).stateNode,r=a.memoizedProps,l[sr]=a,(a=l.nodeValue!==r)&&fl(t)):(l=t,(a=(9===r.nodeType?r:r.ownerDocument).createTextNode(a))[sr]=l,t.stateNode=a)}break;case 11:break;case 13:if(ho(Ga),a=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}a=null!==a,l=!1,null===n?void 0!==t.memoizedProps.fallback&&zi(t):(l=null!==(r=n.memoizedState),a||null===r||null!==(r=n.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=r,r.nextEffect=c):(t.firstEffect=t.lastEffect=r,r.nextEffect=null),r.effectTag=8)),a&&!l&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ga.current)?Gl===Ul&&(Gl=Vl):(Gl!==Ul&&Gl!==Vl||(Gl=zl),0!==Jl&&null!==Yl&&(ts(Yl,Xl),ns(Yl,Jl)))),(a||l)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Ya(),nl(t);break;case 10:sa(t);break;case 9:case 14:break;case 17:wo(t.type)&&xo();break;case 19:if(ho(Ga),null===(a=t.memoizedState))break;if(l=0!=(64&t.effectTag),null===(c=a.rendering)){if(l)pl(a,!1);else if(Gl!==Ul||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(c=Za(n))){for(t.effectTag|=64,pl(a,!1),null!==(l=c.updateQueue)&&(t.updateQueue=l,t.effectTag|=4),null===a.lastEffect&&(t.firstEffect=null),t.lastEffect=a.lastEffect,a=r,l=t.child;null!==l;)n=a,(r=l).effectTag&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(c=r.alternate)?(r.childExpirationTime=0,r.expirationTime=n,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null):(r.childExpirationTime=c.childExpirationTime,r.expirationTime=c.expirationTime,r.child=c.child,r.memoizedProps=c.memoizedProps,r.memoizedState=c.memoizedState,r.updateQueue=c.updateQueue,n=c.dependencies,r.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),l=l.sibling;mo(Ga,1&Ga.current|2),t=t.child;break e}n=n.sibling}}else{if(!l)if(null!==(n=Za(c))){if(t.effectTag|=64,l=!0,null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),pl(a,!0),null===a.tail&&"hidden"===a.tailMode&&!c.alternate){null!==(t=t.lastEffect=a.lastEffect)&&(t.nextEffect=null);break}}else Ko()>a.tailExpiration&&1<r&&(t.effectTag|=64,l=!0,pl(a,!1),t.expirationTime=t.childExpirationTime=r-1);a.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=a.last)?r.sibling=c:t.child=c,a.last=c)}if(null!==a.tail){0===a.tailExpiration&&(a.tailExpiration=Ko()+500),r=a.tail,a.rendering=r,a.tail=r.sibling,a.lastEffect=t.lastEffect,r.sibling=null,a=Ga.current,mo(Ga,a=l?1&a|2:1&a),t=r;break e}break;case 20:case 21:break;default:throw Error(i(156,t.tag))}t=null}if(a=Kl,1===Xl||1!==a.childExpirationTime){for(l=0,r=a.child;null!==r;)(n=r.expirationTime)>l&&(l=n),(c=r.childExpirationTime)>l&&(l=c),r=r.sibling;a.childExpirationTime=l}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Kl.firstEffect),null!==Kl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Kl.firstEffect),e.lastEffect=Kl.lastEffect),1<Kl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Kl:e.firstEffect=Kl,e.lastEffect=Kl))}else{if(null!==(t=dl(Kl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Kl.sibling))return t;Kl=e}while(null!==Kl);return Gl===Ul&&(Gl=Wl),null}function Nu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function Lu(e){var t=Xo();return Zo(99,Fu.bind(null,e,t)),null}function Fu(e,t){do{Du()}while(null!==uu);if((Hl&(jl|Dl))!==Ll)throw Error(i(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=Nu(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Yl&&(Kl=Yl=null,Xl=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var a=Hl;Hl|=Dl,Nl.current=null,er=Tn;var l=Gn();if(Zn(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var s=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(s&&0!==s.rangeCount){u=s.anchorNode;var c=s.anchorOffset,f=s.focusNode;s=s.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var p=0,d=-1,h=-1,m=0,v=0,y=l,b=null;t:for(;;){for(var g;y!==u||0!==c&&3!==y.nodeType||(d=p+c),y!==f||0!==s&&3!==y.nodeType||(h=p+s),3===y.nodeType&&(p+=y.nodeValue.length),null!==(g=y.firstChild);)b=y,y=g;for(;;){if(y===l)break t;if(b===u&&++m===c&&(d=p),b===f&&++v===s&&(h=p),null!==(g=y.nextSibling))break;b=(y=b).parentNode}y=g}u=-1===d||-1===h?null:{start:d,end:h}}else u=null}u=u||{start:0,end:0}}else u=null;tr={focusedElem:l,selectionRange:u},Tn=!1,ru=o;do{try{ju()}catch(e){if(null===ru)throw Error(i(330));Bu(ru,e),ru=ru.nextEffect}}while(null!==ru);ru=o;do{try{for(l=e,u=t;null!==ru;){var E=ru.effectTag;if(16&E&&We(ru.stateNode,""),128&E){var w=ru.alternate;if(null!==w){var x=w.ref;null!==x&&("function"==typeof x?x(null):x.current=null)}}switch(1038&E){case 2:Sl(ru),ru.effectTag&=-3;break;case 6:Sl(ru),ru.effectTag&=-3,kl(ru.alternate,ru);break;case 1024:ru.effectTag&=-1025;break;case 1028:ru.effectTag&=-1025,kl(ru.alternate,ru);break;case 4:kl(ru.alternate,ru);break;case 8:Tl(l,c=ru,u),wl(c)}ru=ru.nextEffect}}catch(e){if(null===ru)throw Error(i(330));Bu(ru,e),ru=ru.nextEffect}}while(null!==ru);if(x=tr,w=Gn(),E=x.focusedElem,u=x.selectionRange,w!==E&&E&&E.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(E.ownerDocument.documentElement,E)){null!==u&&Zn(E)&&(w=u.start,void 0===(x=u.end)&&(x=w),"selectionStart"in E?(E.selectionStart=w,E.selectionEnd=Math.min(x,E.value.length)):(x=(w=E.ownerDocument||document)&&w.defaultView||window).getSelection&&(x=x.getSelection(),c=E.textContent.length,l=Math.min(u.start,c),u=void 0===u.end?l:Math.min(u.end,c),!x.extend&&l>u&&(c=u,u=l,l=c),c=Xn(E,l),f=Xn(E,u),c&&f&&(1!==x.rangeCount||x.anchorNode!==c.node||x.anchorOffset!==c.offset||x.focusNode!==f.node||x.focusOffset!==f.offset)&&((w=w.createRange()).setStart(c.node,c.offset),x.removeAllRanges(),l>u?(x.addRange(w),x.extend(f.node,f.offset)):(w.setEnd(f.node,f.offset),x.addRange(w))))),w=[];for(x=E;x=x.parentNode;)1===x.nodeType&&w.push({element:x,left:x.scrollLeft,top:x.scrollTop});for("function"==typeof E.focus&&E.focus(),E=0;E<w.length;E++)(x=w[E]).element.scrollLeft=x.left,x.element.scrollTop=x.top}tr=null,Tn=!!er,er=null,e.current=n,ru=o;do{try{for(E=r;null!==ru;){var S=ru.effectTag;if(36&S){var T=ru.alternate;switch(x=E,(w=ru).tag){case 0:case 11:case 15:gl(16,32,w);break;case 1:var k=w.stateNode;if(4&w.effectTag)if(null===T)k.componentDidMount();else{var C=w.elementType===w.type?T.memoizedProps:na(w.type,T.memoizedProps);k.componentDidUpdate(C,T.memoizedState,k.__reactInternalSnapshotBeforeUpdate)}var M=w.updateQueue;null!==M&&Sa(0,M,k);break;case 3:var _=w.updateQueue;if(null!==_){if(l=null,null!==w.child)switch(w.child.tag){case 5:l=w.child.stateNode;break;case 1:l=w.child.stateNode}Sa(0,_,l)}break;case 5:var P=w.stateNode;null===T&&4&w.effectTag&&nr(w.type,w.memoizedProps)&&P.focus();break;case 6:case 4:case 12:break;case 13:if(null===w.memoizedState){var O=w.alternate;if(null!==O){var A=O.memoizedState;if(null!==A){var R=A.dehydrated;null!==R&&kt(R)}}}break;case 19:case 17:case 20:case 21:break;default:throw Error(i(163))}}if(128&S){w=void 0;var N=ru.ref;if(null!==N){var L=ru.stateNode;switch(ru.tag){case 5:w=L;break;default:w=L}"function"==typeof N?N(w):N.current=w}}ru=ru.nextEffect}}catch(e){if(null===ru)throw Error(i(330));Bu(ru,e),ru=ru.nextEffect}}while(null!==ru);ru=null,Vo(),Hl=a}else e.current=n;if(lu)lu=!1,uu=e,su=t;else for(ru=o;null!==ru;)t=ru.nextEffect,ru.nextEffect=null,ru=t;if(0===(t=e.firstPendingTime)&&(iu=null),1073741823===t?e===pu?fu++:(fu=0,pu=e):fu=0,"function"==typeof Wu&&Wu(n.stateNode,r),gu(e),ou)throw ou=!1,e=au,au=null,e;return(Hl&Fl)!==Ll?null:(Qo(),null)}function ju(){for(;null!==ru;){var e=ru.effectTag;0!=(256&e)&&bl(ru.alternate,ru),0==(512&e)||lu||(lu=!0,$o(97,(function(){return Du(),null}))),ru=ru.nextEffect}}function Du(){if(90!==su){var e=97<su?97:su;return su=90,Zo(e,Uu)}}function Uu(){if(null===uu)return!1;var e=uu;if(uu=null,(Hl&(jl|Dl))!==Ll)throw Error(i(331));var t=Hl;for(Hl|=Dl,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:gl(128,0,n),gl(0,64,n)}}catch(t){if(null===e)throw Error(i(330));Bu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Hl=t,Qo(),!0}function Iu(e,t,n){ba(e,t=_l(e,t=hl(n,t),1073741823)),null!==(e=yu(e,1073741823))&&gu(e)}function Bu(e,t){if(3===e.tag)Iu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Iu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===iu||!iu.has(r))){ba(n,e=Pl(n,e=hl(t,e),1073741823)),null!==(n=yu(n,1073741823))&&gu(n);break}}n=n.return}}function Vu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Yl===e&&Xl===n?Gl===zl||Gl===Vl&&1073741823===$l&&Ko()-tu<nu?Tu(e,Xl):eu=!0:es(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),gu(e)))}function zu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=mu(t=hu(),e,null)),null!==(e=yu(e,t))&&gu(e)}Ol=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||bo.current)Yi=!0;else{if(r<n){switch(Yi=!1,t.tag){case 3:el(t),Wi();break;case 5:if(Ka(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:wo(t.type)&&Co(t);break;case 4:Ha(t,t.stateNode.containerInfo);break;case 10:ua(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?il(e,t,n):(mo(Ga,1&Ga.current),null!==(t=cl(e,t,n))?t.sibling:null);mo(Ga,1&Ga.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return sl(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),mo(Ga,Ga.current),!r)return null}return cl(e,t,n)}Yi=!1}}else Yi=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=Eo(t,yo.current),fa(t,n),o=hi(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,mi(),wo(r)){var a=!0;Co(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&Ma(t,r,l,e),o.updater=_a,t.stateNode=o,o._reactInternalFiber=t,Ra(t,r,e,n),t=Ji(null,t,r,!0,a,n)}else t.tag=0,Ki(null,t,o,n),t=t.child;return t;case 16:if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,a=t.tag=function(e){if("function"==typeof e)return Xu(e)?1:0;if(null!=e){if((e=e.$$typeof)===H)return 11;if(e===X)return 14}return 2}(o),e=na(o,e),a){case 0:t=qi(null,t,o,e,n);break;case 1:t=Qi(null,t,o,e,n);break;case 11:t=Xi(null,t,o,e,n);break;case 14:t=Gi(null,t,o,na(o.type,e),r,n);break;default:throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,qi(e,t,r,o=t.elementType===r?o:na(r,o),n);case 1:return r=t.type,o=t.pendingProps,Qi(e,t,r,o=t.elementType===r?o:na(r,o),n);case 3:if(el(t),null===(r=t.updateQueue))throw Error(i(282));if(o=null!==(o=t.memoizedState)?o.element:null,xa(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o)Wi(),t=cl(e,t,n);else{if((o=t.stateNode.hydrate)&&(ji=ir(t.stateNode.containerInfo.firstChild),Fi=t,o=Di=!0),o)for(n=Ua(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Ki(e,t,r,n),Wi();t=t.child}return t;case 5:return Ka(t),null===e&&Bi(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,rr(r,o)?l=null:null!==a&&rr(r,a)&&(t.effectTag|=16),$i(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ki(e,t,l,n),t=t.child),t;case 6:return null===e&&Bi(t),null;case 13:return il(e,t,n);case 4:return Ha(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Da(t,null,r,n):Ki(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Xi(e,t,r,o=t.elementType===r?o:na(r,o),n);case 7:return Ki(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ki(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,l=t.memoizedProps,ua(t,a=o.value),null!==l){var u=l.value;if(0===(a=eo(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!bo.current){t=cl(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===u.tag&&((c=va(n,null)).tag=2,ba(u,c)),u.expirationTime<n&&(u.expirationTime=n),null!==(c=u.alternate)&&c.expirationTime<n&&(c.expirationTime=n),ca(u.return,n),s.expirationTime<n&&(s.expirationTime=n);break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}}Ki(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,fa(t,n),r=r(o=pa(o,a.unstable_observedBits)),t.effectTag|=1,Ki(e,t,r,n),t.child;case 14:return a=na(o=t.type,t.pendingProps),Gi(e,t,o,a=na(o.type,a),r,n);case 15:return Zi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:na(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,wo(r)?(e=!0,Co(t)):e=!1,fa(t,n),Oa(t,r,o),Ra(t,r,o,n),Ji(null,t,r,!0,e,n);case 19:return sl(e,t,n)}throw Error(i(156,t.tag))};var Wu=null,Hu=null;function Yu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Ku(e,t,n,r){return new Yu(e,t,n,r)}function Xu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Gu(e,t){var n=e.alternate;return null===n?((n=Ku(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Zu(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Xu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case U:return $u(n.children,o,a,t);case W:l=8,o|=7;break;case I:l=8,o|=1;break;case B:return(e=Ku(12,n,t,8|o)).elementType=B,e.type=B,e.expirationTime=a,e;case Y:return(e=Ku(13,n,t,o)).type=Y,e.elementType=Y,e.expirationTime=a,e;case K:return(e=Ku(19,n,t,o)).elementType=K,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case V:l=10;break e;case z:l=9;break e;case H:l=11;break e;case X:l=14;break e;case G:l=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ku(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=a,t}function $u(e,t,n,r){return(e=Ku(7,e,r,t)).expirationTime=n,e}function qu(e,t,n){return(e=Ku(6,e,null,t)).expirationTime=n,e}function Qu(e,t,n){return(t=Ku(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ju(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function es(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function ts(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function ns(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function rs(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function os(e,t,n,r){var o=t.current,a=hu(),l=ka.suspense;a=mu(a,o,l);e:if(n){t:{if(et(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(wo(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var s=n.type;if(wo(s)){n=ko(n,s,u);break e}}n=u}else n=vo;return null===t.context?t.context=n:t.pendingContext=n,(t=va(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ba(o,t),vu(o,a),a}function as(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function is(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function ls(e,t){is(e,t),(e=e.alternate)&&is(e,t)}function us(e,t,n){var r=new Ju(e,t,n=null!=n&&!0===n.hydrate),o=Ku(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,e[fr]=r.current,n&&0!==t&&function(e){var t=Ln(e);mt.forEach((function(n){Fn(n,e,t)})),vt.forEach((function(n){Fn(n,e,t)}))}(9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function ss(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function cs(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=as(i);l.call(e)}}os(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new us(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=as(i);u.call(e)}}Su((function(){os(t,i,e,o)}))}return as(i)}function fs(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ss(t))throw Error(i(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:D,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}us.prototype.render=function(e,t){os(e,this._internalRoot,null,void 0===t?null:t)},us.prototype.unmount=function(e){var t=this._internalRoot,n=void 0===e?null:e,r=t.containerInfo;os(null,t,null,(function(){r[fr]=null,null!==n&&n()}))},ot=function(e){if(13===e.tag){var t=ta(hu(),150,100);vu(e,t),ls(e,t)}},at=function(e){if(13===e.tag){hu();var t=ea++;vu(e,t),ls(e,t)}},it=function(e){if(13===e.tag){var t=hu();vu(e,t=mu(t,e,null)),ls(e,t)}},ee=function(e,t,n){switch(t){case"input":if(Pe(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=mr(r);if(!o)throw Error(i(90));ke(r),Pe(r,o)}}}break;case"textarea":je(e,n);break;case"select":null!=(t=n.value)&&Ne(e,!!n.multiple,t,!1)}},ie=xu,le=function(e,t,n,r){var o=Hl;Hl|=4;try{return Zo(98,e.bind(null,t,n,r))}finally{(Hl=o)===Ll&&Qo()}},ue=function(){(Hl&(1|jl|Dl))===Ll&&(function(){if(null!==cu){var e=cu;cu=null,e.forEach((function(e,t){rs(t,e),gu(t)})),Qo()}}(),Du())},se=function(e,t){var n=Hl;Hl|=2;try{return e(t)}finally{(Hl=n)===Ll&&Qo()}};var ps,ds,hs={createPortal:fs,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=rt(t))?null:e.stateNode},hydrate:function(e,t,n){if(!ss(t))throw Error(i(200));return cs(null,e,t,!0,n)},render:function(e,t,n){if(!ss(t))throw Error(i(200));return cs(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!ss(n))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return cs(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!ss(e))throw Error(i(40));return!!e._reactRootContainer&&(Su((function(){cs(null,null,e,!1,(function(){e._reactRootContainer=null,e[fr]=null}))})),!0)},unstable_createPortal:function(){return fs.apply(void 0,arguments)},unstable_batchedUpdates:xu,flushSync:function(e,t){if((Hl&(jl|Dl))!==Ll)throw Error(i(187));var n=Hl;Hl|=1;try{return Zo(99,e.bind(null,t))}finally{Hl=n,Qo()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[dr,hr,mr,A.injectEventPluginsByName,p,Rt,function(e){M(e,At)},oe,ae,On,O,Du,{current:!1}]}};ds=(ps={findFiberByHostInstance:pr,bundleType:0,version:"16.12.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Wu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Hu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},ps,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:N.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return ds?ds(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var ms={default:hs},vs=ms&&hs||ms;e.exports=vs.default||vs},function(e,t,n){"use strict";e.exports=n(85)},function(e,t,n){"use strict";
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,a,i,l;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,s=null,c=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(c,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(c,0))},o=function(e,t){s=setTimeout(e,t)},a=function(){clearTimeout(s)},i=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var p=window.performance,d=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof p&&"function"==typeof p.now)t.unstable_now=function(){return p.now()};else{var y=d.now();t.unstable_now=function(){return d.now()-y}}var b=!1,g=null,E=-1,w=5,x=0;i=function(){return t.unstable_now()>=x},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):w=0<e?Math.floor(1e3/e):5};var S=new MessageChannel,T=S.port2;S.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();x=e+w;try{g(!0,e)?T.postMessage(null):(b=!1,g=null)}catch(e){throw T.postMessage(null),e}}else b=!1},r=function(e){g=e,b||(b=!0,T.postMessage(null))},o=function(e,n){E=h((function(){e(t.unstable_now())}),n)},a=function(){m(E),E=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),o=e[r];if(!(void 0!==o&&0<_(o,t)))break e;e[r]=t,e[n]=o,n=r}}function C(e){return void 0===(e=e[0])?null:e}function M(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>_(i,n))void 0!==u&&0>_(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==u&&0>_(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function _(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],O=[],A=1,R=null,N=3,L=!1,F=!1,j=!1;function D(e){for(var t=C(O);null!==t;){if(null===t.callback)M(O);else{if(!(t.startTime<=e))break;M(O),t.sortIndex=t.expirationTime,k(P,t)}t=C(O)}}function U(e){if(j=!1,D(e),!F)if(null!==C(P))F=!0,r(I);else{var t=C(O);null!==t&&o(U,t.startTime-e)}}function I(e,n){F=!1,j&&(j=!1,a()),L=!0;var r=N;try{for(D(n),R=C(P);null!==R&&(!(R.expirationTime>n)||e&&!i());){var l=R.callback;if(null!==l){R.callback=null,N=R.priorityLevel;var u=l(R.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?R.callback=u:R===C(P)&&M(P),D(n)}else M(P);R=C(P)}if(null!==R)var s=!0;else{var c=C(O);null!==c&&o(U,c.startTime-n),s=!1}return s}finally{R=null,N=r,L=!1}}function B(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var V=l;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_scheduleCallback=function(e,n,i){var l=t.unstable_now();if("object"==typeof i&&null!==i){var u=i.delay;u="number"==typeof u&&0<u?l+u:l,i="number"==typeof i.timeout?i.timeout:B(e)}else i=B(e),u=l;return e={id:A++,callback:n,priorityLevel:e,startTime:u,expirationTime:i=u+i,sortIndex:-1},u>l?(e.sortIndex=u,k(O,e),null===C(P)&&e===C(O)&&(j?a():j=!0,o(U,u-l))):(e.sortIndex=i,k(P,e),F||L||(F=!0,r(I))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_shouldYield=function(){var e=t.unstable_now();D(e);var n=C(P);return n!==R&&null!==R&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<R.expirationTime||i()},t.unstable_requestPaint=V,t.unstable_continueExecution=function(){F||L||(F=!0,r(I))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return C(P)},t.unstable_Profiling=null},function(e,t,n){var r=n(87);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(14)(!1)).push([e.i,'body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",\n    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n    monospace;\n}\n',""])},function(e,t,n){var r=n(89);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(14)(!1)).push([e.i,".App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #09d3ac;\n}\n\n\n.ea4_1_box {\n  width: 50%;\n  background-color: lightgrey;\n  font-family: arial;\n  margin-left: 30px;\n  height: 80%;\n  padding: 10px 10px 10px 10px;\n  border-radius: 10px;\n  display: inline-block;\n}\n.ea4_2_box {\nwidth: 50%;\nbackground-color: lightgrey;\nfont-family: arial;\nmargin-left: 30px;\nheight: 80%;\npadding: 10px 10px 10px 10px;\nborder-radius: 10px;\ndisplay: inline-block;\n}\n\n.ea4_row{display:flex; flex-direction:row;}\n",""])},function(e,t,n){"use strict";var r=n(91);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r=n(93);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(14)(!1)).push([e.i,'.clippingrect {\n    width: 512px;\n    height: 512px;\n    background: url("https://i.ibb.co/b7HgSFy/Graph-Viz-Tech-EA1.png") 0 0;\n  }',""])},function(e,t,n){var r=n(95);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(14)(!1)).push([e.i,"",""])},function(e,t,n){e.exports={default:n(97),__esModule:!0}},function(e,t,n){n(98),e.exports=n(9).Object.assign},function(e,t,n){var r=n(16);r(r.S+r.F,"Object",{assign:n(100)})},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){"use strict";var r=n(19),o=n(31),a=n(48),i=n(34),l=n(29),u=n(57),s=Object.assign;e.exports=!s||n(26)((function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=s({},e)[n]||Object.keys(s({},t)).join("")!=r}))?function(e,t){for(var n=l(e),s=arguments.length,c=1,f=a.f,p=i.f;s>c;)for(var d,h=u(arguments[c++]),m=f?o(h).concat(f(h)):o(h),v=m.length,y=0;v>y;)d=m[y++],r&&!p.call(h,d)||(n[d]=h[d]);return n}:s},function(e,t,n){var r=n(21),o=n(58),a=n(102);e.exports=function(e){return function(t,n,i){var l,u=r(t),s=o(u.length),c=a(i,s);if(e&&n!=n){for(;s>c;)if((l=u[c++])!=l)return!0}else for(;s>c;c++)if((e||c in u)&&u[c]===n)return e||c||0;return!e&&-1}}},function(e,t,n){var r=n(44),o=Math.max,a=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):a(e,t)}},function(e,t,n){n(104);var r=n(9).Object;e.exports=function(e,t,n){return r.defineProperty(e,t,n)}},function(e,t,n){var r=n(16);r(r.S+r.F*!n(19),"Object",{defineProperty:n(18).f})},function(e,t,n){e.exports={default:n(106),__esModule:!0}},function(e,t,n){n(60),n(111),e.exports=n(51).f("iterator")},function(e,t,n){var r=n(44),o=n(43);e.exports=function(e){return function(t,n){var a,i,l=String(o(t)),u=r(n),s=l.length;return u<0||u>=s?e?"":void 0:(a=l.charCodeAt(u))<55296||a>56319||u+1===s||(i=l.charCodeAt(u+1))<56320||i>57343?e?l.charAt(u):a:e?l.slice(u,u+2):i-56320+(a-55296<<10)+65536}}},function(e,t,n){"use strict";var r=n(49),o=n(28),a=n(50),i={};n(23)(i,n(13)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=r(i,{next:o(1,n)}),a(e,t+" Iterator")}},function(e,t,n){var r=n(18),o=n(24),a=n(31);e.exports=n(19)?Object.defineProperties:function(e,t){o(e);for(var n,i=a(t),l=i.length,u=0;l>u;)r.f(e,n=i[u++],t[n]);return e}},function(e,t,n){var r=n(17).document;e.exports=r&&r.documentElement},function(e,t,n){n(112);for(var r=n(17),o=n(23),a=n(30),i=n(13)("toStringTag"),l="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),u=0;u<l.length;u++){var s=l[u],c=r[s],f=c&&c.prototype;f&&!f[i]&&o(f,i,s),a[s]=a.Array}},function(e,t,n){"use strict";var r=n(113),o=n(114),a=n(30),i=n(21);e.exports=n(61)(Array,"Array",(function(e,t){this._t=i(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),a.Arguments=a.Array,r("keys"),r("values"),r("entries")},function(e,t){e.exports=function(){}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){e.exports={default:n(116),__esModule:!0}},function(e,t,n){n(117),n(122),n(123),n(124),e.exports=n(9).Symbol},function(e,t,n){"use strict";var r=n(17),o=n(20),a=n(19),i=n(16),l=n(62),u=n(118).KEY,s=n(26),c=n(46),f=n(50),p=n(33),d=n(13),h=n(51),m=n(52),v=n(119),y=n(120),b=n(24),g=n(25),E=n(29),w=n(21),x=n(41),S=n(28),T=n(49),k=n(121),C=n(53),M=n(48),_=n(18),P=n(31),O=C.f,A=_.f,R=k.f,N=r.Symbol,L=r.JSON,F=L&&L.stringify,j=d("_hidden"),D=d("toPrimitive"),U={}.propertyIsEnumerable,I=c("symbol-registry"),B=c("symbols"),V=c("op-symbols"),z=Object.prototype,W="function"==typeof N&&!!M.f,H=r.QObject,Y=!H||!H.prototype||!H.prototype.findChild,K=a&&s((function(){return 7!=T(A({},"a",{get:function(){return A(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=O(z,t);r&&delete z[t],A(e,t,n),r&&e!==z&&A(z,t,r)}:A,X=function(e){var t=B[e]=T(N.prototype);return t._k=e,t},G=W&&"symbol"==typeof N.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof N},Z=function(e,t,n){return e===z&&Z(V,t,n),b(e),t=x(t,!0),b(n),o(B,t)?(n.enumerable?(o(e,j)&&e[j][t]&&(e[j][t]=!1),n=T(n,{enumerable:S(0,!1)})):(o(e,j)||A(e,j,S(1,{})),e[j][t]=!0),K(e,t,n)):A(e,t,n)},$=function(e,t){b(e);for(var n,r=v(t=w(t)),o=0,a=r.length;a>o;)Z(e,n=r[o++],t[n]);return e},q=function(e){var t=U.call(this,e=x(e,!0));return!(this===z&&o(B,e)&&!o(V,e))&&(!(t||!o(this,e)||!o(B,e)||o(this,j)&&this[j][e])||t)},Q=function(e,t){if(e=w(e),t=x(t,!0),e!==z||!o(B,t)||o(V,t)){var n=O(e,t);return!n||!o(B,t)||o(e,j)&&e[j][t]||(n.enumerable=!0),n}},J=function(e){for(var t,n=R(w(e)),r=[],a=0;n.length>a;)o(B,t=n[a++])||t==j||t==u||r.push(t);return r},ee=function(e){for(var t,n=e===z,r=R(n?V:w(e)),a=[],i=0;r.length>i;)!o(B,t=r[i++])||n&&!o(z,t)||a.push(B[t]);return a};W||(l((N=function(){if(this instanceof N)throw TypeError("Symbol is not a constructor!");var e=p(arguments.length>0?arguments[0]:void 0),t=function(n){this===z&&t.call(V,n),o(this,j)&&o(this[j],e)&&(this[j][e]=!1),K(this,e,S(1,n))};return a&&Y&&K(z,e,{configurable:!0,set:t}),X(e)}).prototype,"toString",(function(){return this._k})),C.f=Q,_.f=Z,n(64).f=k.f=J,n(34).f=q,M.f=ee,a&&!n(32)&&l(z,"propertyIsEnumerable",q,!0),h.f=function(e){return X(d(e))}),i(i.G+i.W+i.F*!W,{Symbol:N});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;te.length>ne;)d(te[ne++]);for(var re=P(d.store),oe=0;re.length>oe;)m(re[oe++]);i(i.S+i.F*!W,"Symbol",{for:function(e){return o(I,e+="")?I[e]:I[e]=N(e)},keyFor:function(e){if(!G(e))throw TypeError(e+" is not a symbol!");for(var t in I)if(I[t]===e)return t},useSetter:function(){Y=!0},useSimple:function(){Y=!1}}),i(i.S+i.F*!W,"Object",{create:function(e,t){return void 0===t?T(e):$(T(e),t)},defineProperty:Z,defineProperties:$,getOwnPropertyDescriptor:Q,getOwnPropertyNames:J,getOwnPropertySymbols:ee});var ae=s((function(){M.f(1)}));i(i.S+i.F*ae,"Object",{getOwnPropertySymbols:function(e){return M.f(E(e))}}),L&&i(i.S+i.F*(!W||s((function(){var e=N();return"[null]"!=F([e])||"{}"!=F({a:e})||"{}"!=F(Object(e))}))),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(g(t)||void 0!==e)&&!G(e))return y(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!G(t))return t}),r[1]=t,F.apply(L,r)}}),N.prototype[D]||n(23)(N.prototype,D,N.prototype.valueOf),f(N,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){var r=n(33)("meta"),o=n(25),a=n(20),i=n(18).f,l=0,u=Object.isExtensible||function(){return!0},s=!n(26)((function(){return u(Object.preventExtensions({}))})),c=function(e){i(e,r,{value:{i:"O"+ ++l,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!a(e,r)){if(!u(e))return"F";if(!t)return"E";c(e)}return e[r].i},getWeak:function(e,t){if(!a(e,r)){if(!u(e))return!0;if(!t)return!1;c(e)}return e[r].w},onFreeze:function(e){return s&&f.NEED&&u(e)&&!a(e,r)&&c(e),e}}},function(e,t,n){var r=n(31),o=n(48),a=n(34);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var i,l=n(e),u=a.f,s=0;l.length>s;)u.call(e,i=l[s++])&&t.push(i);return t}},function(e,t,n){var r=n(42);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(21),o=n(64).f,a={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==a.call(e)?function(e){try{return o(e)}catch(e){return i.slice()}}(e):o(r(e))}},function(e,t){},function(e,t,n){n(52)("asyncIterator")},function(e,t,n){n(52)("observable")},function(e,t,n){e.exports={default:n(126),__esModule:!0}},function(e,t,n){n(127),e.exports=n(9).Object.setPrototypeOf},function(e,t,n){var r=n(16);r(r.S,"Object",{setPrototypeOf:n(128).set})},function(e,t,n){var r=n(25),o=n(24),a=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(40)(Function.call,n(53).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return a(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:a}},function(e,t,n){e.exports={default:n(130),__esModule:!0}},function(e,t,n){n(131);var r=n(9).Object;e.exports=function(e,t){return r.create(e,t)}},function(e,t,n){var r=n(16);r(r.S,"Object",{create:n(49)})},function(e,t,n){e.exports={default:n(133),__esModule:!0}},function(e,t,n){n(134),e.exports=n(9).Object.getPrototypeOf},function(e,t,n){var r=n(29),o=n(63);n(65)("getPrototypeOf",(function(){return function(e){return o(r(e))}}))},function(e,t,n){e.exports={default:n(136),__esModule:!0}},function(e,t,n){n(137);var r=n(9).Object;e.exports=function(e,t){return r.getOwnPropertyDescriptor(e,t)}},function(e,t,n){var r=n(21),o=n(53).f;n(65)("getOwnPropertyDescriptor",(function(){return function(e,t){return o(r(e),t)}}))},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(139)),a=r(n(39)),i=!0,l=!1,u=["altKey","bubbles","cancelable","ctrlKey","currentTarget","eventPhase","metaKey","shiftKey","target","timeStamp","view","type"];function s(e){return null==e}var c=[{reg:/^key/,props:["char","charCode","key","keyCode","which"],fix:function(e,t){s(e.which)&&(e.which=s(t.charCode)?t.keyCode:t.charCode),void 0===e.metaKey&&(e.metaKey=e.ctrlKey)}},{reg:/^touch/,props:["touches","changedTouches","targetTouches"]},{reg:/^hashchange$/,props:["newURL","oldURL"]},{reg:/^gesturechange$/i,props:["rotation","scale"]},{reg:/^(mousewheel|DOMMouseScroll)$/,props:[],fix:function(e,t){var n=void 0,r=void 0,o=void 0,a=t.wheelDelta,i=t.axis,l=t.wheelDeltaY,u=t.wheelDeltaX,s=t.detail;a&&(o=a/120),s&&(o=0-(s%3==0?s/3:s)),void 0!==i&&(i===e.HORIZONTAL_AXIS?(r=0,n=0-o):i===e.VERTICAL_AXIS&&(n=0,r=o)),void 0!==l&&(r=l/120),void 0!==u&&(n=-1*u/120),n||r||(r=o),void 0!==n&&(e.deltaX=n),void 0!==r&&(e.deltaY=r),void 0!==o&&(e.delta=o)}},{reg:/^mouse|contextmenu|click|mspointer|(^DOMMouseScroll$)/i,props:["buttons","clientX","clientY","button","offsetX","relatedTarget","which","fromElement","toElement","offsetY","pageX","pageY","screenX","screenY"],fix:function(e,t){var n=void 0,r=void 0,o=void 0,a=e.target,i=t.button;return a&&s(e.pageX)&&!s(t.clientX)&&(r=(n=a.ownerDocument||document).documentElement,o=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||o&&o.scrollLeft||0)-(r&&r.clientLeft||o&&o.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||o&&o.scrollTop||0)-(r&&r.clientTop||o&&o.clientTop||0)),e.which||void 0===i||(e.which=1&i?1:2&i?3:4&i?2:0),!e.relatedTarget&&e.fromElement&&(e.relatedTarget=e.fromElement===a?e.toElement:e.fromElement),e}}];function f(){return i}function p(){return l}function d(e){var t=e.type,n="function"==typeof e.stopPropagation||"boolean"==typeof e.cancelBubble;o.default.call(this),this.nativeEvent=e;var r=p;"defaultPrevented"in e?r=e.defaultPrevented?f:p:"getPreventDefault"in e?r=e.getPreventDefault()?f:p:"returnValue"in e&&(r=e.returnValue===l?f:p),this.isDefaultPrevented=r;var a=[],i=void 0,s=void 0,d=u.concat();for(c.forEach((function(e){t.match(e.reg)&&(d=d.concat(e.props),e.fix&&a.push(e.fix))})),i=d.length;i;)this[s=d[--i]]=e[s];for(!this.target&&n&&(this.target=e.srcElement||document),this.target&&3===this.target.nodeType&&(this.target=this.target.parentNode),i=a.length;i;)(0,a[--i])(this,e);this.timeStamp=e.timeStamp||Date.now()}var h=o.default.prototype;(0,a.default)(d.prototype,h,{constructor:d,preventDefault:function(){var e=this.nativeEvent;e.preventDefault?e.preventDefault():e.returnValue=l,h.preventDefault.call(this)},stopPropagation:function(){var e=this.nativeEvent;e.stopPropagation?e.stopPropagation():e.cancelBubble=i,h.stopPropagation.call(this)}}),t.default=d,e.exports=t.default},function(e,t,n){"use strict";function r(){return!1}function o(){return!0}function a(){this.timeStamp=Date.now(),this.target=void 0,this.currentTarget=void 0}Object.defineProperty(t,"__esModule",{value:!0}),a.prototype={isEventObject:1,constructor:a,isDefaultPrevented:r,isPropagationStopped:r,isImmediatePropagationStopped:r,preventDefault:function(){this.isDefaultPrevented=o},stopPropagation:function(){this.isPropagationStopped=o},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=o,this.stopPropagation()},halt:function(e){e?this.stopImmediatePropagation():this.stopPropagation(),this.preventDefault()}},t.default=a,e.exports=t.default},function(e,t,n){e.exports={default:n(141),__esModule:!0}},function(e,t,n){n(60),n(142),e.exports=n(9).Array.from},function(e,t,n){"use strict";var r=n(40),o=n(16),a=n(29),i=n(143),l=n(144),u=n(58),s=n(145),c=n(146);o(o.S+o.F*!n(148)((function(e){Array.from(e)})),"Array",{from:function(e){var t,n,o,f,p=a(e),d="function"==typeof this?this:Array,h=arguments.length,m=h>1?arguments[1]:void 0,v=void 0!==m,y=0,b=c(p);if(v&&(m=r(m,h>2?arguments[2]:void 0,2)),null==b||d==Array&&l(b))for(n=new d(t=u(p.length));t>y;y++)s(n,y,v?m(p[y],y):p[y]);else for(f=b.call(p),n=new d;!(o=f.next()).done;y++)s(n,y,v?i(f,m,[o.value,y],!0):o.value);return n.length=y,n}})},function(e,t,n){var r=n(24);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var a=e.return;throw void 0!==a&&r(a.call(e)),t}}},function(e,t,n){var r=n(30),o=n(13)("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||a[o]===e)}},function(e,t,n){"use strict";var r=n(18),o=n(28);e.exports=function(e,t,n){t in e?r.f(e,t,o(0,n)):e[t]=n}},function(e,t,n){var r=n(147),o=n(13)("iterator"),a=n(30);e.exports=n(9).getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||a[r(e)]}},function(e,t,n){var r=n(42),o=n(13)("toStringTag"),a="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,i;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:a?r(t):"Object"==(i=r(t))&&"function"==typeof t.callee?"Arguments":i}},function(e,t,n){var r=n(13)("iterator"),o=!1;try{var a=[7][r]();a.return=function(){o=!0},Array.from(a,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var a=[7],i=a[r]();i.next=function(){return{done:n=!0}},a[r]=function(){return i},e(a)}catch(e){}return n}},function(e,t,n){(e.exports=n(14)(!1)).push([e.i,".rc-slider {\n  position: relative;\n  height: 14px;\n  padding: 5px 0;\n  width: 100%;\n  border-radius: 6px;\n  -ms-touch-action: none;\n      touch-action: none;\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider * {\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider-rail {\n  position: absolute;\n  width: 100%;\n  background-color: #e9e9e9;\n  height: 4px;\n  border-radius: 6px;\n}\n.rc-slider-track {\n  position: absolute;\n  left: 0;\n  height: 4px;\n  border-radius: 6px;\n  background-color: #abe2fb;\n}\n.rc-slider-handle {\n  position: absolute;\n  width: 14px;\n  height: 14px;\n  cursor: pointer;\n  cursor: -webkit-grab;\n  margin-top: -5px;\n  cursor: grab;\n  border-radius: 50%;\n  border: solid 2px #96dbfa;\n  background-color: #fff;\n  -ms-touch-action: pan-x;\n      touch-action: pan-x;\n}\n.rc-slider-handle:focus {\n  border-color: #57c5f7;\n  box-shadow: 0 0 0 5px #96dbfa;\n  outline: none;\n}\n.rc-slider-handle-click-focused:focus {\n  border-color: #96dbfa;\n  box-shadow: unset;\n}\n.rc-slider-handle:hover {\n  border-color: #57c5f7;\n}\n.rc-slider-handle:active {\n  border-color: #57c5f7;\n  box-shadow: 0 0 5px #57c5f7;\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n.rc-slider-mark {\n  position: absolute;\n  top: 18px;\n  left: 0;\n  width: 100%;\n  font-size: 12px;\n}\n.rc-slider-mark-text {\n  position: absolute;\n  display: inline-block;\n  vertical-align: middle;\n  text-align: center;\n  cursor: pointer;\n  color: #999;\n}\n.rc-slider-mark-text-active {\n  color: #666;\n}\n.rc-slider-step {\n  position: absolute;\n  width: 100%;\n  height: 4px;\n  background: transparent;\n}\n.rc-slider-dot {\n  position: absolute;\n  bottom: -2px;\n  margin-left: -4px;\n  width: 8px;\n  height: 8px;\n  border: 2px solid #e9e9e9;\n  background-color: #fff;\n  cursor: pointer;\n  border-radius: 50%;\n  vertical-align: middle;\n}\n.rc-slider-dot-active {\n  border-color: #96dbfa;\n}\n.rc-slider-dot-reverse {\n  margin-left: 0;\n  margin-right: -4px;\n}\n.rc-slider-disabled {\n  background-color: #e9e9e9;\n}\n.rc-slider-disabled .rc-slider-track {\n  background-color: #ccc;\n}\n.rc-slider-disabled .rc-slider-handle,\n.rc-slider-disabled .rc-slider-dot {\n  border-color: #ccc;\n  box-shadow: none;\n  background-color: #fff;\n  cursor: not-allowed;\n}\n.rc-slider-disabled .rc-slider-mark-text,\n.rc-slider-disabled .rc-slider-dot {\n  cursor: not-allowed !important;\n}\n.rc-slider-vertical {\n  width: 14px;\n  height: 100%;\n  padding: 0 5px;\n}\n.rc-slider-vertical .rc-slider-rail {\n  height: 100%;\n  width: 4px;\n}\n.rc-slider-vertical .rc-slider-track {\n  left: 5px;\n  bottom: 0;\n  width: 4px;\n}\n.rc-slider-vertical .rc-slider-handle {\n  margin-left: -5px;\n  -ms-touch-action: pan-y;\n      touch-action: pan-y;\n}\n.rc-slider-vertical .rc-slider-mark {\n  top: 0;\n  left: 18px;\n  height: 100%;\n}\n.rc-slider-vertical .rc-slider-step {\n  height: 100%;\n  width: 4px;\n}\n.rc-slider-vertical .rc-slider-dot {\n  left: 2px;\n  margin-bottom: -4px;\n}\n.rc-slider-vertical .rc-slider-dot:first-child {\n  margin-bottom: -4px;\n}\n.rc-slider-vertical .rc-slider-dot:last-child {\n  margin-bottom: -4px;\n}\n.rc-slider-tooltip-zoom-down-enter,\n.rc-slider-tooltip-zoom-down-appear {\n  animation-duration: .3s;\n  animation-fill-mode: both;\n  display: block !important;\n  animation-play-state: paused;\n}\n.rc-slider-tooltip-zoom-down-leave {\n  animation-duration: .3s;\n  animation-fill-mode: both;\n  display: block !important;\n  animation-play-state: paused;\n}\n.rc-slider-tooltip-zoom-down-enter.rc-slider-tooltip-zoom-down-enter-active,\n.rc-slider-tooltip-zoom-down-appear.rc-slider-tooltip-zoom-down-appear-active {\n  animation-name: rcSliderTooltipZoomDownIn;\n  animation-play-state: running;\n}\n.rc-slider-tooltip-zoom-down-leave.rc-slider-tooltip-zoom-down-leave-active {\n  animation-name: rcSliderTooltipZoomDownOut;\n  animation-play-state: running;\n}\n.rc-slider-tooltip-zoom-down-enter,\n.rc-slider-tooltip-zoom-down-appear {\n  transform: scale(0, 0);\n  animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);\n}\n.rc-slider-tooltip-zoom-down-leave {\n  animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);\n}\n@keyframes rcSliderTooltipZoomDownIn {\n  0% {\n    opacity: 0;\n    transform-origin: 50% 100%;\n    transform: scale(0, 0);\n  }\n  100% {\n    transform-origin: 50% 100%;\n    transform: scale(1, 1);\n  }\n}\n@keyframes rcSliderTooltipZoomDownOut {\n  0% {\n    transform-origin: 50% 100%;\n    transform: scale(1, 1);\n  }\n  100% {\n    opacity: 0;\n    transform-origin: 50% 100%;\n    transform: scale(0, 0);\n  }\n}\n.rc-slider-tooltip {\n  position: absolute;\n  left: -9999px;\n  top: -9999px;\n  visibility: visible;\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider-tooltip * {\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider-tooltip-hidden {\n  display: none;\n}\n.rc-slider-tooltip-placement-top {\n  padding: 4px 0 8px 0;\n}\n.rc-slider-tooltip-inner {\n  padding: 6px 2px;\n  min-width: 24px;\n  height: 24px;\n  font-size: 12px;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  text-decoration: none;\n  background-color: #6c6c6c;\n  border-radius: 6px;\n  box-shadow: 0 0 4px #d9d9d9;\n}\n.rc-slider-tooltip-arrow {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.rc-slider-tooltip-placement-top .rc-slider-tooltip-arrow {\n  bottom: 4px;\n  left: 50%;\n  margin-left: -4px;\n  border-width: 4px 4px 0;\n  border-top-color: #6c6c6c;\n}\n",""])},function(e,t,n){var r=n(151);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(14)(!1)).push([e.i,".canvasBox {\n    width: 50%;\n    background-color: lightgrey;\n    font-family: arial;\n    margin-left: 30px;\n    height: 80%;\n    padding: 10px 10px 10px 10px;\n    border-radius: 10px;\n    display: inline-block;\n  }\n.sliderBox {\n  width: 50%;\n  background-color: lightgrey;\n  font-family: arial;\n  margin-left: 30px;\n  height: 80%;\n  padding: 10px 10px 10px 10px;\n  border-radius: 10px;\n  display: inline-block;\n}\n\n.rowC{display:flex; flex-direction:row;}",""])},function(e,t,n){var r=n(153);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(14)(!1)).push([e.i,".canvasBoxEA5 {\n    width: 50%;\n    background-color: lightgrey;\n    font-family: arial;\n    margin-left: 30px;\n    height: 80%;\n    padding: 10px 10px 10px 10px;\n    border-radius: 10px;\n    display: inline-block;\n  }\n.sliderBoxEA5 {\n  width: 50%;\n  background-color: lightgrey;\n  font-family: arial;\n  margin-left: 30px;\n  height: 80%;\n  padding: 10px 10px 10px 10px;\n  border-radius: 10px;\n  display: inline-block;\n}\n\n.rowCEA5{display:flex; flex-direction:row;}",""])},function(e,t,n){var r=n(155);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(14)(!1)).push([e.i,".canvasBoxEA5 {\n    width: 50%;\n    background-color: lightgrey;\n    font-family: arial;\n    margin-left: 30px;\n    height: 80%;\n    padding: 10px 10px 10px 10px;\n    border-radius: 10px;\n    display: inline-block;\n  }\n.sliderBoxEA5 {\n  width: 50%;\n  background-color: lightgrey;\n  font-family: arial;\n  margin-left: 30px;\n  height: 80%;\n  padding: 10px 10px 10px 10px;\n  border-radius: 10px;\n  display: inline-block;\n}\n\n.rowCEA5{display:flex; flex-direction:row;}",""])},function(e,t,n){var r=n(157);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};n(15)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(14)(!1)).push([e.i,".canvasBoxEA5 {\n    width: 50%;\n    background-color: lightgrey;\n    font-family: arial;\n    margin-left: 30px;\n    height: 80%;\n    padding: 10px 10px 10px 10px;\n    border-radius: 10px;\n    display: inline-block;\n  }\n.sliderBoxEA5 {\n  width: 50%;\n  background-color: lightgrey;\n  font-family: arial;\n  margin-left: 30px;\n  height: 80%;\n  padding: 10px 10px 10px 10px;\n  border-radius: 10px;\n  display: inline-block;\n}\n\n.rowCEA5{display:flex; flex-direction:row;}",""])},function(e,t){var n,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var u,s=[],c=!1,f=-1;function p(){c&&u&&(c=!1,u.length?s=u.concat(s):f=-1,s.length&&d())}function d(){if(!c){var e=l(p);c=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||c||l(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"create",(function(){return uo})),n.d(r,"clone",(function(){return so})),n.d(r,"copy",(function(){return co})),n.d(r,"fromValues",(function(){return fo})),n.d(r,"set",(function(){return po})),n.d(r,"identity",(function(){return ho})),n.d(r,"transpose",(function(){return mo})),n.d(r,"invert",(function(){return vo})),n.d(r,"adjoint",(function(){return yo})),n.d(r,"determinant",(function(){return bo})),n.d(r,"multiply",(function(){return go})),n.d(r,"translate",(function(){return Eo})),n.d(r,"scale",(function(){return wo})),n.d(r,"rotate",(function(){return xo})),n.d(r,"rotateX",(function(){return So})),n.d(r,"rotateY",(function(){return To})),n.d(r,"rotateZ",(function(){return ko})),n.d(r,"fromTranslation",(function(){return Co})),n.d(r,"fromScaling",(function(){return Mo})),n.d(r,"fromRotation",(function(){return _o})),n.d(r,"fromXRotation",(function(){return Po})),n.d(r,"fromYRotation",(function(){return Oo})),n.d(r,"fromZRotation",(function(){return Ao})),n.d(r,"fromRotationTranslation",(function(){return Ro})),n.d(r,"fromQuat2",(function(){return No})),n.d(r,"getTranslation",(function(){return Lo})),n.d(r,"getScaling",(function(){return Fo})),n.d(r,"getRotation",(function(){return jo})),n.d(r,"fromRotationTranslationScale",(function(){return Do})),n.d(r,"fromRotationTranslationScaleOrigin",(function(){return Uo})),n.d(r,"fromQuat",(function(){return Io})),n.d(r,"frustum",(function(){return Bo})),n.d(r,"perspective",(function(){return Vo})),n.d(r,"perspectiveFromFieldOfView",(function(){return zo})),n.d(r,"ortho",(function(){return Wo})),n.d(r,"lookAt",(function(){return Ho})),n.d(r,"targetTo",(function(){return Yo})),n.d(r,"str",(function(){return Ko})),n.d(r,"frob",(function(){return Xo})),n.d(r,"add",(function(){return Go})),n.d(r,"subtract",(function(){return Zo})),n.d(r,"multiplyScalar",(function(){return $o})),n.d(r,"multiplyScalarAndAdd",(function(){return qo})),n.d(r,"exactEquals",(function(){return Qo})),n.d(r,"equals",(function(){return Jo})),n.d(r,"mul",(function(){return ea})),n.d(r,"sub",(function(){return ta}));var o={};n.r(o),n.d(o,"createVertexData",(function(){return na}));var a={};n.r(a),n.d(a,"createVertexData",(function(){return ra}));var i={};n.r(i),n.d(i,"createVertexData",(function(){return ba}));var l={};n.r(l),n.d(l,"createVertexData",(function(){return ga}));var u={};n.r(u),n.d(u,"createVertexData",(function(){return Ea}));var s={};n.r(s),n.d(s,"createVertexData",(function(){return Ua}));var c={};n.r(c),n.d(c,"createVertexData",(function(){return Ia}));var f={};n.r(f),n.d(f,"createVertexData",(function(){return Ba}));var p=n(0),d=n.n(p),h=n(7),m=n.n(h),v=(n(86),n(88),function(e){return d.a.createElement(d.a.Fragment,null,d.a.createElement("p",null,"Einsendeaufgaben"," "),d.a.createElement("p",null,d.a.createElement("button",{value:8,onClick:e.clickBtn},"EA 7")," "),d.a.createElement("p",null,d.a.createElement("button",{value:7,onClick:e.clickBtn},"EA 6")," "),d.a.createElement("p",null,d.a.createElement("button",{value:6,onClick:e.clickBtn},"EA 5")," "),d.a.createElement("p",null,d.a.createElement("button",{value:5,onClick:e.clickBtn},"EA 4-2")," "),d.a.createElement("p",null,d.a.createElement("button",{value:4,onClick:e.clickBtn},"EA 4-1")," "),d.a.createElement("p",null,d.a.createElement("button",{value:3,onClick:e.clickBtn},"EA 3")," "),d.a.createElement("p",null,d.a.createElement("button",{value:2,onClick:e.clickBtn},"EA 2")," "),d.a.createElement("p",null,d.a.createElement("button",{value:1,onClick:e.clickBtn},"EA 1")," "))}),y=n(11),b=n.n(y);n(92);function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function E(e){return(E="function"==typeof Symbol&&"symbol"===g(Symbol.iterator)?function(e){return g(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":g(e)})(e)}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function x(e){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function S(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function T(e,t){return(T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function k(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var C=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==E(t)&&"function"!=typeof t?S(e):t}(this,x(t).call(this,e)),k(S(n),"handleKeyDown",(function(e,t){console.log(e+"is down");var r=e+" "+n.state.eventKey;n.setState({eventKey:r}),"l"===e?(console.log("L pressed ! "),n.state.yOffset>=512&&n.setState({yOffset:n.state.yOffset-512})):"r"===e&&(console.log("R pressed ! "),n.setState({yOffset:n.state.yOffset+512}));var o='url("https://i.ibb.co/b7HgSFy/Graph-Viz-Tech-EA1.png") 0px '.concat(n.state.yOffset,"px");n[t].style.background=o.toString()})),n.state={yOffset:0,eventKey:" "},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&T(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this;return d.a.createElement("div",null,d.a.createElement("div",null,d.a.createElement("h2",null,"EA1")),d.a.createElement("img",{ref:function(t){return e.clippingrect=t},style:{position:"relative",width:"512px",height:"512px",background:'url("https://i.ibb.co/b7HgSFy/Graph-Viz-Tech-EA1.png") 0 0'},src:"https://i.ibb.co/Yc3S8ZW/placeholder1x1.png",alt:"circle",width:"1",height:"1"}),d.a.createElement("div",null,"Input Key detected: ",this.state.eventKey),d.a.createElement(b.a,{handleKeys:["l","r"],onKeyEvent:function(t,n){return e.handleKeyDown(t,"clippingrect")}}),d.a.createElement("div",{style:{position:"relative",height:"30px"}}),d.a.createElement("a",{href:"https://www.searchpng.com/2019/01/07/blue-circle-glow-png-free-download/"},"Circle Image Reference"))}}])&&w(n.prototype,r),o&&w(n,o),t}(p.Component);k(C,"propTypes",{}),k(C,"defaultProps",{});n(94);function M(e){return(M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e){return(_="function"==typeof Symbol&&"symbol"===M(Symbol.iterator)?function(e){return M(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":M(e)})(e)}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function O(e){return(O=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function A(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function R(e,t){return(R=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function N(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var L=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==_(t)&&"function"!=typeof t?A(e):t}(this,O(t).call(this,e)),N(A(n),"shaderProgram",(function(e,t,n){var r=e.createProgram(),o=function(t,n){var o=e.createShader("vertex"==t?e.VERTEX_SHADER:e.FRAGMENT_SHADER);if(e.shaderSource(o,n),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS))throw"Could not compile "+t+" shader:\n\n"+e.getShaderInfoLog(o);e.attachShader(r,o)};if(o("vertex",t),o("fragment",n),e.linkProgram(r),!e.getProgramParameter(r,e.LINK_STATUS))throw"Could not link the shader program!";return r})),N(A(n),"attributeSetFloats",(function(e,t,n,r,o){e.bindBuffer(e.ARRAY_BUFFER,e.createBuffer()),e.bufferData(e.ARRAY_BUFFER,new Float32Array(o),e.STATIC_DRAW);var a=e.getAttribLocation(t,n);e.enableVertexAttribArray(a),e.vertexAttribPointer(a,r,e.FLOAT,!1,0,0)})),N(A(n),"draw",(function(){try{var e=n.webGLCanvas.getContext("webgl");if(!e)throw"x"}catch(e){throw"Your web browser does not support WebGL!"}e.clearColor(.8,.8,.8,1),e.clear(e.COLOR_BUFFER_BIT);var t=n.shaderProgram(e,"attribute vec3 pos;void main() {\tgl_Position = vec4(pos, 2.0);}","void main() {\tgl_FragColor = vec4(0.5, 0.5, 1.0, 1.0);}");e.useProgram(t),n.attributeSetFloats(e,t,"pos",2,[.1,-.1,-.1,.1,.1,.1,-.1,-.1,-.1,-.1,-.2,-.2,-.2,-.1,-.2,-.2,-.2,.2,.2,.2,.2,-.2,.1,-.1,0,0,0,-.5,-.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,-.5,-.5,-.5,1,-1,-1,1,1,1,-1,-1,-1,-1,-1.2,-1.2,-1.2,-1.1,-1.2,-1.2,-1.2,1.2,1.2,1.2,1.2,-1.2,1.2,-1.2,1.1,-1.1,1.1,-1.1,0,0,-1.5,-1.5,-1.5,1.5,1.5,1.5,1.5,-1.5,-1.5,-1.5,-1.5,-1.5]),e.drawArrays(e.LINE_STRIP,0,41)})),N(A(n),"init",(function(){try{n.draw()}catch(e){alert("Error: "+e)}})),N(A(n),"handleKeyDown",(function(e){n.setState({eventKey:e}),"?"===e&&console.log("? pressed ! ")})),n.state={eventKey:" "},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&R(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.init()}},{key:"render",value:function(){var e=this;return d.a.createElement("div",null,d.a.createElement("div",null,d.a.createElement("h2",null,"EA2")),d.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"}),d.a.createElement("div",null,this.state.eventKey),d.a.createElement(b.a,{handleKeys:["?"],onKeyEvent:function(t,n){return e.handleKeyDown(t)}}),d.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&P(n.prototype,r),o&&P(n,o),t}(p.Component);N(L,"propTypes",{}),N(L,"defaultProps",{});var F=n(2),j=n.n(F),D=n(5),U=n.n(D),I=n(8),B=n.n(I),V=n(4),z=n.n(V),W=n(6),H=n.n(W),Y=n(1),K=n.n(Y),X=n(22),G=n.n(X),Z=n(3),$=n.n(Z),q=function(e){var t,n,r=e.className,o=e.included,a=e.vertical,i=e.offset,l=e.length,u=e.style,s=e.reverse,c=a?(t={},$()(t,s?"top":"bottom",i+"%"),$()(t,s?"bottom":"top","auto"),$()(t,"height",l+"%"),t):(n={},$()(n,s?"right":"left",i+"%"),$()(n,s?"left":"right","auto"),$()(n,"width",l+"%"),n),f=j()({},u,c);return o?d.a.createElement("div",{className:r,style:f}):null},Q=n(12),J=n.n(Q),ee=n(38),te=n.n(ee),ne=n(67),re=n.n(ne);function oe(e,t,n,r){var o=m.a.unstable_batchedUpdates?function(e){m.a.unstable_batchedUpdates(n,e)}:n;return re()(e,t,o,r)}var ae=n(10),ie=n.n(ae),le=function(e){var t=e.prefixCls,n=e.vertical,r=e.reverse,o=e.marks,a=e.dots,i=e.step,l=e.included,u=e.lowerBound,s=e.upperBound,c=e.max,f=e.min,p=e.dotStyle,h=e.activeDotStyle,m=c-f,v=function(e,t,n,r,o,a){G()(!n||r>0,"`Slider[step]` should be a positive number in order to make Slider[dots] work.");var i=Object.keys(t).map(parseFloat).sort((function(e,t){return e-t}));if(n&&r)for(var l=o;l<=a;l+=r)-1===i.indexOf(l)&&i.push(l);return i}(0,o,a,i,f,c).map((function(e){var o,a=Math.abs(e-f)/m*100+"%",i=!l&&e===s||l&&e<=s&&e>=u,c=n?j()({},p,$()({},r?"top":"bottom",a)):j()({},p,$()({},r?"right":"left",a));i&&(c=j()({},c,h));var v=ie()((o={},$()(o,t+"-dot",!0),$()(o,t+"-dot-active",i),$()(o,t+"-dot-reverse",r),o));return d.a.createElement("span",{className:v,style:c,key:e})}));return d.a.createElement("div",{className:t+"-step"},v)};le.propTypes={prefixCls:K.a.string,activeDotStyle:K.a.object,dotStyle:K.a.object,min:K.a.number,max:K.a.number,upperBound:K.a.number,lowerBound:K.a.number,included:K.a.bool,dots:K.a.bool,step:K.a.number,marks:K.a.object,vertical:K.a.bool,reverse:K.a.bool};var ue=le,se=function(e){var t=e.className,n=e.vertical,r=e.reverse,o=e.marks,a=e.included,i=e.upperBound,l=e.lowerBound,u=e.max,s=e.min,c=e.onClickLabel,f=Object.keys(o),p=u-s,h=f.map(parseFloat).sort((function(e,t){return e-t})).map((function(e){var u,f=o[e],h="object"==typeof f&&!d.a.isValidElement(f),m=h?f.label:f;if(!m&&0!==m)return null;var v=!a&&e===i||a&&e<=i&&e>=l,y=ie()((u={},$()(u,t+"-text",!0),$()(u,t+"-text-active",v),u)),b=$()({marginBottom:"-50%"},r?"top":"bottom",(e-s)/p*100+"%"),g=$()({transform:"translateX(-50%)",msTransform:"translateX(-50%)"},r?"right":"left",r?(e-s/4)/p*100+"%":(e-s)/p*100+"%"),E=n?b:g,w=h?j()({},E,f.style):E;return d.a.createElement("span",{className:y,style:w,key:e,onMouseDown:function(t){return c(t,e)},onTouchStart:function(t){return c(t,e)}},m)}));return d.a.createElement("div",{className:t},h)};se.propTypes={className:K.a.string,vertical:K.a.bool,reverse:K.a.bool,marks:K.a.object,included:K.a.bool,upperBound:K.a.number,lowerBound:K.a.number,max:K.a.number,min:K.a.number,onClickLabel:K.a.func};var ce=se,fe=function(e){function t(){var e,n,r,o;U()(this,t);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return n=r=z()(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r.state={clickFocused:!1},r.setHandleRef=function(e){r.handle=e},r.handleMouseUp=function(){document.activeElement===r.handle&&r.setClickFocus(!0)},r.handleMouseDown=function(){r.focus()},r.handleBlur=function(){r.setClickFocus(!1)},r.handleKeyDown=function(){r.setClickFocus(!1)},o=n,z()(r,o)}return H()(t,e),B()(t,[{key:"componentDidMount",value:function(){this.onMouseUpListener=oe(document,"mouseup",this.handleMouseUp)}},{key:"componentWillUnmount",value:function(){this.onMouseUpListener&&this.onMouseUpListener.remove()}},{key:"setClickFocus",value:function(e){this.setState({clickFocused:e})}},{key:"clickFocus",value:function(){this.setClickFocus(!0),this.focus()}},{key:"focus",value:function(){this.handle.focus()}},{key:"blur",value:function(){this.handle.blur()}},{key:"render",value:function(){var e,t,n=this.props,r=n.prefixCls,o=n.vertical,a=n.reverse,i=n.offset,l=n.style,u=n.disabled,s=n.min,c=n.max,f=n.value,p=n.tabIndex,h=J()(n,["prefixCls","vertical","reverse","offset","style","disabled","min","max","value","tabIndex"]),m=ie()(this.props.className,$()({},r+"-handle-click-focused",this.state.clickFocused)),v=o?(e={},$()(e,a?"top":"bottom",i+"%"),$()(e,a?"bottom":"top","auto"),$()(e,"transform","translateY(+50%)"),e):(t={},$()(t,a?"right":"left",i+"%"),$()(t,a?"left":"right","auto"),$()(t,"transform","translateX("+(a?"+":"-")+"50%)"),t),y=j()({},l,v),b=p||0;return(u||null===p)&&(b=null),d.a.createElement("div",j()({ref:this.setHandleRef,tabIndex:b},h,{className:m,style:y,onBlur:this.handleBlur,onKeyDown:this.handleKeyDown,onMouseDown:this.handleMouseDown,role:"slider","aria-valuemin":s,"aria-valuemax":c,"aria-valuenow":f,"aria-disabled":!!u}))}}]),t}(d.a.Component),pe=fe;fe.propTypes={prefixCls:K.a.string,className:K.a.string,vertical:K.a.bool,offset:K.a.number,style:K.a.object,disabled:K.a.bool,min:K.a.number,max:K.a.number,value:K.a.number,tabIndex:K.a.number,reverse:K.a.bool};var de=n(27),he=n.n(de),me={MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,QUESTION_MARK:63,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,SLASH:191,APOSTROPHE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,WIN_IME:229,isTextModifyingKeyEvent:function(e){var t=e.keyCode;if(e.altKey&&!e.ctrlKey||e.metaKey||t>=me.F1&&t<=me.F12)return!1;switch(t){case me.ALT:case me.CAPS_LOCK:case me.CONTEXT_MENU:case me.CTRL:case me.DOWN:case me.END:case me.ESC:case me.HOME:case me.INSERT:case me.LEFT:case me.MAC_FF_META:case me.META:case me.NUMLOCK:case me.NUM_CENTER:case me.PAGE_DOWN:case me.PAGE_UP:case me.PAUSE:case me.PRINT_SCREEN:case me.RIGHT:case me.SHIFT:case me.UP:case me.WIN_KEY:case me.WIN_KEY_RIGHT:return!1;default:return!0}},isCharacterKey:function(e){if(e>=me.ZERO&&e<=me.NINE)return!0;if(e>=me.NUM_ZERO&&e<=me.NUM_MULTIPLY)return!0;if(e>=me.A&&e<=me.Z)return!0;if(-1!==window.navigator.userAgent.indexOf("WebKit")&&0===e)return!0;switch(e){case me.SPACE:case me.QUESTION_MARK:case me.NUM_PLUS:case me.NUM_MINUS:case me.NUM_PERIOD:case me.NUM_DIVISION:case me.SEMICOLON:case me.DASH:case me.EQUALS:case me.COMMA:case me.PERIOD:case me.SLASH:case me.APOSTROPHE:case me.SINGLE_QUOTE:case me.OPEN_SQUARE_BRACKET:case me.BACKSLASH:case me.CLOSE_SQUARE_BRACKET:return!0;default:return!1}}},ve=me;function ye(e,t){try{return Object.keys(t).some((function(n){return e.target===Object(h.findDOMNode)(t[n])}))}catch(e){return!1}}function be(e,t){var n=t.min,r=t.max;return e<n||e>r}function ge(e){return e.touches.length>1||"touchend"===e.type.toLowerCase()&&e.touches.length>0}function Ee(e,t){var n=t.marks,r=t.step,o=t.min,a=t.max,i=Object.keys(n).map(parseFloat);if(null!==r){var l=Math.floor((a-o)/r),u=Math.min((e-o)/r,l),s=Math.round(u)*r+o;i.push(s)}var c=i.map((function(t){return Math.abs(e-t)}));return i[c.indexOf(Math.min.apply(Math,he()(c)))]}function we(e,t){return e?t.clientY:t.pageX}function xe(e,t){return e?t.touches[0].clientY:t.touches[0].pageX}function Se(e,t){var n=t.getBoundingClientRect();return e?n.top+.5*n.height:window.pageXOffset+n.left+.5*n.width}function Te(e,t){var n=t.max,r=t.min;return e<=r?r:e>=n?n:e}function ke(e,t){var n=t.step,r=isFinite(Ee(e,t))?Ee(e,t):0;return null===n?r:parseFloat(r.toFixed(function(e){var t=e.toString(),n=0;return t.indexOf(".")>=0&&(n=t.length-t.indexOf(".")-1),n}(n)))}function Ce(e){e.stopPropagation(),e.preventDefault()}function Me(e,t,n){var r="increase";switch(e.keyCode){case ve.UP:r=t&&n?"decrease":"increase";break;case ve.RIGHT:r=!t&&n?"decrease":"increase";break;case ve.DOWN:r=t&&n?"increase":"decrease";break;case ve.LEFT:r=!t&&n?"increase":"decrease";break;case ve.END:return function(e,t){return t.max};case ve.HOME:return function(e,t){return t.min};case ve.PAGE_UP:return function(e,t){return e+2*t.step};case ve.PAGE_DOWN:return function(e,t){return e-2*t.step};default:return}return function(e,t){return function(e,t,n){var r={increase:function(e,t){return e+t},decrease:function(e,t){return e-t}},o=r[e](Object.keys(n.marks).indexOf(JSON.stringify(t)),1),a=Object.keys(n.marks)[o];return n.step?r[e](t,n.step):Object.keys(n.marks).length&&n.marks[a]?n.marks[a]:t}(r,e,t)}}function _e(){}function Pe(e){var t,n;return n=t=function(e){function t(e){U()(this,t);var n=z()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.onMouseDown=function(e){if(0===e.button){var t=n.props.vertical,r=we(t,e);if(ye(e,n.handlesRefs)){var o=Se(t,e.target);n.dragOffset=r-o,r=o}else n.dragOffset=0;n.removeDocumentEvents(),n.onStart(r),n.addDocumentMouseEvents()}},n.onTouchStart=function(e){if(!ge(e)){var t=n.props.vertical,r=xe(t,e);if(ye(e,n.handlesRefs)){var o=Se(t,e.target);n.dragOffset=r-o,r=o}else n.dragOffset=0;n.onStart(r),n.addDocumentTouchEvents(),Ce(e)}},n.onFocus=function(e){var t=n.props,r=t.onFocus,o=t.vertical;if(ye(e,n.handlesRefs)){var a=Se(o,e.target);n.dragOffset=0,n.onStart(a),Ce(e),r&&r(e)}},n.onBlur=function(e){var t=n.props.onBlur;n.onEnd(),t&&t(e)},n.onMouseUp=function(){n.handlesRefs[n.prevMovedHandleIndex]&&n.handlesRefs[n.prevMovedHandleIndex].clickFocus()},n.onMouseMove=function(e){if(n.sliderRef){var t=we(n.props.vertical,e);n.onMove(e,t-n.dragOffset)}else n.onEnd()},n.onTouchMove=function(e){if(!ge(e)&&n.sliderRef){var t=xe(n.props.vertical,e);n.onMove(e,t-n.dragOffset)}else n.onEnd()},n.onKeyDown=function(e){n.sliderRef&&ye(e,n.handlesRefs)&&n.onKeyboard(e)},n.onClickMarkLabel=function(e,t){e.stopPropagation(),n.onChange({value:t}),n.setState({value:t},(function(){return n.onEnd(!0)}))},n.saveSlider=function(e){n.sliderRef=e};var r=e.step,o=e.max,a=e.min,i=!isFinite(o-a)||(o-a)%r==0;return G()(!r||Math.floor(r)!==r||i,"Slider[max] - Slider[min] (%s) should be a multiple of Slider[step] (%s)",o-a,r),n.handlesRefs={},n}return H()(t,e),B()(t,[{key:"componentDidMount",value:function(){this.document=this.sliderRef&&this.sliderRef.ownerDocument;var e=this.props,t=e.autoFocus,n=e.disabled;t&&!n&&this.focus()}},{key:"componentWillUnmount",value:function(){te()(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentWillUnmount",this)&&te()(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentWillUnmount",this).call(this),this.removeDocumentEvents()}},{key:"getSliderStart",value:function(){var e=this.sliderRef,t=this.props,n=t.vertical,r=t.reverse,o=e.getBoundingClientRect();return n?r?o.bottom:o.top:window.pageXOffset+(r?o.right:o.left)}},{key:"getSliderLength",value:function(){var e=this.sliderRef;if(!e)return 0;var t=e.getBoundingClientRect();return this.props.vertical?t.height:t.width}},{key:"addDocumentTouchEvents",value:function(){this.onTouchMoveListener=oe(this.document,"touchmove",this.onTouchMove),this.onTouchUpListener=oe(this.document,"touchend",this.onEnd)}},{key:"addDocumentMouseEvents",value:function(){this.onMouseMoveListener=oe(this.document,"mousemove",this.onMouseMove),this.onMouseUpListener=oe(this.document,"mouseup",this.onEnd)}},{key:"removeDocumentEvents",value:function(){this.onTouchMoveListener&&this.onTouchMoveListener.remove(),this.onTouchUpListener&&this.onTouchUpListener.remove(),this.onMouseMoveListener&&this.onMouseMoveListener.remove(),this.onMouseUpListener&&this.onMouseUpListener.remove()}},{key:"focus",value:function(){this.props.disabled||this.handlesRefs[0].focus()}},{key:"blur",value:function(){var e=this;this.props.disabled||Object.keys(this.handlesRefs).forEach((function(t){e.handlesRefs[t]&&e.handlesRefs[t].blur&&e.handlesRefs[t].blur()}))}},{key:"calcValue",value:function(e){var t=this.props,n=t.vertical,r=t.min,o=t.max,a=Math.abs(Math.max(e,0)/this.getSliderLength());return n?(1-a)*(o-r)+r:a*(o-r)+r}},{key:"calcValueByPos",value:function(e){var t=(this.props.reverse?-1:1)*(e-this.getSliderStart());return this.trimAlignValue(this.calcValue(t))}},{key:"calcOffset",value:function(e){var t=this.props,n=t.min;return 100*((e-n)/(t.max-n))}},{key:"saveHandle",value:function(e,t){this.handlesRefs[e]=t}},{key:"render",value:function(){var e,n=this.props,r=n.prefixCls,o=n.className,a=n.marks,i=n.dots,l=n.step,u=n.included,s=n.disabled,c=n.vertical,f=n.reverse,p=n.min,h=n.max,m=n.children,v=n.maximumTrackStyle,y=n.style,b=n.railStyle,g=n.dotStyle,E=n.activeDotStyle,w=te()(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"render",this).call(this),x=w.tracks,S=w.handles,T=ie()(r,(e={},$()(e,r+"-with-marks",Object.keys(a).length),$()(e,r+"-disabled",s),$()(e,r+"-vertical",c),$()(e,o,o),e));return d.a.createElement("div",{ref:this.saveSlider,className:T,onTouchStart:s?_e:this.onTouchStart,onMouseDown:s?_e:this.onMouseDown,onMouseUp:s?_e:this.onMouseUp,onKeyDown:s?_e:this.onKeyDown,onFocus:s?_e:this.onFocus,onBlur:s?_e:this.onBlur,style:y},d.a.createElement("div",{className:r+"-rail",style:j()({},v,b)}),x,d.a.createElement(ue,{prefixCls:r,vertical:c,reverse:f,marks:a,dots:i,step:l,included:u,lowerBound:this.getLowerBound(),upperBound:this.getUpperBound(),max:h,min:p,dotStyle:g,activeDotStyle:E}),S,d.a.createElement(ce,{className:r+"-mark",onClickLabel:s?_e:this.onClickMarkLabel,vertical:c,marks:a,included:u,lowerBound:this.getLowerBound(),upperBound:this.getUpperBound(),max:h,min:p,reverse:f}),m)}}]),t}(e),t.displayName="ComponentEnhancer("+e.displayName+")",t.propTypes=j()({},e.propTypes,{min:K.a.number,max:K.a.number,step:K.a.number,marks:K.a.object,included:K.a.bool,className:K.a.string,prefixCls:K.a.string,disabled:K.a.bool,children:K.a.any,onBeforeChange:K.a.func,onChange:K.a.func,onAfterChange:K.a.func,handle:K.a.func,dots:K.a.bool,vertical:K.a.bool,style:K.a.object,reverse:K.a.bool,minimumTrackStyle:K.a.object,maximumTrackStyle:K.a.object,handleStyle:K.a.oneOfType([K.a.object,K.a.arrayOf(K.a.object)]),trackStyle:K.a.oneOfType([K.a.object,K.a.arrayOf(K.a.object)]),railStyle:K.a.object,dotStyle:K.a.object,activeDotStyle:K.a.object,autoFocus:K.a.bool,onFocus:K.a.func,onBlur:K.a.func}),t.defaultProps=j()({},e.defaultProps,{prefixCls:"rc-slider",className:"",min:0,max:100,step:1,marks:{},handle:function(e){var t=e.index,n=J()(e,["index"]);return delete n.dragging,null===n.value?null:d.a.createElement(pe,j()({},n,{key:t}))},onBeforeChange:_e,onChange:_e,onAfterChange:_e,included:!0,disabled:!1,dots:!1,vertical:!1,reverse:!1,trackStyle:[{}],handleStyle:[{}],railStyle:{},dotStyle:{},activeDotStyle:{}}),n}var Oe=function(e){function t(e){U()(this,t);var n=z()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.onEnd=function(e){var t=n.state.dragging;n.removeDocumentEvents(),(t||e)&&n.props.onAfterChange(n.getValue()),n.setState({dragging:!1})};var r=void 0!==e.defaultValue?e.defaultValue:e.min,o=void 0!==e.value?e.value:r;return n.state={value:n.trimAlignValue(o),dragging:!1},G()(!("minimumTrackStyle"in e),"minimumTrackStyle will be deprecated, please use trackStyle instead."),G()(!("maximumTrackStyle"in e),"maximumTrackStyle will be deprecated, please use railStyle instead."),n}return H()(t,e),B()(t,[{key:"componentDidUpdate",value:function(e,t){if("value"in this.props||"min"in this.props||"max"in this.props){var n=this.props,r=n.value,o=n.onChange,a=void 0!==r?r:t.value,i=this.trimAlignValue(a,this.props);i!==t.value&&(this.setState({value:i}),be(a,this.props)&&o(i))}}},{key:"onChange",value:function(e){var t=this.props,n=!("value"in t),r=e.value>this.props.max?j()({},e,{value:this.props.max}):e;n&&this.setState(r);var o=r.value;t.onChange(o)}},{key:"onStart",value:function(e){this.setState({dragging:!0});var t=this.props,n=this.getValue();t.onBeforeChange(n);var r=this.calcValueByPos(e);this.startValue=r,this.startPosition=e,r!==n&&(this.prevMovedHandleIndex=0,this.onChange({value:r}))}},{key:"onMove",value:function(e,t){Ce(e);var n=this.state.value,r=this.calcValueByPos(t);r!==n&&this.onChange({value:r})}},{key:"onKeyboard",value:function(e){var t=this.props,n=t.reverse,r=Me(e,t.vertical,n);if(r){Ce(e);var o=this.state.value,a=r(o,this.props),i=this.trimAlignValue(a);if(i===o)return;this.onChange({value:i}),this.props.onAfterChange(i),this.onEnd()}}},{key:"getValue",value:function(){return this.state.value}},{key:"getLowerBound",value:function(){return this.props.min}},{key:"getUpperBound",value:function(){return this.state.value}},{key:"trimAlignValue",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(null===e)return null;var n=j()({},this.props,t),r=Te(e,n);return ke(r,n)}},{key:"render",value:function(){var e=this,t=this.props,n=t.prefixCls,r=t.vertical,o=t.included,a=t.disabled,i=t.minimumTrackStyle,l=t.trackStyle,u=t.handleStyle,s=t.tabIndex,c=t.min,f=t.max,p=t.reverse,h=t.handle,m=this.state,v=m.value,y=m.dragging,b=this.calcOffset(v),g=h({className:n+"-handle",prefixCls:n,vertical:r,offset:b,value:v,dragging:y,disabled:a,min:c,max:f,reverse:p,index:0,tabIndex:s,style:u[0]||u,ref:function(t){return e.saveHandle(0,t)}}),E=l[0]||l;return{tracks:d.a.createElement(q,{className:n+"-track",vertical:r,included:o,offset:0,reverse:p,length:b,style:j()({},i,E)}),handles:g}}}]),t}(d.a.Component);Oe.propTypes={defaultValue:K.a.number,value:K.a.number,disabled:K.a.bool,autoFocus:K.a.bool,tabIndex:K.a.number,reverse:K.a.bool,min:K.a.number,max:K.a.number};var Ae=Pe(Oe);function Re(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function Ne(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function Le(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function Fe(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,r=null,o=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?r="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(r="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?o="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(o="UNSAFE_componentWillUpdate"),null!==n||null!==r||null!==o){var a=e.displayName||e.name,i="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+a+" uses "+i+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==r?"\n  "+r:"")+(null!==o?"\n  "+o:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=Re,t.componentWillReceiveProps=Ne),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=Le;var l=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;l.call(this,e,t,r)}}return e}Re.__suppressDeprecationWarning=!0,Ne.__suppressDeprecationWarning=!0,Le.__suppressDeprecationWarning=!0;var je=n(68),De=n.n(je),Ue=function(e){var t=e.value,n=e.handle,r=e.bounds,o=e.props,a=o.allowCross,i=o.pushable,l=Number(i),u=Te(t,o),s=u;return a||null==n||void 0===r||(n>0&&u<=r[n-1]+l&&(s=r[n-1]+l),n<r.length-1&&u>=r[n+1]-l&&(s=r[n+1]-l)),ke(s,o)},Ie=function(e){function t(e){U()(this,t);var n=z()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.onEnd=function(e){var t=n.state.handle;n.removeDocumentEvents(),(null!==t||e)&&n.props.onAfterChange(n.getValue()),n.setState({handle:null})};var r=e.count,o=e.min,a=e.max,i=Array.apply(void 0,he()(Array(r+1))).map((function(){return o})),l="defaultValue"in e?e.defaultValue:i,u=(void 0!==e.value?e.value:l).map((function(t,n){return Ue({value:t,handle:n,props:e})})),s=u[0]===a?0:u.length-1;return n.state={handle:null,recent:s,bounds:u},n}return H()(t,e),B()(t,[{key:"componentDidUpdate",value:function(e,t){var n=this;if(("value"in this.props||"min"in this.props||"max"in this.props)&&(this.props.min!==e.min||this.props.max!==e.max||!De()(this.props.value,e.value))){var r=this.props,o=r.onChange,a=r.value||t.bounds;if(a.some((function(e){return be(e,n.props)})))o(a.map((function(e){return Te(e,n.props)})))}}},{key:"onChange",value:function(e){var t=this.props;if(!("value"in t))this.setState(e);else{var n={};["handle","recent"].forEach((function(t){void 0!==e[t]&&(n[t]=e[t])})),Object.keys(n).length&&this.setState(n)}var r=j()({},this.state,e).bounds;t.onChange(r)}},{key:"onStart",value:function(e){var t=this.props,n=this.state,r=this.getValue();t.onBeforeChange(r);var o=this.calcValueByPos(e);this.startValue=o,this.startPosition=e;var a=this.getClosestBound(o);if(this.prevMovedHandleIndex=this.getBoundNeedMoving(o,a),this.setState({handle:this.prevMovedHandleIndex,recent:this.prevMovedHandleIndex}),o!==r[this.prevMovedHandleIndex]){var i=[].concat(he()(n.bounds));i[this.prevMovedHandleIndex]=o,this.onChange({bounds:i})}}},{key:"onMove",value:function(e,t){Ce(e);var n=this.state,r=this.calcValueByPos(t);r!==n.bounds[n.handle]&&this.moveTo(r)}},{key:"onKeyboard",value:function(e){var t=this.props,n=t.reverse,r=Me(e,t.vertical,n);if(r){Ce(e);var o=this.state,a=this.props,i=o.bounds,l=o.handle,u=i[null===l?o.recent:l],s=r(u,a),c=Ue({value:s,handle:l,bounds:o.bounds,props:a});if(c===u)return;this.moveTo(c,!0)}}},{key:"getValue",value:function(){return this.state.bounds}},{key:"getClosestBound",value:function(e){for(var t=this.state.bounds,n=0,r=1;r<t.length-1;++r)e>=t[r]&&(n=r);return Math.abs(t[n+1]-e)<Math.abs(t[n]-e)&&(n+=1),n}},{key:"getBoundNeedMoving",value:function(e,t){var n=this.state,r=n.bounds,o=n.recent,a=t,i=r[t+1]===r[t];return i&&r[o]===r[t]&&(a=o),i&&e!==r[t+1]&&(a=e<r[t+1]?t:t+1),a}},{key:"getLowerBound",value:function(){return this.state.bounds[0]}},{key:"getUpperBound",value:function(){var e=this.state.bounds;return e[e.length-1]}},{key:"getPoints",value:function(){var e=this.props,t=e.marks,n=e.step,r=e.min,o=e.max,a=this._getPointsCache;if(!a||a.marks!==t||a.step!==n){var i=j()({},t);if(null!==n)for(var l=r;l<=o;l+=n)i[l]=l;var u=Object.keys(i).map(parseFloat);u.sort((function(e,t){return e-t})),this._getPointsCache={marks:t,step:n,points:u}}return this._getPointsCache.points}},{key:"moveTo",value:function(e,t){var n=this,r=this.state,o=this.props,a=[].concat(he()(r.bounds)),i=null===r.handle?r.recent:r.handle;a[i]=e;var l=i;!1!==o.pushable?this.pushSurroundingHandles(a,l):o.allowCross&&(a.sort((function(e,t){return e-t})),l=a.indexOf(e)),this.onChange({recent:l,handle:l,bounds:a}),t&&(this.props.onAfterChange(a),this.setState({},(function(){n.handlesRefs[l].focus()})),this.onEnd())}},{key:"pushSurroundingHandles",value:function(e,t){var n=e[t],r=this.props.pushable;r=Number(r);var o=0;if(e[t+1]-n<r&&(o=1),n-e[t-1]<r&&(o=-1),0!==o){var a=t+o,i=o*(e[a]-n);this.pushHandle(e,a,o,r-i)||(e[t]=e[a]-o*r)}}},{key:"pushHandle",value:function(e,t,n,r){for(var o=e[t],a=e[t];n*(a-o)<r;){if(!this.pushHandleOnePoint(e,t,n))return e[t]=o,!1;a=e[t]}return!0}},{key:"pushHandleOnePoint",value:function(e,t,n){var r=this.getPoints(),o=r.indexOf(e[t])+n;if(o>=r.length||o<0)return!1;var a=t+n,i=r[o],l=this.props.pushable,u=n*(e[a]-i);return!!this.pushHandle(e,a,n,l-u)&&(e[t]=i,!0)}},{key:"trimAlignValue",value:function(e){var t=this.state,n=t.handle,r=t.bounds;return Ue({value:e,handle:n,bounds:r,props:this.props})}},{key:"render",value:function(){var e=this,t=this.state,n=t.handle,r=t.bounds,o=this.props,a=o.prefixCls,i=o.vertical,l=o.included,u=o.disabled,s=o.min,c=o.max,f=o.reverse,p=o.handle,h=o.trackStyle,m=o.handleStyle,v=o.tabIndex,y=r.map((function(t){return e.calcOffset(t)})),b=a+"-handle",g=r.map((function(t,r){var o,l=v[r]||0;return(u||null===v[r])&&(l=null),p({className:ie()((o={},$()(o,b,!0),$()(o,b+"-"+(r+1),!0),o)),prefixCls:a,vertical:i,offset:y[r],value:t,dragging:n===r,index:r,tabIndex:l,min:s,max:c,reverse:f,disabled:u,style:m[r],ref:function(t){return e.saveHandle(r,t)}})}));return{tracks:r.slice(0,-1).map((function(e,t){var n,r=t+1,o=ie()((n={},$()(n,a+"-track",!0),$()(n,a+"-track-"+r,!0),n));return d.a.createElement(q,{className:o,vertical:i,reverse:f,included:l,offset:y[r-1],length:y[r]-y[r-1],style:h[t],key:r})})),handles:g}}}],[{key:"getDerivedStateFromProps",value:function(e,t){if("value"in e||"min"in e||"max"in e){var n=(e.value||t.bounds).map((function(n,r){return Ue({value:n,handle:r,bounds:t.bounds,props:e})}));return n.length===t.bounds.length&&n.every((function(e,n){return e===t.bounds[n]}))?null:j()({},t,{bounds:n})}return null}}]),t}(d.a.Component);Ie.displayName="Range",Ie.propTypes={autoFocus:K.a.bool,defaultValue:K.a.arrayOf(K.a.number),value:K.a.arrayOf(K.a.number),count:K.a.number,pushable:K.a.oneOfType([K.a.bool,K.a.number]),allowCross:K.a.bool,disabled:K.a.bool,reverse:K.a.bool,tabIndex:K.a.arrayOf(K.a.number),min:K.a.number,max:K.a.number},Ie.defaultProps={count:1,allowCross:!0,pushable:!1,tabIndex:[]},Fe(Ie);var Be=Pe(Ie);function Ve(e,t){for(var n=t;n;){if(n===e)return!0;n=n.parentNode}return!1}function ze(e){return(ze="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function We(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function He(e,t){return!t||"object"!==ze(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ye(e){return(Ye=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ke(e,t){return(Ke=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Xe=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return(n=He(this,(e=Ye(t)).call.apply(e,[this].concat(o)))).removeContainer=function(){n.container&&(m.a.unmountComponentAtNode(n.container),n.container.parentNode.removeChild(n.container),n.container=null)},n.renderComponent=function(e,t){var r=n.props,o=r.visible,a=r.getComponent,i=r.forceRender,l=r.getContainer,u=r.parent;(o||u._component||i)&&(n.container||(n.container=l()),m.a.unstable_renderSubtreeIntoContainer(u,a(e),n.container,(function(){t&&t.call(this)})))},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ke(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.props.autoMount&&this.renderComponent()}},{key:"componentDidUpdate",value:function(){this.props.autoMount&&this.renderComponent()}},{key:"componentWillUnmount",value:function(){this.props.autoDestroy&&this.removeContainer()}},{key:"render",value:function(){return this.props.children({renderComponent:this.renderComponent,removeContainer:this.removeContainer})}}])&&We(n.prototype,r),o&&We(n,o),t}(d.a.Component);function Ge(e){return(Ge="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ze(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $e(e,t){return!t||"object"!==Ge(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function qe(e){return(qe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Qe(e,t){return(Qe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}Xe.propTypes={autoMount:K.a.bool,autoDestroy:K.a.bool,visible:K.a.bool,forceRender:K.a.bool,parent:K.a.any,getComponent:K.a.func.isRequired,getContainer:K.a.func.isRequired,children:K.a.func.isRequired},Xe.defaultProps={autoMount:!0,autoDestroy:!0,forceRender:!1};var Je,et=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),$e(this,qe(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Qe(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.createContainer()}},{key:"componentDidUpdate",value:function(e){var t=this.props.didUpdate;t&&t(e)}},{key:"componentWillUnmount",value:function(){this.removeContainer()}},{key:"createContainer",value:function(){this._container=this.props.getContainer(),this.forceUpdate()}},{key:"removeContainer",value:function(){this._container&&this._container.parentNode.removeChild(this._container)}},{key:"render",value:function(){return this._container?m.a.createPortal(this.props.children,this._container):null}}])&&Ze(n.prototype,r),o&&Ze(n,o),t}(d.a.Component);function tt(e,t,n){return n?e[0]===t[0]:e[0]===t[0]&&e[1]===t[1]}function nt(e,t){this[e]=t}function rt(e){return(rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ot(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function at(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}et.propTypes={getContainer:K.a.func.isRequired,children:K.a.node.isRequired,didUpdate:K.a.func};var it={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-",O:"-o-"};function lt(){if(void 0!==Je)return Je;Je="";var e=document.createElement("p").style;for(var t in it)t+"Transform"in e&&(Je=t);return Je}function ut(){return lt()?"".concat(lt(),"TransitionProperty"):"transitionProperty"}function st(){return lt()?"".concat(lt(),"Transform"):"transform"}function ct(e,t){var n=ut();n&&(e.style[n]=t,"transitionProperty"!==n&&(e.style.transitionProperty=t))}function ft(e,t){var n=st();n&&(e.style[n]=t,"transform"!==n&&(e.style.transform=t))}var pt,dt=/matrix\((.*)\)/,ht=/matrix3d\((.*)\)/;function mt(e){var t=e.style.display;e.style.display="none",e.offsetHeight,e.style.display=t}function vt(e,t,n){var r=n;if("object"!==rt(t))return void 0!==r?("number"==typeof r&&(r="".concat(r,"px")),void(e.style[t]=r)):pt(e,t);for(var o in t)t.hasOwnProperty(o)&&vt(e,o,t[o])}function yt(e,t){var n=e["page".concat(t?"Y":"X","Offset")],r="scroll".concat(t?"Top":"Left");if("number"!=typeof n){var o=e.document;"number"!=typeof(n=o.documentElement[r])&&(n=o.body[r])}return n}function bt(e){return yt(e)}function gt(e){return yt(e,!0)}function Et(e){var t=function(e){var t,n,r,o=e.ownerDocument,a=o.body,i=o&&o.documentElement;return n=(t=e.getBoundingClientRect()).left,r=t.top,{left:n-=i.clientLeft||a.clientLeft||0,top:r-=i.clientTop||a.clientTop||0}}(e),n=e.ownerDocument,r=n.defaultView||n.parentWindow;return t.left+=bt(r),t.top+=gt(r),t}function wt(e){return null!=e&&e==e.window}function xt(e){return wt(e)?e.document:9===e.nodeType?e:e.ownerDocument}var St=new RegExp("^(".concat(/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,")(?!px)[a-z%]+$"),"i"),Tt=/^(top|right|bottom|left)$/,kt="currentStyle",Ct="runtimeStyle",Mt="left",_t="px";function Pt(e,t){return"left"===e?t.useCssRight?"right":e:t.useCssBottom?"bottom":e}function Ot(e){return"left"===e?"right":"right"===e?"left":"top"===e?"bottom":"bottom"===e?"top":void 0}function At(e,t,n){"static"===vt(e,"position")&&(e.style.position="relative");var r=-999,o=-999,a=Pt("left",n),i=Pt("top",n),l=Ot(a),u=Ot(i);"left"!==a&&(r=999),"top"!==i&&(o=999);var s,c="",f=Et(e);("left"in t||"top"in t)&&(c=(s=e).style.transitionProperty||s.style[ut()]||"",ct(e,"none")),"left"in t&&(e.style[l]="",e.style[a]="".concat(r,"px")),"top"in t&&(e.style[u]="",e.style[i]="".concat(o,"px")),mt(e);var p=Et(e),d={};for(var h in t)if(t.hasOwnProperty(h)){var m=Pt(h,n),v="left"===h?r:o,y=f[h]-p[h];d[m]=m===h?v+y:v-y}vt(e,d),mt(e),("left"in t||"top"in t)&&ct(e,c);var b={};for(var g in t)if(t.hasOwnProperty(g)){var E=Pt(g,n),w=t[g]-f[g];b[E]=g===E?d[E]+w:d[E]-w}vt(e,b)}function Rt(e,t){var n=Et(e),r=function(e){var t=window.getComputedStyle(e,null),n=t.getPropertyValue("transform")||t.getPropertyValue(st());if(n&&"none"!==n){var r=n.replace(/[^0-9\-.,]/g,"").split(",");return{x:parseFloat(r[12]||r[4],0),y:parseFloat(r[13]||r[5],0)}}return{x:0,y:0}}(e),o={x:r.x,y:r.y};"left"in t&&(o.x=r.x+t.left-n.left),"top"in t&&(o.y=r.y+t.top-n.top),function(e,t){var n=window.getComputedStyle(e,null),r=n.getPropertyValue("transform")||n.getPropertyValue(st());if(r&&"none"!==r){var o,a=r.match(dt);if(a)(o=(a=a[1]).split(",").map((function(e){return parseFloat(e,10)})))[4]=t.x,o[5]=t.y,ft(e,"matrix(".concat(o.join(","),")"));else(o=r.match(ht)[1].split(",").map((function(e){return parseFloat(e,10)})))[12]=t.x,o[13]=t.y,ft(e,"matrix3d(".concat(o.join(","),")"))}else ft(e,"translateX(".concat(t.x,"px) translateY(").concat(t.y,"px) translateZ(0)"))}(e,o)}function Nt(e,t){for(var n=0;n<e.length;n++)t(e[n])}function Lt(e){return"border-box"===pt(e,"boxSizing")}"undefined"!=typeof window&&(pt=window.getComputedStyle?function(e,t,n){var r=n,o="",a=xt(e);return(r=r||a.defaultView.getComputedStyle(e,null))&&(o=r.getPropertyValue(t)||r[t]),o}:function(e,t){var n=e[kt]&&e[kt][t];if(St.test(n)&&!Tt.test(t)){var r=e.style,o=r[Mt],a=e[Ct][Mt];e[Ct][Mt]=e[kt][Mt],r[Mt]="fontSize"===t?"1em":n||0,n=r.pixelLeft+_t,r[Mt]=o,e[Ct][Mt]=a}return""===n?"auto":n});var Ft=["margin","border","padding"],jt=-1,Dt=2,Ut=1;function It(e,t,n){var r,o,a,i=0;for(o=0;o<t.length;o++)if(r=t[o])for(a=0;a<n.length;a++){var l=void 0;l="border"===r?"".concat(r).concat(n[a],"Width"):r+n[a],i+=parseFloat(pt(e,l))||0}return i}var Bt={getParent:function(e){var t=e;do{t=11===t.nodeType&&t.host?t.host:t.parentNode}while(t&&1!==t.nodeType&&9!==t.nodeType);return t}};function Vt(e,t,n){var r=n;if(wt(e))return"width"===t?Bt.viewportWidth(e):Bt.viewportHeight(e);if(9===e.nodeType)return"width"===t?Bt.docWidth(e):Bt.docHeight(e);var o="width"===t?["Left","Right"]:["Top","Bottom"],a="width"===t?e.getBoundingClientRect().width:e.getBoundingClientRect().height,i=(pt(e),Lt(e)),l=0;(null==a||a<=0)&&(a=void 0,(null==(l=pt(e,t))||Number(l)<0)&&(l=e.style[t]||0),l=parseFloat(l)||0),void 0===r&&(r=i?Ut:jt);var u=void 0!==a||i,s=a||l;return r===jt?u?s-It(e,["border","padding"],o):l:u?r===Ut?s:s+(r===Dt?-It(e,["border"],o):It(e,["margin"],o)):l+It(e,Ft.slice(r),o)}Nt(["Width","Height"],(function(e){Bt["doc".concat(e)]=function(t){var n=t.document;return Math.max(n.documentElement["scroll".concat(e)],n.body["scroll".concat(e)],Bt["viewport".concat(e)](n))},Bt["viewport".concat(e)]=function(t){var n="client".concat(e),r=t.document,o=r.body,a=r.documentElement[n];return"CSS1Compat"===r.compatMode&&a||o&&o[n]||a}}));var zt={position:"absolute",visibility:"hidden",display:"block"};function Wt(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r,o=t[0];return 0!==o.offsetWidth?r=Vt.apply(void 0,t):function(e,t,n){var r,o={},a=e.style;for(r in t)t.hasOwnProperty(r)&&(o[r]=a[r],a[r]=t[r]);for(r in n.call(e),t)t.hasOwnProperty(r)&&(a[r]=o[r])}(o,zt,(function(){r=Vt.apply(void 0,t)})),r}function Ht(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}Nt(["width","height"],(function(e){var t=e.charAt(0).toUpperCase()+e.slice(1);Bt["outer".concat(t)]=function(t,n){return t&&Wt(t,e,n?0:Ut)};var n="width"===e?["Left","Right"]:["Top","Bottom"];Bt[e]=function(t,r){var o=r;if(void 0===o)return t&&Wt(t,e,jt);if(t){pt(t);return Lt(t)&&(o+=It(t,["padding","border"],n)),vt(t,e,o)}}}));var Yt={getWindow:function(e){if(e&&e.document&&e.setTimeout)return e;var t=e.ownerDocument||e;return t.defaultView||t.parentWindow},getDocument:xt,offset:function(e,t,n){if(void 0===t)return Et(e);!function(e,t,n){if(n.ignoreShake){var r=Et(e),o=r.left.toFixed(0),a=r.top.toFixed(0),i=t.left.toFixed(0),l=t.top.toFixed(0);if(o===i&&a===l)return}n.useCssRight||n.useCssBottom?At(e,t,n):n.useCssTransform&&st()in document.body.style?Rt(e,t):At(e,t,n)}(e,t,n||{})},isWindow:wt,each:Nt,css:vt,clone:function(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);if(e.overflow)for(t in e)e.hasOwnProperty(t)&&(n.overflow[t]=e.overflow[t]);return n},mix:Ht,getWindowScrollLeft:function(e){return bt(e)},getWindowScrollTop:function(e){return gt(e)},merge:function(){for(var e={},t=0;t<arguments.length;t++)Yt.mix(e,t<0||arguments.length<=t?void 0:arguments[t]);return e},viewportWidth:0,viewportHeight:0};Ht(Yt,Bt);var Kt=Yt.getParent;function Xt(e){if(Yt.isWindow(e)||9===e.nodeType)return null;var t,n=Yt.getDocument(e).body,r=Yt.css(e,"position");if(!("fixed"===r||"absolute"===r))return"html"===e.nodeName.toLowerCase()?null:Kt(e);for(t=Kt(e);t&&t!==n;t=Kt(t))if("static"!==(r=Yt.css(t,"position")))return t;return null}var Gt=Yt.getParent;function Zt(e){for(var t={left:0,right:1/0,top:0,bottom:1/0},n=Xt(e),r=Yt.getDocument(e),o=r.defaultView||r.parentWindow,a=r.body,i=r.documentElement;n;){if(-1!==navigator.userAgent.indexOf("MSIE")&&0===n.clientWidth||n===a||n===i||"visible"===Yt.css(n,"overflow")){if(n===a||n===i)break}else{var l=Yt.offset(n);l.left+=n.clientLeft,l.top+=n.clientTop,t.top=Math.max(t.top,l.top),t.right=Math.min(t.right,l.left+n.clientWidth),t.bottom=Math.min(t.bottom,l.top+n.clientHeight),t.left=Math.max(t.left,l.left)}n=Xt(n)}var u=null;Yt.isWindow(e)||9===e.nodeType||(u=e.style.position,"absolute"===Yt.css(e,"position")&&(e.style.position="fixed"));var s=Yt.getWindowScrollLeft(o),c=Yt.getWindowScrollTop(o),f=Yt.viewportWidth(o),p=Yt.viewportHeight(o),d=i.scrollWidth,h=i.scrollHeight,m=window.getComputedStyle(a);if("hidden"===m.overflowX&&(d=o.innerWidth),"hidden"===m.overflowY&&(h=o.innerHeight),e.style&&(e.style.position=u),function(e){if(Yt.isWindow(e)||9===e.nodeType)return!1;var t=Yt.getDocument(e).body,n=null;for(n=Gt(e);n&&n!==t;n=Gt(n)){if("fixed"===Yt.css(n,"position"))return!0}return!1}(e))t.left=Math.max(t.left,s),t.top=Math.max(t.top,c),t.right=Math.min(t.right,s+f),t.bottom=Math.min(t.bottom,c+p);else{var v=Math.max(d,s+f);t.right=Math.min(t.right,v);var y=Math.max(h,c+p);t.bottom=Math.min(t.bottom,y)}return t.top>=0&&t.left>=0&&t.bottom>t.top&&t.right>t.left?t:null}function $t(e){var t,n,r;if(Yt.isWindow(e)||9===e.nodeType){var o=Yt.getWindow(e);t={left:Yt.getWindowScrollLeft(o),top:Yt.getWindowScrollTop(o)},n=Yt.viewportWidth(o),r=Yt.viewportHeight(o)}else t=Yt.offset(e),n=Yt.outerWidth(e),r=Yt.outerHeight(e);return t.width=n,t.height=r,t}function qt(e,t){var n=t.charAt(0),r=t.charAt(1),o=e.width,a=e.height,i=e.left,l=e.top;return"c"===n?l+=a/2:"b"===n&&(l+=a),"c"===r?i+=o/2:"r"===r&&(i+=o),{left:i,top:l}}function Qt(e,t,n,r,o){var a=qt(t,n[1]),i=qt(e,n[0]),l=[i.left-a.left,i.top-a.top];return{left:Math.round(e.left-l[0]+r[0]-o[0]),top:Math.round(e.top-l[1]+r[1]-o[1])}}function Jt(e,t,n){return e.left<n.left||e.left+t.width>n.right}function en(e,t,n){return e.top<n.top||e.top+t.height>n.bottom}function tn(e,t,n){var r=[];return Yt.each(e,(function(e){r.push(e.replace(t,(function(e){return n[e]})))})),r}function nn(e,t){return e[t]=-e[t],e}function rn(e,t){return(/%$/.test(e)?parseInt(e.substring(0,e.length-1),10)/100*t:parseInt(e,10))||0}function on(e,t){e[0]=rn(e[0],t.width),e[1]=rn(e[1],t.height)}function an(e,t,n,r){var o=n.points,a=n.offset||[0,0],i=n.targetOffset||[0,0],l=n.overflow,u=n.source||e;a=[].concat(a),i=[].concat(i),l=l||{};var s={},c=0,f=Zt(u),p=$t(u);on(a,p),on(i,t);var d=Qt(p,t,o,a,i),h=Yt.merge(p,d);if(f&&(l.adjustX||l.adjustY)&&r){if(l.adjustX&&Jt(d,p,f)){var m=tn(o,/[lr]/gi,{l:"r",r:"l"}),v=nn(a,0),y=nn(i,0);(function(e,t,n){return e.left>n.right||e.left+t.width<n.left})(Qt(p,t,m,v,y),p,f)||(c=1,o=m,a=v,i=y)}if(l.adjustY&&en(d,p,f)){var b=tn(o,/[tb]/gi,{t:"b",b:"t"}),g=nn(a,1),E=nn(i,1);(function(e,t,n){return e.top>n.bottom||e.top+t.height<n.top})(Qt(p,t,b,g,E),p,f)||(c=1,o=b,a=g,i=E)}c&&(d=Qt(p,t,o,a,i),Yt.mix(h,d));var w=Jt(d,p,f),x=en(d,p,f);(w||x)&&(o=n.points,a=n.offset||[0,0],i=n.targetOffset||[0,0]),s.adjustX=l.adjustX&&w,s.adjustY=l.adjustY&&x,(s.adjustX||s.adjustY)&&(h=function(e,t,n,r){var o=Yt.clone(e),a={width:t.width,height:t.height};return r.adjustX&&o.left<n.left&&(o.left=n.left),r.resizeWidth&&o.left>=n.left&&o.left+a.width>n.right&&(a.width-=o.left+a.width-n.right),r.adjustX&&o.left+a.width>n.right&&(o.left=Math.max(n.right-a.width,n.left)),r.adjustY&&o.top<n.top&&(o.top=n.top),r.resizeHeight&&o.top>=n.top&&o.top+a.height>n.bottom&&(a.height-=o.top+a.height-n.bottom),r.adjustY&&o.top+a.height>n.bottom&&(o.top=Math.max(n.bottom-a.height,n.top)),Yt.mix(o,a)}(d,p,f,s))}return h.width!==p.width&&Yt.css(u,"width",Yt.width(u)+h.width-p.width),h.height!==p.height&&Yt.css(u,"height",Yt.height(u)+h.height-p.height),Yt.offset(u,{left:h.left,top:h.top},{useCssRight:n.useCssRight,useCssBottom:n.useCssBottom,useCssTransform:n.useCssTransform,ignoreShake:n.ignoreShake}),{points:o,offset:a,targetOffset:i,overflow:s}}function ln(e,t,n){var r=n.target||t;return an(e,$t(r),n,!function(e){var t=Zt(e),n=$t(e);return!t||n.left+n.width<=t.left||n.top+n.height<=t.top||n.left>=t.right||n.top>=t.bottom}(r))}function un(e,t,n){var r,o,a=Yt.getDocument(e),i=a.defaultView||a.parentWindow,l=Yt.getWindowScrollLeft(i),u=Yt.getWindowScrollTop(i),s=Yt.viewportWidth(i),c=Yt.viewportHeight(i);r="pageX"in t?t.pageX:l+t.clientX,o="pageY"in t?t.pageY:u+t.clientY;var f=r>=0&&r<=l+s&&o>=0&&o<=u+c;return an(e,{left:r,top:o,width:0,height:0},function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?at(n,!0).forEach((function(t){ot(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):at(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},n,{points:[n.points[0],"cc"]}),f)}ln.__getOffsetParent=Xt,ln.__getVisibleRectForElement=Zt;function sn(e){return e&&"object"==typeof e&&e.window===e}function cn(e,t){var n=Math.floor(e),r=Math.floor(t);return Math.abs(n-r)<=1}function fn(e){return"function"==typeof e&&e?e():null}function pn(e){return"object"==typeof e&&e?e:null}var dn=function(e){function t(){var e,n,r,o;U()(this,t);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return n=r=z()(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r.forceAlign=function(){var e=r.props,t=e.disabled,n=e.target,o=e.align,a=e.onAlign;if(!t&&n){var i=m.a.findDOMNode(r),l=void 0,u=fn(n),s=pn(n),c=document.activeElement;u?l=ln(i,u,o):s&&(l=un(i,s,o)),function(e,t){e!==document.activeElement&&Ve(t,e)&&e.focus()}(c,i),a&&a(i,l)}},o=n,z()(r,o)}return H()(t,e),B()(t,[{key:"componentDidMount",value:function(){var e=this.props;this.forceAlign(),!e.disabled&&e.monitorWindowResize&&this.startMonitorWindowResize()}},{key:"componentDidUpdate",value:function(e){var t,n,r=!1,o=this.props;if(!o.disabled){var a=m.a.findDOMNode(this),i=a?a.getBoundingClientRect():null;if(e.disabled)r=!0;else{var l=fn(e.target),u=fn(o.target),s=pn(e.target),c=pn(o.target);sn(l)&&sn(u)?r=!1:(l!==u||l&&!u&&c||s&&c&&u||c&&!((t=s)===(n=c)||t&&n&&("pageX"in n&&"pageY"in n?t.pageX===n.pageX&&t.pageY===n.pageY:"clientX"in n&&"clientY"in n&&t.clientX===n.clientX&&t.clientY===n.clientY)))&&(r=!0);var f=this.sourceRect||{};r||!a||cn(f.width,i.width)&&cn(f.height,i.height)||(r=!0)}this.sourceRect=i}r&&this.forceAlign(),o.monitorWindowResize&&!o.disabled?this.startMonitorWindowResize():this.stopMonitorWindowResize()}},{key:"componentWillUnmount",value:function(){this.stopMonitorWindowResize()}},{key:"startMonitorWindowResize",value:function(){this.resizeHandler||(this.bufferMonitor=function(e,t){var n=void 0;function r(){n&&(clearTimeout(n),n=null)}function o(){r(),n=setTimeout(e,t)}return o.clear=r,o}(this.forceAlign,this.props.monitorBufferTime),this.resizeHandler=oe(window,"resize",this.bufferMonitor))}},{key:"stopMonitorWindowResize",value:function(){this.resizeHandler&&(this.bufferMonitor.clear(),this.resizeHandler.remove(),this.resizeHandler=null)}},{key:"render",value:function(){var e=this,t=this.props,n=t.childrenProps,r=t.children,o=d.a.Children.only(r);if(n){var a={};return Object.keys(n).forEach((function(t){a[t]=e.props[n[t]]})),d.a.cloneElement(o,a)}return o}}]),t}(p.Component);dn.propTypes={childrenProps:K.a.object,align:K.a.object.isRequired,target:K.a.oneOfType([K.a.func,K.a.shape({clientX:K.a.number,clientY:K.a.number,pageX:K.a.number,pageY:K.a.number})]),onAlign:K.a.func,monitorBufferTime:K.a.number,monitorWindowResize:K.a.bool,disabled:K.a.bool,children:K.a.any},dn.defaultProps={target:function(){return window},monitorBufferTime:50,monitorWindowResize:!1,disabled:!1};var hn=dn,mn=function(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");return"function"!=typeof t.componentWillReceiveProps?e:d.a.Profiler?(t.UNSAFE_componentWillReceiveProps=t.componentWillReceiveProps,delete t.componentWillReceiveProps,e):e};function vn(e){var t=[];return d.a.Children.forEach(e,(function(e){t.push(e)})),t}function yn(e,t){var n=null;return e&&e.forEach((function(e){n||e&&e.key===t&&(n=e)})),n}function bn(e,t,n){var r=null;return e&&e.forEach((function(e){if(e&&e.key===t&&e.props[n]){if(r)throw new Error("two child with same key for <rc-animate> children");r=e}})),r}var gn=n(36),En=n.n(gn),wn={transitionstart:{transition:"transitionstart",WebkitTransition:"webkitTransitionStart",MozTransition:"mozTransitionStart",OTransition:"oTransitionStart",msTransition:"MSTransitionStart"},animationstart:{animation:"animationstart",WebkitAnimation:"webkitAnimationStart",MozAnimation:"mozAnimationStart",OAnimation:"oAnimationStart",msAnimation:"MSAnimationStart"}},xn={transitionend:{transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"mozTransitionEnd",OTransition:"oTransitionEnd",msTransition:"MSTransitionEnd"},animationend:{animation:"animationend",WebkitAnimation:"webkitAnimationEnd",MozAnimation:"mozAnimationEnd",OAnimation:"oAnimationEnd",msAnimation:"MSAnimationEnd"}},Sn=[],Tn=[];function kn(e,t,n){e.addEventListener(t,n,!1)}function Cn(e,t,n){e.removeEventListener(t,n,!1)}"undefined"!=typeof window&&"undefined"!=typeof document&&function(){var e=document.createElement("div").style;function t(t,n){for(var r in t)if(t.hasOwnProperty(r)){var o=t[r];for(var a in o)if(a in e){n.push(o[a]);break}}}"AnimationEvent"in window||(delete wn.animationstart.animation,delete xn.animationend.animation),"TransitionEvent"in window||(delete wn.transitionstart.transition,delete xn.transitionend.transition),t(wn,Sn),t(xn,Tn)}();var Mn={startEvents:Sn,addStartEventListener:function(e,t){0!==Sn.length?Sn.forEach((function(n){kn(e,n,t)})):window.setTimeout(t,0)},removeStartEventListener:function(e,t){0!==Sn.length&&Sn.forEach((function(n){Cn(e,n,t)}))},endEvents:Tn,addEndEventListener:function(e,t){0!==Tn.length?Tn.forEach((function(n){kn(e,n,t)})):window.setTimeout(t,0)},removeEndEventListener:function(e,t){0!==Tn.length&&Tn.forEach((function(n){Cn(e,n,t)}))}},_n=n(69),Pn=n.n(_n),On=0!==Mn.endEvents.length,An=["Webkit","Moz","O","ms"],Rn=["-webkit-","-moz-","-o-","ms-",""];function Nn(e,t){for(var n=window.getComputedStyle(e,null),r="",o=0;o<Rn.length&&!(r=n.getPropertyValue(Rn[o]+t));o++);return r}function Ln(e){if(On){var t=parseFloat(Nn(e,"transition-delay"))||0,n=parseFloat(Nn(e,"transition-duration"))||0,r=parseFloat(Nn(e,"animation-delay"))||0,o=parseFloat(Nn(e,"animation-duration"))||0,a=Math.max(n+t,o+r);e.rcEndAnimTimeout=setTimeout((function(){e.rcEndAnimTimeout=null,e.rcEndListener&&e.rcEndListener()}),1e3*a+200)}}function Fn(e){e.rcEndAnimTimeout&&(clearTimeout(e.rcEndAnimTimeout),e.rcEndAnimTimeout=null)}var jn=function(e,t,n){var r="object"===(void 0===t?"undefined":En()(t)),o=r?t.name:t,a=r?t.active:t+"-active",i=n,l=void 0,u=void 0,s=Pn()(e);return n&&"[object Object]"===Object.prototype.toString.call(n)&&(i=n.end,l=n.start,u=n.active),e.rcEndListener&&e.rcEndListener(),e.rcEndListener=function(t){t&&t.target!==e||(e.rcAnimTimeout&&(clearTimeout(e.rcAnimTimeout),e.rcAnimTimeout=null),Fn(e),s.remove(o),s.remove(a),Mn.removeEndEventListener(e,e.rcEndListener),e.rcEndListener=null,i&&i())},Mn.addEndEventListener(e,e.rcEndListener),l&&l(),s.add(o),e.rcAnimTimeout=setTimeout((function(){e.rcAnimTimeout=null,s.add(a),u&&setTimeout(u,0),Ln(e)}),30),{stop:function(){e.rcEndListener&&e.rcEndListener()}}};jn.style=function(e,t,n){e.rcEndListener&&e.rcEndListener(),e.rcEndListener=function(t){t&&t.target!==e||(e.rcAnimTimeout&&(clearTimeout(e.rcAnimTimeout),e.rcAnimTimeout=null),Fn(e),Mn.removeEndEventListener(e,e.rcEndListener),e.rcEndListener=null,n&&n())},Mn.addEndEventListener(e,e.rcEndListener),e.rcAnimTimeout=setTimeout((function(){for(var n in t)t.hasOwnProperty(n)&&(e.style[n]=t[n]);e.rcAnimTimeout=null,Ln(e)}),0)},jn.setTransition=function(e,t,n){var r=t,o=n;void 0===n&&(o=r,r=""),r=r||"",An.forEach((function(t){e.style[t+"Transition"+r]=o}))},jn.isCssAnimationSupported=On;var Dn=jn,Un={isAppearSupported:function(e){return e.transitionName&&e.transitionAppear||e.animation.appear},isEnterSupported:function(e){return e.transitionName&&e.transitionEnter||e.animation.enter},isLeaveSupported:function(e){return e.transitionName&&e.transitionLeave||e.animation.leave},allowAppearCallback:function(e){return e.transitionAppear||e.animation.appear},allowEnterCallback:function(e){return e.transitionEnter||e.animation.enter},allowLeaveCallback:function(e){return e.transitionLeave||e.animation.leave}},In={enter:"transitionEnter",appear:"transitionAppear",leave:"transitionLeave"},Bn=function(e){function t(){return U()(this,t),z()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return H()(t,e),B()(t,[{key:"componentWillUnmount",value:function(){this.stop()}},{key:"componentWillEnter",value:function(e){Un.isEnterSupported(this.props)?this.transition("enter",e):e()}},{key:"componentWillAppear",value:function(e){Un.isAppearSupported(this.props)?this.transition("appear",e):e()}},{key:"componentWillLeave",value:function(e){Un.isLeaveSupported(this.props)?this.transition("leave",e):e()}},{key:"transition",value:function(e,t){var n=this,r=m.a.findDOMNode(this),o=this.props,a=o.transitionName,i="object"==typeof a;this.stop();var l=function(){n.stopper=null,t()};if((On||!o.animation[e])&&a&&o[In[e]]){var u=i?a[e]:a+"-"+e,s=u+"-active";i&&a[e+"Active"]&&(s=a[e+"Active"]),this.stopper=Dn(r,{name:u,active:s},l)}else this.stopper=o.animation[e](r,l)}},{key:"stop",value:function(){var e=this.stopper;e&&(this.stopper=null,e.stop())}},{key:"render",value:function(){return this.props.children}}]),t}(d.a.Component);Bn.propTypes={children:K.a.any,animation:K.a.any,transitionName:K.a.any};var Vn=Bn,zn="rc_animate_"+Date.now();function Wn(e){var t=e.children;return d.a.isValidElement(t)&&!t.key?d.a.cloneElement(t,{key:zn}):t}function Hn(){}var Yn=function(e){function t(e){U()(this,t);var n=z()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return Kn.call(n),n.currentlyAnimatingKeys={},n.keysToEnter=[],n.keysToLeave=[],n.state={children:vn(Wn(e))},n.childrenRefs={},n}return H()(t,e),B()(t,[{key:"componentDidMount",value:function(){var e=this,t=this.props.showProp,n=this.state.children;t&&(n=n.filter((function(e){return!!e.props[t]}))),n.forEach((function(t){t&&e.performAppear(t.key)}))}},{key:"componentWillReceiveProps",value:function(e){var t=this;this.nextProps=e;var n=vn(Wn(e)),r=this.props;r.exclusive&&Object.keys(this.currentlyAnimatingKeys).forEach((function(e){t.stop(e)}));var o,a,i,l,u=r.showProp,s=this.currentlyAnimatingKeys,c=r.exclusive?vn(Wn(r)):this.state.children,f=[];u?(c.forEach((function(e){var t=e&&yn(n,e.key),r=void 0;(r=t&&t.props[u]||!e.props[u]?t:d.a.cloneElement(t||e,$()({},u,!0)))&&f.push(r)})),n.forEach((function(e){e&&yn(c,e.key)||f.push(e)}))):(o=n,a=[],i={},l=[],c.forEach((function(e){e&&yn(o,e.key)?l.length&&(i[e.key]=l,l=[]):l.push(e)})),o.forEach((function(e){e&&Object.prototype.hasOwnProperty.call(i,e.key)&&(a=a.concat(i[e.key])),a.push(e)})),f=a=a.concat(l)),this.setState({children:f}),n.forEach((function(e){var n=e&&e.key;if(!e||!s[n]){var r=e&&yn(c,n);if(u){var o=e.props[u];if(r)!bn(c,n,u)&&o&&t.keysToEnter.push(n);else o&&t.keysToEnter.push(n)}else r||t.keysToEnter.push(n)}})),c.forEach((function(e){var r=e&&e.key;if(!e||!s[r]){var o=e&&yn(n,r);if(u){var a=e.props[u];if(o)!bn(n,r,u)&&a&&t.keysToLeave.push(r);else a&&t.keysToLeave.push(r)}else o||t.keysToLeave.push(r)}}))}},{key:"componentDidUpdate",value:function(){var e=this.keysToEnter;this.keysToEnter=[],e.forEach(this.performEnter);var t=this.keysToLeave;this.keysToLeave=[],t.forEach(this.performLeave)}},{key:"isValidChildByKey",value:function(e,t){var n=this.props.showProp;return n?bn(e,t,n):yn(e,t)}},{key:"stop",value:function(e){delete this.currentlyAnimatingKeys[e];var t=this.childrenRefs[e];t&&t.stop()}},{key:"render",value:function(){var e=this,t=this.props;this.nextProps=t;var n=this.state.children,r=null;n&&(r=n.map((function(n){if(null==n)return n;if(!n.key)throw new Error("must set key for <rc-animate> children");return d.a.createElement(Vn,{key:n.key,ref:function(t){e.childrenRefs[n.key]=t},animation:t.animation,transitionName:t.transitionName,transitionEnter:t.transitionEnter,transitionAppear:t.transitionAppear,transitionLeave:t.transitionLeave},n)})));var o=t.component;if(o){var a=t;return"string"==typeof o&&(a=j()({className:t.className,style:t.style},t.componentProps)),d.a.createElement(o,a,r)}return r[0]||null}}]),t}(d.a.Component);Yn.isAnimate=!0,Yn.propTypes={className:K.a.string,style:K.a.object,component:K.a.any,componentProps:K.a.object,animation:K.a.object,transitionName:K.a.oneOfType([K.a.string,K.a.object]),transitionEnter:K.a.bool,transitionAppear:K.a.bool,exclusive:K.a.bool,transitionLeave:K.a.bool,onEnd:K.a.func,onEnter:K.a.func,onLeave:K.a.func,onAppear:K.a.func,showProp:K.a.string,children:K.a.node},Yn.defaultProps={animation:{},component:"span",componentProps:{},transitionEnter:!0,transitionLeave:!0,transitionAppear:!1,onEnd:Hn,onEnter:Hn,onLeave:Hn,onAppear:Hn};var Kn=function(){var e=this;this.performEnter=function(t){e.childrenRefs[t]&&(e.currentlyAnimatingKeys[t]=!0,e.childrenRefs[t].componentWillEnter(e.handleDoneAdding.bind(e,t,"enter")))},this.performAppear=function(t){e.childrenRefs[t]&&(e.currentlyAnimatingKeys[t]=!0,e.childrenRefs[t].componentWillAppear(e.handleDoneAdding.bind(e,t,"appear")))},this.handleDoneAdding=function(t,n){var r=e.props;if(delete e.currentlyAnimatingKeys[t],!r.exclusive||r===e.nextProps){var o=vn(Wn(r));e.isValidChildByKey(o,t)?"appear"===n?Un.allowAppearCallback(r)&&(r.onAppear(t),r.onEnd(t,!0)):Un.allowEnterCallback(r)&&(r.onEnter(t),r.onEnd(t,!0)):e.performLeave(t)}},this.performLeave=function(t){e.childrenRefs[t]&&(e.currentlyAnimatingKeys[t]=!0,e.childrenRefs[t].componentWillLeave(e.handleDoneLeaving.bind(e,t)))},this.handleDoneLeaving=function(t){var n=e.props;if(delete e.currentlyAnimatingKeys[t],!n.exclusive||n===e.nextProps){var r,o,a,i,l=vn(Wn(n));if(e.isValidChildByKey(l,t))e.performEnter(t);else{var u=function(){Un.allowLeaveCallback(n)&&(n.onLeave(t),n.onEnd(t,!1))};r=e.state.children,o=l,a=n.showProp,(i=r.length===o.length)&&r.forEach((function(e,t){var n=o[t];e&&n&&(e&&!n||!e&&n?i=!1:e.key!==n.key?i=!1:a&&e.props[a]!==n.props[a]&&(i=!1))})),i?u():e.setState({children:l},u)}}}},Xn=mn(Yn),Gn=function(e){function t(){return U()(this,t),z()(this,e.apply(this,arguments))}return H()(t,e),t.prototype.shouldComponentUpdate=function(e){return e.hiddenClassName||e.visible},t.prototype.render=function(){var e=this.props,t=e.hiddenClassName,n=e.visible,r=J()(e,["hiddenClassName","visible"]);return t||d.a.Children.count(r.children)>1?(!n&&t&&(r.className+=" "+t),d.a.createElement("div",r)):d.a.Children.only(r.children)},t}(p.Component);Gn.propTypes={children:K.a.any,className:K.a.string,visible:K.a.bool,hiddenClassName:K.a.string};var Zn=Gn,$n=function(e){function t(){return U()(this,t),z()(this,e.apply(this,arguments))}return H()(t,e),t.prototype.render=function(){var e=this.props,t=e.className;return e.visible||(t+=" "+e.hiddenClassName),d.a.createElement("div",{className:t,onMouseEnter:e.onMouseEnter,onMouseLeave:e.onMouseLeave,onMouseDown:e.onMouseDown,onTouchStart:e.onTouchStart,style:e.style},d.a.createElement(Zn,{className:e.prefixCls+"-content",visible:e.visible},e.children))},t}(p.Component);$n.propTypes={hiddenClassName:K.a.string,className:K.a.string,prefixCls:K.a.string,onMouseEnter:K.a.func,onMouseLeave:K.a.func,onMouseDown:K.a.func,onTouchStart:K.a.func,children:K.a.any};var qn=$n,Qn=function(e){function t(n){U()(this,t);var r=z()(this,e.call(this,n));return Jn.call(r),r.state={stretchChecked:!1,targetWidth:void 0,targetHeight:void 0},r.savePopupRef=nt.bind(r,"popupInstance"),r.saveAlignRef=nt.bind(r,"alignInstance"),r}return H()(t,e),t.prototype.componentDidMount=function(){this.rootNode=this.getPopupDomNode(),this.setStretchSize()},t.prototype.componentDidUpdate=function(){this.setStretchSize()},t.prototype.getPopupDomNode=function(){return m.a.findDOMNode(this.popupInstance)},t.prototype.getMaskTransitionName=function(){var e=this.props,t=e.maskTransitionName,n=e.maskAnimation;return!t&&n&&(t=e.prefixCls+"-"+n),t},t.prototype.getTransitionName=function(){var e=this.props,t=e.transitionName;return!t&&e.animation&&(t=e.prefixCls+"-"+e.animation),t},t.prototype.getClassName=function(e){return this.props.prefixCls+" "+this.props.className+" "+e},t.prototype.getPopupElement=function(){var e=this,t=this.savePopupRef,n=this.state,r=n.stretchChecked,o=n.targetHeight,a=n.targetWidth,i=this.props,l=i.align,u=i.visible,s=i.prefixCls,c=i.style,f=i.getClassNameFromAlign,p=i.destroyPopupOnHide,h=i.stretch,m=i.children,v=i.onMouseEnter,y=i.onMouseLeave,b=i.onMouseDown,g=i.onTouchStart,E=this.getClassName(this.currentAlignClassName||f(l)),w=s+"-hidden";u||(this.currentAlignClassName=null);var x={};h&&(-1!==h.indexOf("height")?x.height=o:-1!==h.indexOf("minHeight")&&(x.minHeight=o),-1!==h.indexOf("width")?x.width=a:-1!==h.indexOf("minWidth")&&(x.minWidth=a),r||(x.visibility="hidden",setTimeout((function(){e.alignInstance&&e.alignInstance.forceAlign()}),0)));var S={className:E,prefixCls:s,ref:t,onMouseEnter:v,onMouseLeave:y,onMouseDown:b,onTouchStart:g,style:j()({},x,c,this.getZIndexStyle())};return p?d.a.createElement(Xn,{component:"",exclusive:!0,transitionAppear:!0,transitionName:this.getTransitionName()},u?d.a.createElement(hn,{target:this.getAlignTarget(),key:"popup",ref:this.saveAlignRef,monitorWindowResize:!0,align:l,onAlign:this.onAlign},d.a.createElement(qn,j()({visible:!0},S),m)):null):d.a.createElement(Xn,{component:"",exclusive:!0,transitionAppear:!0,transitionName:this.getTransitionName(),showProp:"xVisible"},d.a.createElement(hn,{target:this.getAlignTarget(),key:"popup",ref:this.saveAlignRef,monitorWindowResize:!0,xVisible:u,childrenProps:{visible:"xVisible"},disabled:!u,align:l,onAlign:this.onAlign},d.a.createElement(qn,j()({hiddenClassName:w},S),m)))},t.prototype.getZIndexStyle=function(){var e={},t=this.props;return void 0!==t.zIndex&&(e.zIndex=t.zIndex),e},t.prototype.getMaskElement=function(){var e=this.props,t=void 0;if(e.mask){var n=this.getMaskTransitionName();t=d.a.createElement(Zn,{style:this.getZIndexStyle(),key:"mask",className:e.prefixCls+"-mask",hiddenClassName:e.prefixCls+"-mask-hidden",visible:e.visible}),n&&(t=d.a.createElement(Xn,{key:"mask",showProp:"visible",transitionAppear:!0,component:"",transitionName:n},t))}return t},t.prototype.render=function(){return d.a.createElement("div",null,this.getMaskElement(),this.getPopupElement())},t}(p.Component);Qn.propTypes={visible:K.a.bool,style:K.a.object,getClassNameFromAlign:K.a.func,onAlign:K.a.func,getRootDomNode:K.a.func,align:K.a.any,destroyPopupOnHide:K.a.bool,className:K.a.string,prefixCls:K.a.string,onMouseEnter:K.a.func,onMouseLeave:K.a.func,onMouseDown:K.a.func,onTouchStart:K.a.func,stretch:K.a.string,children:K.a.node,point:K.a.shape({pageX:K.a.number,pageY:K.a.number})};var Jn=function(){var e=this;this.onAlign=function(t,n){var r=e.props,o=r.getClassNameFromAlign(n);e.currentAlignClassName!==o&&(e.currentAlignClassName=o,t.className=e.getClassName(o)),r.onAlign(t,n)},this.setStretchSize=function(){var t=e.props,n=t.stretch,r=t.getRootDomNode,o=t.visible,a=e.state,i=a.stretchChecked,l=a.targetHeight,u=a.targetWidth;if(n&&o){var s=r();if(s){var c=s.offsetHeight,f=s.offsetWidth;l===c&&u===f&&i||e.setState({stretchChecked:!0,targetHeight:c,targetWidth:f})}}else i&&e.setState({stretchChecked:!1})},this.getTargetElement=function(){return e.props.getRootDomNode()},this.getAlignTarget=function(){var t=e.props.point;return t||e.getTargetElement}},er=Qn;function tr(){}var nr=["onClick","onMouseDown","onTouchStart","onMouseEnter","onMouseLeave","onFocus","onBlur","onContextMenu"],rr=!!h.createPortal,or={rcTrigger:K.a.shape({onPopupMouseDown:K.a.func})},ar=function(e){function t(n){U()(this,t);var r=z()(this,e.call(this,n));ir.call(r);var o=void 0;return o="popupVisible"in n?!!n.popupVisible:!!n.defaultPopupVisible,r.state={prevPopupVisible:o,popupVisible:o},nr.forEach((function(e){r["fire"+e]=function(t){r.fireEvents(e,t)}})),r}return H()(t,e),t.prototype.getChildContext=function(){return{rcTrigger:{onPopupMouseDown:this.onPopupMouseDown}}},t.prototype.componentDidMount=function(){this.componentDidUpdate({},{popupVisible:this.state.popupVisible})},t.prototype.componentDidUpdate=function(e,t){var n=this.props,r=this.state;if(rr||this.renderComponent(null,(function(){t.popupVisible!==r.popupVisible&&n.afterPopupVisibleChange(r.popupVisible)})),r.popupVisible){var o=void 0;return this.clickOutsideHandler||!this.isClickToHide()&&!this.isContextMenuToShow()||(o=n.getDocument(),this.clickOutsideHandler=oe(o,"mousedown",this.onDocumentClick)),this.touchOutsideHandler||(o=o||n.getDocument(),this.touchOutsideHandler=oe(o,"touchstart",this.onDocumentClick)),!this.contextMenuOutsideHandler1&&this.isContextMenuToShow()&&(o=o||n.getDocument(),this.contextMenuOutsideHandler1=oe(o,"scroll",this.onContextMenuClose)),void(!this.contextMenuOutsideHandler2&&this.isContextMenuToShow()&&(this.contextMenuOutsideHandler2=oe(window,"blur",this.onContextMenuClose)))}this.clearOutsideHandler()},t.prototype.componentWillUnmount=function(){this.clearDelayTimer(),this.clearOutsideHandler(),clearTimeout(this.mouseDownTimeout)},t.getDerivedStateFromProps=function(e,t){var n=e.popupVisible,r={};return void 0!==n&&t.popupVisible!==n&&(r.popupVisible=n,r.prevPopupVisible=t.popupVisible),r},t.prototype.getPopupDomNode=function(){return this._component&&this._component.getPopupDomNode?this._component.getPopupDomNode():null},t.prototype.getPopupAlign=function(){var e=this.props,t=e.popupPlacement,n=e.popupAlign,r=e.builtinPlacements;return t&&r?function(e,t,n){var r=e[t]||{};return j()({},r,n)}(r,t,n):n},t.prototype.setPopupVisible=function(e,t){var n=this.props.alignPoint,r=this.state.popupVisible;this.clearDelayTimer(),r!==e&&("popupVisible"in this.props||this.setState({popupVisible:e,prevPopupVisible:r}),this.props.onPopupVisibleChange(e)),n&&t&&this.setPoint(t)},t.prototype.delaySetPopupVisible=function(e,t,n){var r=this,o=1e3*t;if(this.clearDelayTimer(),o){var a=n?{pageX:n.pageX,pageY:n.pageY}:null;this.delayTimer=setTimeout((function(){r.setPopupVisible(e,a),r.clearDelayTimer()}),o)}else this.setPopupVisible(e,n)},t.prototype.clearDelayTimer=function(){this.delayTimer&&(clearTimeout(this.delayTimer),this.delayTimer=null)},t.prototype.clearOutsideHandler=function(){this.clickOutsideHandler&&(this.clickOutsideHandler.remove(),this.clickOutsideHandler=null),this.contextMenuOutsideHandler1&&(this.contextMenuOutsideHandler1.remove(),this.contextMenuOutsideHandler1=null),this.contextMenuOutsideHandler2&&(this.contextMenuOutsideHandler2.remove(),this.contextMenuOutsideHandler2=null),this.touchOutsideHandler&&(this.touchOutsideHandler.remove(),this.touchOutsideHandler=null)},t.prototype.createTwoChains=function(e){var t=this.props.children.props,n=this.props;return t[e]&&n[e]?this["fire"+e]:t[e]||n[e]},t.prototype.isClickToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")},t.prototype.isContextMenuToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("contextMenu")||-1!==n.indexOf("contextMenu")},t.prototype.isClickToHide=function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")},t.prototype.isMouseEnterToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseEnter")},t.prototype.isMouseLeaveToHide=function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseLeave")},t.prototype.isFocusToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("focus")},t.prototype.isBlurToHide=function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("blur")},t.prototype.forcePopupAlign=function(){this.state.popupVisible&&this._component&&this._component.alignInstance&&this._component.alignInstance.forceAlign()},t.prototype.fireEvents=function(e,t){var n=this.props.children.props[e];n&&n(t);var r=this.props[e];r&&r(t)},t.prototype.close=function(){this.setPopupVisible(!1)},t.prototype.render=function(){var e=this,t=this.state.popupVisible,n=this.props,r=n.children,o=n.forceRender,a=n.alignPoint,i=n.className,l=d.a.Children.only(r),u={key:"trigger"};this.isContextMenuToShow()?u.onContextMenu=this.onContextMenu:u.onContextMenu=this.createTwoChains("onContextMenu"),this.isClickToHide()||this.isClickToShow()?(u.onClick=this.onClick,u.onMouseDown=this.onMouseDown,u.onTouchStart=this.onTouchStart):(u.onClick=this.createTwoChains("onClick"),u.onMouseDown=this.createTwoChains("onMouseDown"),u.onTouchStart=this.createTwoChains("onTouchStart")),this.isMouseEnterToShow()?(u.onMouseEnter=this.onMouseEnter,a&&(u.onMouseMove=this.onMouseMove)):u.onMouseEnter=this.createTwoChains("onMouseEnter"),this.isMouseLeaveToHide()?u.onMouseLeave=this.onMouseLeave:u.onMouseLeave=this.createTwoChains("onMouseLeave"),this.isFocusToShow()||this.isBlurToHide()?(u.onFocus=this.onFocus,u.onBlur=this.onBlur):(u.onFocus=this.createTwoChains("onFocus"),u.onBlur=this.createTwoChains("onBlur"));var s=ie()(l&&l.props&&l.props.className,i);s&&(u.className=s);var c=d.a.cloneElement(l,u);if(!rr)return d.a.createElement(Xe,{parent:this,visible:t,autoMount:!1,forceRender:o,getComponent:this.getComponent,getContainer:this.getContainer},(function(t){var n=t.renderComponent;return e.renderComponent=n,c}));var f=void 0;return(t||this._component||o)&&(f=d.a.createElement(et,{key:"portal",getContainer:this.getContainer,didUpdate:this.handlePortalUpdate},this.getComponent())),[c,f]},t}(d.a.Component);ar.propTypes={children:K.a.any,action:K.a.oneOfType([K.a.string,K.a.arrayOf(K.a.string)]),showAction:K.a.any,hideAction:K.a.any,getPopupClassNameFromAlign:K.a.any,onPopupVisibleChange:K.a.func,afterPopupVisibleChange:K.a.func,popup:K.a.oneOfType([K.a.node,K.a.func]).isRequired,popupStyle:K.a.object,prefixCls:K.a.string,popupClassName:K.a.string,className:K.a.string,popupPlacement:K.a.string,builtinPlacements:K.a.object,popupTransitionName:K.a.oneOfType([K.a.string,K.a.object]),popupAnimation:K.a.any,mouseEnterDelay:K.a.number,mouseLeaveDelay:K.a.number,zIndex:K.a.number,focusDelay:K.a.number,blurDelay:K.a.number,getPopupContainer:K.a.func,getDocument:K.a.func,forceRender:K.a.bool,destroyPopupOnHide:K.a.bool,mask:K.a.bool,maskClosable:K.a.bool,onPopupAlign:K.a.func,popupAlign:K.a.object,popupVisible:K.a.bool,defaultPopupVisible:K.a.bool,maskTransitionName:K.a.oneOfType([K.a.string,K.a.object]),maskAnimation:K.a.string,stretch:K.a.string,alignPoint:K.a.bool},ar.contextTypes=or,ar.childContextTypes=or,ar.defaultProps={prefixCls:"rc-trigger-popup",getPopupClassNameFromAlign:function(){return""},getDocument:function(){return window.document},onPopupVisibleChange:tr,afterPopupVisibleChange:tr,onPopupAlign:tr,popupClassName:"",mouseEnterDelay:0,mouseLeaveDelay:.1,focusDelay:0,blurDelay:.15,popupStyle:{},destroyPopupOnHide:!1,popupAlign:{},defaultPopupVisible:!1,mask:!1,maskClosable:!0,action:[],showAction:[],hideAction:[]};var ir=function(){var e=this;this.onMouseEnter=function(t){var n=e.props.mouseEnterDelay;e.fireEvents("onMouseEnter",t),e.delaySetPopupVisible(!0,n,n?null:t)},this.onMouseMove=function(t){e.fireEvents("onMouseMove",t),e.setPoint(t)},this.onMouseLeave=function(t){e.fireEvents("onMouseLeave",t),e.delaySetPopupVisible(!1,e.props.mouseLeaveDelay)},this.onPopupMouseEnter=function(){e.clearDelayTimer()},this.onPopupMouseLeave=function(t){t.relatedTarget&&!t.relatedTarget.setTimeout&&e._component&&e._component.getPopupDomNode&&Ve(e._component.getPopupDomNode(),t.relatedTarget)||e.delaySetPopupVisible(!1,e.props.mouseLeaveDelay)},this.onFocus=function(t){e.fireEvents("onFocus",t),e.clearDelayTimer(),e.isFocusToShow()&&(e.focusTime=Date.now(),e.delaySetPopupVisible(!0,e.props.focusDelay))},this.onMouseDown=function(t){e.fireEvents("onMouseDown",t),e.preClickTime=Date.now()},this.onTouchStart=function(t){e.fireEvents("onTouchStart",t),e.preTouchTime=Date.now()},this.onBlur=function(t){e.fireEvents("onBlur",t),e.clearDelayTimer(),e.isBlurToHide()&&e.delaySetPopupVisible(!1,e.props.blurDelay)},this.onContextMenu=function(t){t.preventDefault(),e.fireEvents("onContextMenu",t),e.setPopupVisible(!0,t)},this.onContextMenuClose=function(){e.isContextMenuToShow()&&e.close()},this.onClick=function(t){if(e.fireEvents("onClick",t),e.focusTime){var n=void 0;if(e.preClickTime&&e.preTouchTime?n=Math.min(e.preClickTime,e.preTouchTime):e.preClickTime?n=e.preClickTime:e.preTouchTime&&(n=e.preTouchTime),Math.abs(n-e.focusTime)<20)return;e.focusTime=0}e.preClickTime=0,e.preTouchTime=0,e.isClickToShow()&&(e.isClickToHide()||e.isBlurToHide())&&t&&t.preventDefault&&t.preventDefault();var r=!e.state.popupVisible;(e.isClickToHide()&&!r||r&&e.isClickToShow())&&e.setPopupVisible(!e.state.popupVisible,t)},this.onPopupMouseDown=function(){var t=e.context.rcTrigger,n=void 0===t?{}:t;e.hasPopupMouseDown=!0,clearTimeout(e.mouseDownTimeout),e.mouseDownTimeout=setTimeout((function(){e.hasPopupMouseDown=!1}),0),n.onPopupMouseDown&&n.onPopupMouseDown.apply(n,arguments)},this.onDocumentClick=function(t){if(!e.props.mask||e.props.maskClosable){var n=t.target;Ve(Object(h.findDOMNode)(e),n)||e.hasPopupMouseDown||e.close()}},this.getRootDomNode=function(){return Object(h.findDOMNode)(e)},this.getPopupClassNameFromAlign=function(t){var n=[],r=e.props,o=r.popupPlacement,a=r.builtinPlacements,i=r.prefixCls,l=r.alignPoint,u=r.getPopupClassNameFromAlign;return o&&a&&n.push(function(e,t,n,r){var o=n.points;for(var a in e)if(e.hasOwnProperty(a)&&tt(e[a].points,o,r))return t+"-placement-"+a;return""}(a,i,t,l)),u&&n.push(u(t)),n.join(" ")},this.getComponent=function(){var t=e.props,n=t.prefixCls,r=t.destroyPopupOnHide,o=t.popupClassName,a=t.action,i=t.onPopupAlign,l=t.popupAnimation,u=t.popupTransitionName,s=t.popupStyle,c=t.mask,f=t.maskAnimation,p=t.maskTransitionName,h=t.zIndex,m=t.popup,v=t.stretch,y=t.alignPoint,b=e.state,g=b.popupVisible,E=b.point,w=e.getPopupAlign(),x={};return e.isMouseEnterToShow()&&(x.onMouseEnter=e.onPopupMouseEnter),e.isMouseLeaveToHide()&&(x.onMouseLeave=e.onPopupMouseLeave),x.onMouseDown=e.onPopupMouseDown,x.onTouchStart=e.onPopupMouseDown,d.a.createElement(er,j()({prefixCls:n,destroyPopupOnHide:r,visible:g,point:y&&E,className:o,action:a,align:w,onAlign:i,animation:l,getClassNameFromAlign:e.getPopupClassNameFromAlign},x,{stretch:v,getRootDomNode:e.getRootDomNode,style:s,mask:c,zIndex:h,transitionName:u,maskAnimation:f,maskTransitionName:p,ref:e.savePopup}),"function"==typeof m?m():m)},this.getContainer=function(){var t=e.props,n=document.createElement("div");return n.style.position="absolute",n.style.top="0",n.style.left="0",n.style.width="100%",(t.getPopupContainer?t.getPopupContainer(Object(h.findDOMNode)(e)):t.getDocument().body).appendChild(n),n},this.setPoint=function(t){e.props.alignPoint&&t&&e.setState({point:{pageX:t.pageX,pageY:t.pageY}})},this.handlePortalUpdate=function(){e.state.prevPopupVisible!==e.state.popupVisible&&e.props.afterPopupVisibleChange(e.state.popupVisible)},this.savePopup=function(t){e._component=t}};Fe(ar);var lr=ar,ur={adjustX:1,adjustY:1},sr=[0,0],cr={left:{points:["cr","cl"],overflow:ur,offset:[-4,0],targetOffset:sr},right:{points:["cl","cr"],overflow:ur,offset:[4,0],targetOffset:sr},top:{points:["bc","tc"],overflow:ur,offset:[0,-4],targetOffset:sr},bottom:{points:["tc","bc"],overflow:ur,offset:[0,4],targetOffset:sr},topLeft:{points:["bl","tl"],overflow:ur,offset:[0,-4],targetOffset:sr},leftTop:{points:["tr","tl"],overflow:ur,offset:[-4,0],targetOffset:sr},topRight:{points:["br","tr"],overflow:ur,offset:[0,-4],targetOffset:sr},rightTop:{points:["tl","tr"],overflow:ur,offset:[4,0],targetOffset:sr},bottomRight:{points:["tr","br"],overflow:ur,offset:[0,4],targetOffset:sr},rightBottom:{points:["bl","br"],overflow:ur,offset:[4,0],targetOffset:sr},bottomLeft:{points:["tl","bl"],overflow:ur,offset:[0,4],targetOffset:sr},leftBottom:{points:["br","bl"],overflow:ur,offset:[-4,0],targetOffset:sr}},fr=function(e){function t(){return U()(this,t),z()(this,e.apply(this,arguments))}return H()(t,e),t.prototype.componentDidUpdate=function(){var e=this.props.trigger;e&&e.forcePopupAlign()},t.prototype.render=function(){var e=this.props,t=e.overlay,n=e.prefixCls,r=e.id;return d.a.createElement("div",{className:n+"-inner",id:r,role:"tooltip"},"function"==typeof t?t():t)},t}(d.a.Component);fr.propTypes={prefixCls:K.a.string,overlay:K.a.oneOfType([K.a.node,K.a.func]).isRequired,id:K.a.string,trigger:K.a.any};var pr=fr,dr=function(e){function t(){var n,r,o;U()(this,t);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return n=r=z()(this,e.call.apply(e,[this].concat(i))),r.getPopupElement=function(){var e=r.props,t=e.arrowContent,n=e.overlay,o=e.prefixCls,a=e.id;return[d.a.createElement("div",{className:o+"-arrow",key:"arrow"},t),d.a.createElement(pr,{key:"content",trigger:r.trigger,prefixCls:o,id:a,overlay:n})]},r.saveTrigger=function(e){r.trigger=e},o=n,z()(r,o)}return H()(t,e),t.prototype.getPopupDomNode=function(){return this.trigger.getPopupDomNode()},t.prototype.render=function(){var e=this.props,t=e.overlayClassName,n=e.trigger,r=e.mouseEnterDelay,o=e.mouseLeaveDelay,a=e.overlayStyle,i=e.prefixCls,l=e.children,u=e.onVisibleChange,s=e.afterVisibleChange,c=e.transitionName,f=e.animation,p=e.placement,h=e.align,m=e.destroyTooltipOnHide,v=e.defaultVisible,y=e.getTooltipContainer,b=J()(e,["overlayClassName","trigger","mouseEnterDelay","mouseLeaveDelay","overlayStyle","prefixCls","children","onVisibleChange","afterVisibleChange","transitionName","animation","placement","align","destroyTooltipOnHide","defaultVisible","getTooltipContainer"]),g=j()({},b);return"visible"in this.props&&(g.popupVisible=this.props.visible),d.a.createElement(lr,j()({popupClassName:t,ref:this.saveTrigger,prefixCls:i,popup:this.getPopupElement,action:n,builtinPlacements:cr,popupPlacement:p,popupAlign:h,getPopupContainer:y,onPopupVisibleChange:u,afterPopupVisibleChange:s,popupTransitionName:c,popupAnimation:f,defaultPopupVisible:v,destroyPopupOnHide:m,mouseLeaveDelay:o,popupStyle:a,mouseEnterDelay:r},g),l)},t}(p.Component);dr.propTypes={trigger:K.a.any,children:K.a.any,defaultVisible:K.a.bool,visible:K.a.bool,placement:K.a.string,transitionName:K.a.oneOfType([K.a.string,K.a.object]),animation:K.a.any,onVisibleChange:K.a.func,afterVisibleChange:K.a.func,overlay:K.a.oneOfType([K.a.node,K.a.func]).isRequired,overlayStyle:K.a.object,overlayClassName:K.a.string,prefixCls:K.a.string,mouseEnterDelay:K.a.number,mouseLeaveDelay:K.a.number,getTooltipContainer:K.a.func,destroyTooltipOnHide:K.a.bool,align:K.a.object,arrowContent:K.a.any,id:K.a.string},dr.defaultProps={prefixCls:"rc-tooltip",mouseEnterDelay:0,destroyTooltipOnHide:!1,mouseLeaveDelay:.1,align:{},placement:"right",trigger:["hover"],arrowContent:null};var hr=dr;Ae.Range=Be,Ae.Handle=pe,Ae.createSliderWithTooltip=function(e){var t,n;return n=t=function(t){function n(){var e,t,r,o;U()(this,n);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return t=r=z()(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),r.state={visibles:{}},r.handleTooltipVisibleChange=function(e,t){r.setState((function(n){return{visibles:j()({},n.visibles,$()({},e,t))}}))},r.handleWithTooltip=function(e){var t=e.value,n=e.dragging,o=e.index,a=e.disabled,i=J()(e,["value","dragging","index","disabled"]),l=r.props,u=l.tipFormatter,s=l.tipProps,c=l.handleStyle,f=s.prefixCls,p=void 0===f?"rc-slider-tooltip":f,h=s.overlay,m=void 0===h?u(t):h,v=s.placement,y=void 0===v?"top":v,b=s.visible,g=void 0!==b&&b,E=J()(s,["prefixCls","overlay","placement","visible"]),w=void 0;return w=Array.isArray(c)?c[o]||c[0]:c,d.a.createElement(hr,j()({},E,{prefixCls:p,overlay:m,placement:y,visible:!a&&(r.state.visibles[o]||n)||g,key:o}),d.a.createElement(pe,j()({},i,{style:j()({},w),value:t,onMouseEnter:function(){return r.handleTooltipVisibleChange(o,!0)},onMouseLeave:function(){return r.handleTooltipVisibleChange(o,!1)}})))},o=t,z()(r,o)}return H()(n,t),B()(n,[{key:"render",value:function(){return d.a.createElement(e,j()({},this.props,{handle:this.handleWithTooltip}))}}]),n}(d.a.Component),t.propTypes={tipFormatter:K.a.func,handleStyle:K.a.oneOfType([K.a.object,K.a.arrayOf(K.a.object)]),tipProps:K.a.object},t.defaultProps={tipFormatter:function(e){return e},handleStyle:[{}],tipProps:{}},n};var mr=Ae,vr=(n(35),n(70)),yr=n.n(vr);n(150);function br(e){return(br="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function gr(e){return(gr="function"==typeof Symbol&&"symbol"===br(Symbol.iterator)?function(e){return br(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":br(e)})(e)}function Er(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function wr(e){return(wr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function xr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Sr(e,t){return(Sr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Tr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function kr(){return(kr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Cr(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Mr=["precision mediump float;","","attribute vec2 vertPosition;","attribute vec3 vertColor;","varying vec3 fragColor;","","void main()","{","  fragColor = vertColor;","  gl_Position = vec4(vertPosition, 0.0, 1.0);","}"].join("\n"),_r=["precision mediump float;","","varying vec3 fragColor;","void main()","{","  gl_FragColor = vec4(fragColor, 1.0);","}"].join("\n"),Pr=((0,mr.createSliderWithTooltip)(mr.Range),mr.Handle),Or=function(e){var t=e.value,n=e.dragging,r=e.index,o=Cr(e,["value","dragging","index"]);return d.a.createElement(hr,{prefixCls:"rc-slider-tooltip",overlay:t,visible:n,placement:"top",key:r},d.a.createElement(Pr,kr({value:t},o)))},Ar=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==gr(t)&&"function"!=typeof t?xr(e):t}(this,wr(t).call(this,e)),Tr(xr(n),"shaderProgram",(function(e,t,n){var r=e.createProgram(),o=function(t,n){var o=e.createShader("vertex"===t?e.VERTEX_SHADER:e.FRAGMENT_SHADER);if(e.shaderSource(o,n),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS))throw"Could not compile "+t+" shader:\n\n"+e.getShaderInfoLog(o);e.attachShader(r,o)};if(o("vertex",t),o("fragment",n),e.linkProgram(r),!e.getProgramParameter(r,e.LINK_STATUS))throw"Could not link the shader program!";return r})),Tr(xr(n),"draw",(function(){try{var e=n.webGLCanvas.getContext("webgl");if(!e)throw"x"}catch(e){throw"Your web browser does not support WebGL!"}e.clearColor(.8,.8,.8,1),e.clear(e.COLOR_BUFFER_BIT);var t=n.shaderProgram(e,Mr,_r),r=[n.state.vertexContainer1.vertex.x,n.state.vertexContainer1.vertex.y,n.state.vertexContainer1.vertex.r,n.state.vertexContainer1.vertex.g,n.state.vertexContainer1.vertex.b,n.state.vertexContainer2.vertex.x,n.state.vertexContainer2.vertex.y,n.state.vertexContainer2.vertex.r,n.state.vertexContainer2.vertex.g,n.state.vertexContainer2.vertex.b,n.state.vertexContainer3.vertex.x,n.state.vertexContainer3.vertex.y,n.state.vertexContainer3.vertex.r,n.state.vertexContainer3.vertex.g,n.state.vertexContainer3.vertex.b,n.state.vertexContainer4.vertex.x,n.state.vertexContainer4.vertex.y,n.state.vertexContainer4.vertex.r,n.state.vertexContainer4.vertex.g,n.state.vertexContainer4.vertex.b,n.state.vertexContainer5.vertex.x,n.state.vertexContainer5.vertex.y,n.state.vertexContainer5.vertex.r,n.state.vertexContainer5.vertex.g,n.state.vertexContainer5.vertex.b],o=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,o),e.bufferData(e.ARRAY_BUFFER,new Float32Array(r),e.STATIC_DRAW);var a=e.getAttribLocation(t,"vertPosition"),i=e.getAttribLocation(t,"vertColor");e.vertexAttribPointer(a,2,e.FLOAT,e.FALSE,5*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(i,3,e.FLOAT,e.FALSE,5*Float32Array.BYTES_PER_ELEMENT,2*Float32Array.BYTES_PER_ELEMENT),e.enableVertexAttribArray(a),e.enableVertexAttribArray(i),e.useProgram(t),e.drawArrays(e.TRIANGLE_STRIP,0,5)})),Tr(xr(n),"init",(function(){try{n.draw()}catch(e){alert("Error: "+e)}})),Tr(xr(n),"handleKeyDown",(function(e){n.setState({eventKey:e}),"?"===e&&console.log("? pressed ! ")})),Tr(xr(n),"changeXV1",(function(e){n.state.vertexContainer1.vertex.x=e,n.draw()})),Tr(xr(n),"changeYV1",(function(e){n.state.vertexContainer1.vertex.y=e,n.draw()})),Tr(xr(n),"changeXV2",(function(e){n.state.vertexContainer2.vertex.x=e,n.draw()})),Tr(xr(n),"changeYV2",(function(e){n.state.vertexContainer2.vertex.y=e,n.draw()})),Tr(xr(n),"changeXV3",(function(e){n.state.vertexContainer3.vertex.x=e,n.draw()})),Tr(xr(n),"changeYV3",(function(e){n.state.vertexContainer3.vertex.y=e,n.draw()})),Tr(xr(n),"changeXV4",(function(e){n.state.vertexContainer4.vertex.x=e,n.draw()})),Tr(xr(n),"changeYV4",(function(e){n.state.vertexContainer4.vertex.y=e,n.draw()})),Tr(xr(n),"changeXV5",(function(e){n.state.vertexContainer5.vertex.x=e,n.draw()})),Tr(xr(n),"changeYV5",(function(e){n.state.vertexContainer5.vertex.y=e,n.draw()})),Tr(xr(n),"changeColorV1",(function(e){n.state.vertexContainer1.colorManipulator=e,n.state.vertexContainer1.vertex.r=1-n.state.vertexContainer1.colorManipulator,n.state.vertexContainer1.vertex.g=1-n.state.vertexContainer1.colorManipulator,n.state.vertexContainer1.vertex.b=0+n.state.vertexContainer1.colorManipulator,n.draw()})),Tr(xr(n),"changeColorV2",(function(e){n.state.vertexContainer2.colorManipulator=e,n.state.vertexContainer2.vertex.r=1-n.state.vertexContainer2.colorManipulator,n.state.vertexContainer2.vertex.g=0+n.state.vertexContainer2.colorManipulator,n.state.vertexContainer2.vertex.b=0+n.state.vertexContainer2.colorManipulator,n.draw()})),Tr(xr(n),"changeColorV3",(function(e){n.state.vertexContainer3.colorManipulator=e,n.state.vertexContainer3.vertex.r=0+n.state.vertexContainer3.colorManipulator,n.state.vertexContainer3.vertex.g=1-n.state.vertexContainer3.colorManipulator,n.state.vertexContainer3.vertex.b=1-n.state.vertexContainer3.colorManipulator,n.draw()})),Tr(xr(n),"changeColorV4",(function(e){n.state.vertexContainer4.colorManipulator=e,n.state.vertexContainer4.vertex.r=1-n.state.vertexContainer4.colorManipulator,n.state.vertexContainer4.vertex.g=0-n.state.vertexContainer4.colorManipulator,n.state.vertexContainer4.vertex.b=1-n.state.vertexContainer4.colorManipulator,n.draw()})),Tr(xr(n),"changeColorV5",(function(e){n.state.vertexContainer5.colorManipulator=e,n.state.vertexContainer5.vertex.r=1-n.state.vertexContainer5.colorManipulator,n.state.vertexContainer5.vertex.g=0+n.state.vertexContainer5.colorManipulator,n.state.vertexContainer5.vertex.b=0+n.state.vertexContainer5.colorManipulator,n.draw()})),Tr(xr(n),"propsAsString",(function(e){return function e(t,n,r){return Object.keys(t).map((function(o){void 0===n.get(t[o])&&n.set(t[o],0);var a=n.get(t[o]);if("object"===gr(t[o])&&null!==t[o]&&void 0!==t[o]&&a<r){var i=n.get(t[o]);return i++,n.set(t[o],i),e(t[o],n,r)}return o+" : "+t[o]})).join(" \n ")}(e,new yr.a,1)})),n.state={eventKey:" ",xMin:-1,xMax:1,yMin:-1,yMax:1,vertexContainer1:{vertex:{x:.56,y:.88,r:1,g:1,b:0},colorManipulator:-.5},vertexContainer2:{vertex:{x:-.6,y:.6,r:.5,g:0,b:1},colorManipulator:0},vertexContainer3:{vertex:{x:.6,y:-.6,r:.1,g:1,b:.8},colorManipulator:0},vertexContainer4:{vertex:{x:.6,y:.6,r:.3,g:.9,b:.8},colorManipulator:0},vertexContainer5:{vertex:{x:-.84,y:-.19,r:1,g:.2,b:0},colorManipulator:-.5}},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Sr(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.init()}},{key:"render",value:function(){var e=this,t={width:400,margin:10};return d.a.createElement("div",null,d.a.createElement("div",null,d.a.createElement("h2",null,"EA3")),d.a.createElement("div",{className:"rowC"},d.a.createElement("div",{className:"canvasBox"},d.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"})),d.a.createElement("div",{className:"sliderBox"},d.a.createElement("div",{style:t},"Vertex1 X Value:",d.a.createElement(mr,{min:this.state.xMin,max:this.state.xMax,defaultValue:this.state.vertexContainer1.vertex.x,step:.01,handle:Or,onChange:this.changeXV1})),d.a.createElement("div",{style:t},"Vertex1 Y Value:",d.a.createElement(mr,{min:this.state.yMin,max:this.state.yMax,defaultValue:this.state.vertexContainer1.vertex.y,step:.01,handle:Or,onChange:this.changeYV1})),d.a.createElement("div",{style:t},"Vertex1 Color",d.a.createElement(mr,{min:-.5,max:.5,defaultValue:this.state.vertexContainer1.colorManipulator,step:.001,handle:Or,onChange:this.changeColorV1})),d.a.createElement("div",{style:t},"Vertex2 X Value:",d.a.createElement(mr,{min:this.state.xMin,max:this.state.xMax,defaultValue:this.state.vertexContainer2.vertex.x,step:.01,handle:Or,onChange:this.changeXV2})),d.a.createElement("div",{style:t},"Vertex2 Y Value:",d.a.createElement(mr,{min:this.state.yMin,max:this.state.yMax,defaultValue:this.state.vertexContainer2.vertex.y,step:.01,handle:Or,onChange:this.changeYV2})),d.a.createElement("div",{style:t},"Vertex2 Color",d.a.createElement(mr,{min:-.5,max:.5,defaultValue:this.state.vertexContainer2.colorManipulator,step:.001,handle:Or,onChange:this.changeColorV2})),d.a.createElement("div",{style:t},"Vertex3 X Value:",d.a.createElement(mr,{min:this.state.xMin,max:this.state.xMax,defaultValue:this.state.vertexContainer3.vertex.x,step:.01,handle:Or,onChange:this.changeXV3})),d.a.createElement("div",{style:t},"Vertex3 Y Value:",d.a.createElement(mr,{min:this.state.yMin,max:this.state.yMax,defaultValue:this.state.vertexContainer3.vertex.y,step:.01,handle:Or,onChange:this.changeYV3})),d.a.createElement("div",{style:t},"Vertex3 Color",d.a.createElement(mr,{min:-.5,max:.5,defaultValue:this.state.vertexContainer3.colorManipulator,step:.001,handle:Or,onChange:this.changeColorV3})),d.a.createElement("div",{style:t},"Vertex4 X Value:",d.a.createElement(mr,{min:this.state.xMin,max:this.state.xMax,defaultValue:this.state.vertexContainer4.vertex.x,step:.01,handle:Or,onChange:this.changeXV4})),d.a.createElement("div",{style:t},"Vertex4 Y Value:",d.a.createElement(mr,{min:this.state.yMin,max:this.state.yMax,defaultValue:this.state.vertexContainer4.vertex.y,step:.01,handle:Or,onChange:this.changeYV4})),d.a.createElement("div",{style:t},"Vertex4 Color",d.a.createElement(mr,{min:-.5,max:.5,defaultValue:this.state.vertexContainer4.colorManipulator,step:.001,handle:Or,onChange:this.changeColorV4})),d.a.createElement("div",{style:t},"Vertex5 X Value:",d.a.createElement(mr,{min:this.state.xMin,max:this.state.xMax,defaultValue:this.state.vertexContainer5.vertex.x,step:.01,handle:Or,onChange:this.changeXV5})),d.a.createElement("div",{style:t},"Vertex5 Y Value:",d.a.createElement(mr,{min:this.state.yMin,max:this.state.yMax,defaultValue:this.state.vertexContainer5.vertex.y,step:.01,handle:Or,onChange:this.changeYV5})),d.a.createElement("div",{style:t},"Vertex5 Color",d.a.createElement(mr,{min:-.5,max:.5,defaultValue:this.state.vertexContainer5.colorManipulator,step:.001,handle:Or,onChange:this.changeColorV5})))),d.a.createElement("div",null,this.state.eventKey),d.a.createElement(b.a,{handleKeys:["?"],onKeyEvent:function(t,n){return e.handleKeyDown(t)}}),d.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&Er(n.prototype,r),o&&Er(n,o),t}(p.Component);Tr(Ar,"propTypes",{}),Tr(Ar,"defaultProps",{});var Rr=n(37),Nr=n.n(Rr);function Lr(e){return(Lr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Fr(e){return(Fr="function"==typeof Symbol&&"symbol"===Lr(Symbol.iterator)?function(e){return Lr(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":Lr(e)})(e)}function jr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Dr(e){return(Dr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ur(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ir(e,t){return(Ir=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Br(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Vr(){return(Vr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function zr(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Wr=1,Hr=mr.Handle,Yr=function(e){var t=e.value,n=e.dragging,r=e.index,o=zr(e,["value","dragging","index"]);return d.a.createElement(hr,{prefixCls:"rc-slider-tooltip",overlay:t,visible:n,placement:"top",key:r},d.a.createElement(Hr,Vr({value:t},o)))},Kr=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==Fr(t)&&"function"!=typeof t?Ur(e):t}(this,Dr(t).call(this,e)),Br(Ur(n),"handleCheckboxChange",(function(e){n.setState({checked:e}),e?n.init():n.draw()})),Br(Ur(n),"changeConstant",(function(e){n.setState({constant:e}),n.state.checked||n.draw()})),Br(Ur(n),"draw",(function(){try{var e=n.webGLCanvas.getContext("webgl");if(!e)throw"x"}catch(e){throw"Your web browser does not support WebGL!"}e.clearColor(0,0,0,1),e.frontFace(e.CCW),e.enable(e.CULL_FACE),e.cullFace(e.BACK);var t=e.createShader(e.VERTEX_SHADER);e.shaderSource(t,"attribute vec3 pos;attribute vec4 col;attribute float c;varying vec4 color;void main(){color = col;gl_Position = vec4(c * pos, 1);}"),e.compileShader(t);var r=e.createShader(e.FRAGMENT_SHADER);e.shaderSource(r,"precision mediump float;varying vec4 color;void main() {gl_FragColor = color;}"),e.compileShader(r);var o,a,i,l=e.createProgram();e.attachShader(l,t),e.attachShader(l,r),e.bindAttribLocation(l,0,"pos"),e.linkProgram(l),e.useProgram(l),function(){var e=100,t=100;o=new Float32Array(30603),a=new Uint16Array(4e4),i=new Uint16Array(6e4);for(var n=0,r=0,l=0,u=-1;l<=e;l++,u+=1)for(var s=0,c=-1;s<=t;s++,c+=1){var f=101*l+s,p=c,d=u,h=p*Math.cos(Math.cos(p))*Math.cos(d),m=p*Math.cos(Math.cos(p))*Math.sin(d),v=p*Math.sin(Math.cos(p));o[3*f]=h,o[3*f+1]=m,o[3*f+2]=v,s>0&&l>0&&(a[n++]=f-1,a[n++]=f),s>0&&l>0&&(a[n++]=f-101,a[n++]=f),s>0&&l>0&&(i[r++]=f,i[r++]=f-1,i[r++]=f-101,i[r++]=f-1,i[r++]=f-101-1,i[r++]=f-101)}}();var u=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,u),e.bufferData(e.ARRAY_BUFFER,o,e.STATIC_DRAW);var s=e.getAttribLocation(l,"pos");e.vertexAttribPointer(s,3,e.FLOAT,!1,0,0),e.enableVertexAttribArray(s);var c=e.getAttribLocation(l,"col"),f=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,f),e.bufferData(e.ELEMENT_ARRAY_BUFFER,a,e.STATIC_DRAW),f.numberOfElements=a.length,e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null);var p=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,p),e.bufferData(e.ELEMENT_ARRAY_BUFFER,i,e.STATIC_DRAW),p.numberOfElements=i.length,e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),e.clear(e.COLOR_BUFFER_BIT);var d=e.getAttribLocation(l,"c");e.vertexAttrib1f(d,n.state.constant),e.vertexAttrib4f(c,n.state.checked?Math.random(.5):.6,n.state.checked?Math.random(.5):.6,n.state.checked?Math.random(.5):.6,.8),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,p),e.drawElements(e.TRIANGLES,p.numberOfElements,e.UNSIGNED_SHORT,0),e.vertexAttrib4f(c,n.state.checked?Math.random(.5):.6,n.state.checked?Math.random(.5):.6,n.state.checked?Math.random(.5):.6,.7),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,f),e.drawElements(e.LINES,f.numberOfElements,e.UNSIGNED_SHORT,0)})),Br(Ur(n),"myLoop",(function(){setTimeout((function(){n.draw(),n.changeConstant(n.state.constant+1e-4),Wr++,n.state.checked?Wr<1e5&&n.myLoop():Wr=0}),100)})),Br(Ur(n),"init",(function(){try{n.myLoop()}catch(e){alert("Error: "+e)}})),n.state={constant:0,checked:!0},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ir(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.init(!0)}},{key:"render",value:function(){var e=this,t={width:400,margin:10};return d.a.createElement("div",null,d.a.createElement("div",null,d.a.createElement("h2",null,"EA4 1 - Wellenkugel")),d.a.createElement("div",{className:"rowC"},d.a.createElement("div",{className:"canvasBox"},d.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"}))),d.a.createElement("div",{style:t},"Zoom :",d.a.createElement(mr,{min:1e-8,max:.9,defaultValue:0,step:1e-5,handle:Yr,onChange:this.changeConstant})),d.a.createElement("div",{style:t},"Animation on?",d.a.createElement(Nr.a,{id:"Animation",color:"#884A88",size:"2",checked:this.state.checked,onChange:this.handleCheckboxChange})),d.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&jr(n.prototype,r),o&&jr(n,o),t}(p.Component);function Xr(e){return(Xr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Gr(e){return(Gr="function"==typeof Symbol&&"symbol"===Xr(Symbol.iterator)?function(e){return Xr(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":Xr(e)})(e)}function Zr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $r(e){return($r=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function qr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Qr(e,t){return(Qr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Jr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function eo(){return(eo=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function to(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}Br(Kr,"propTypes",{}),Br(Kr,"defaultProps",{});var no=1,ro=mr.Handle,oo=function(e){var t=e.value,n=e.dragging,r=e.index,o=to(e,["value","dragging","index"]);return d.a.createElement(hr,{prefixCls:"rc-slider-tooltip",overlay:t,visible:n,placement:"top",key:r},d.a.createElement(ro,eo({value:t},o)))},ao=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==Gr(t)&&"function"!=typeof t?qr(e):t}(this,$r(t).call(this,e)),Jr(qr(n),"handleCheckboxChange",(function(e){n.setState({checked:e}),e?n.init():n.draw()})),Jr(qr(n),"changeConstant",(function(e){n.setState({constant:e}),n.state.checked||n.draw()})),Jr(qr(n),"changeParameter",(function(e){n.setState({parameter:e}),n.state.checked||n.draw()})),Jr(qr(n),"draw",(function(){try{var e=n.webGLCanvas.getContext("webgl");if(!e)throw"x"}catch(e){throw"Your web browser does not support WebGL!"}e.clearColor(Math.random(.2),Math.random(.2),Math.random(.2),.5),e.frontFace(e.CCW),e.enable(e.CULL_FACE),e.cullFace(e.BACK);var t=e.createShader(e.VERTEX_SHADER);e.shaderSource(t,"attribute vec3 pos;attribute vec4 col;attribute float c;varying vec4 color;void main(){color = col;gl_Position = vec4(c * pos, 1);}"),e.compileShader(t);var r=e.createShader(e.FRAGMENT_SHADER);e.shaderSource(r,"precision mediump float;varying vec4 color;void main() {gl_FragColor = color;}"),e.compileShader(r);var o,a,i,l=e.createProgram();e.attachShader(l,t),e.attachShader(l,r),e.bindAttribLocation(l,0,"pos"),e.linkProgram(l),e.useProgram(l);var u=n.createVertexData(o,a,i);o=u.vertices,a=u.indicesLines,i=u.indicesTris;var s=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,s),e.bufferData(e.ARRAY_BUFFER,o,e.STATIC_DRAW);var c=e.getAttribLocation(l,"pos");e.vertexAttribPointer(c,3,e.FLOAT,!1,0,0),e.enableVertexAttribArray(c);var f=e.getAttribLocation(l,"col"),p=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,p),e.bufferData(e.ELEMENT_ARRAY_BUFFER,a,e.STATIC_DRAW),p.numberOfElements=a.length,e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null);var d=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,d),e.bufferData(e.ELEMENT_ARRAY_BUFFER,i,e.STATIC_DRAW),d.numberOfElements=i.length,e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),e.clear(e.COLOR_BUFFER_BIT);var h=e.getAttribLocation(l,"c");e.vertexAttrib1f(h,n.state.constant),e.vertexAttrib4f(f,Math.random(.5),Math.random(.5),Math.random(.5),1),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,d),e.drawElements(e.TRIANGLES,d.numberOfElements,e.UNSIGNED_SHORT,0),e.vertexAttrib4f(f,Math.random(.5),Math.random(.5),Math.random(.5),1),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,p),e.drawElements(e.LINES,p.numberOfElements,e.UNSIGNED_SHORT,0)})),Jr(qr(n),"createVertexData",(function(e,t,r){var o=100,a=100;e=new Float32Array(30603),t=new Uint16Array(4e4),r=new Uint16Array(6e4);for(var i=0,l=0,u=0,s=-Math.PI;u<=o;u++,s+=.1)for(var c=0,f=Math.PI;c<=a;c++,f+=.1){var p=s,d=f,h=101*u+c,m=2*Math.sin(3*p)/(2+Math.cos(d*n.state.parameter)),v=2*(Math.sin(p)+2*Math.sin(2*p*n.state.parameter))/(2+Math.cos(d*n.state.parameter+2*Math.PI/3)),y=(Math.cos(p)-2*Math.cos(2*p))*(2+Math.cos(d))*(2+Math.cos(d+2*Math.PI))/4;e[3*h]=m,e[3*h+1]=v,e[3*h+2]=y,c>0&&u>0&&(t[i++]=h-1,t[i++]=h),c>0&&u>0&&(t[i++]=h-101,t[i++]=h),c>0&&u>0&&(r[l++]=h,r[l++]=h-1,r[l++]=h-101,r[l++]=h-1,r[l++]=h-101-1,r[l++]=h-101)}return{vertices:e,indicesLines:t,indicesTris:r}})),Jr(qr(n),"myLoop",(function(){setTimeout((function(){n.draw(),n.changeParameter(n.state.parameter+.001),n.changeConstant(n.state.constant-.01),no++,n.state.checked?no<1e5&&n.myLoop():no=0}),100)})),Jr(qr(n),"init",(function(){try{n.myLoop()}catch(e){alert("Error: "+e)}})),n.state={constant:1,parameter:0,checked:!0},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Qr(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.init()}},{key:"render",value:function(){var e=this,t={width:400,margin:10};return d.a.createElement("div",null,d.a.createElement("div",null,d.a.createElement("h2",null,"EA4 2 - Tranguloid Trefoil (with extra parameter)")),d.a.createElement("div",{className:"rowC"},d.a.createElement("div",{className:"canvasBox"},d.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"}))),d.a.createElement("div",{style:t},"Zoom :",d.a.createElement(mr,{min:.001,max:2,defaultValue:1,step:.001,handle:oo,onChange:this.changeConstant})),d.a.createElement("div",{style:t},"Parameter :",d.a.createElement(mr,{min:1e-6,max:4,defaultValue:0,step:1e-6,handle:oo,onChange:this.changeParameter})),d.a.createElement("div",{style:t},"Animation on?",d.a.createElement(Nr.a,{id:"Animation",color:"#884A88",size:"2",checked:this.state.checked,onChange:this.handleCheckboxChange})),d.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&Zr(n.prototype,r),o&&Zr(n,o),t}(p.Component);Jr(ao,"propTypes",{}),Jr(ao,"defaultProps",{});n(152);var io=1e-6,lo="undefined"!=typeof Float32Array?Float32Array:Array;Math.random;Math.PI;function uo(){var e=new lo(16);return lo!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function so(e){var t=new lo(16);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function co(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function fo(e,t,n,r,o,a,i,l,u,s,c,f,p,d,h,m){var v=new lo(16);return v[0]=e,v[1]=t,v[2]=n,v[3]=r,v[4]=o,v[5]=a,v[6]=i,v[7]=l,v[8]=u,v[9]=s,v[10]=c,v[11]=f,v[12]=p,v[13]=d,v[14]=h,v[15]=m,v}function po(e,t,n,r,o,a,i,l,u,s,c,f,p,d,h,m,v){return e[0]=t,e[1]=n,e[2]=r,e[3]=o,e[4]=a,e[5]=i,e[6]=l,e[7]=u,e[8]=s,e[9]=c,e[10]=f,e[11]=p,e[12]=d,e[13]=h,e[14]=m,e[15]=v,e}function ho(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function mo(e,t){if(e===t){var n=t[1],r=t[2],o=t[3],a=t[6],i=t[7],l=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=n,e[6]=t[9],e[7]=t[13],e[8]=r,e[9]=a,e[11]=t[14],e[12]=o,e[13]=i,e[14]=l}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function vo(e,t){var n=t[0],r=t[1],o=t[2],a=t[3],i=t[4],l=t[5],u=t[6],s=t[7],c=t[8],f=t[9],p=t[10],d=t[11],h=t[12],m=t[13],v=t[14],y=t[15],b=n*l-r*i,g=n*u-o*i,E=n*s-a*i,w=r*u-o*l,x=r*s-a*l,S=o*s-a*u,T=c*m-f*h,k=c*v-p*h,C=c*y-d*h,M=f*v-p*m,_=f*y-d*m,P=p*y-d*v,O=b*P-g*_+E*M+w*C-x*k+S*T;return O?(O=1/O,e[0]=(l*P-u*_+s*M)*O,e[1]=(o*_-r*P-a*M)*O,e[2]=(m*S-v*x+y*w)*O,e[3]=(p*x-f*S-d*w)*O,e[4]=(u*C-i*P-s*k)*O,e[5]=(n*P-o*C+a*k)*O,e[6]=(v*E-h*S-y*g)*O,e[7]=(c*S-p*E+d*g)*O,e[8]=(i*_-l*C+s*T)*O,e[9]=(r*C-n*_-a*T)*O,e[10]=(h*x-m*E+y*b)*O,e[11]=(f*E-c*x-d*b)*O,e[12]=(l*k-i*M-u*T)*O,e[13]=(n*M-r*k+o*T)*O,e[14]=(m*g-h*w-v*b)*O,e[15]=(c*w-f*g+p*b)*O,e):null}function yo(e,t){var n=t[0],r=t[1],o=t[2],a=t[3],i=t[4],l=t[5],u=t[6],s=t[7],c=t[8],f=t[9],p=t[10],d=t[11],h=t[12],m=t[13],v=t[14],y=t[15];return e[0]=l*(p*y-d*v)-f*(u*y-s*v)+m*(u*d-s*p),e[1]=-(r*(p*y-d*v)-f*(o*y-a*v)+m*(o*d-a*p)),e[2]=r*(u*y-s*v)-l*(o*y-a*v)+m*(o*s-a*u),e[3]=-(r*(u*d-s*p)-l*(o*d-a*p)+f*(o*s-a*u)),e[4]=-(i*(p*y-d*v)-c*(u*y-s*v)+h*(u*d-s*p)),e[5]=n*(p*y-d*v)-c*(o*y-a*v)+h*(o*d-a*p),e[6]=-(n*(u*y-s*v)-i*(o*y-a*v)+h*(o*s-a*u)),e[7]=n*(u*d-s*p)-i*(o*d-a*p)+c*(o*s-a*u),e[8]=i*(f*y-d*m)-c*(l*y-s*m)+h*(l*d-s*f),e[9]=-(n*(f*y-d*m)-c*(r*y-a*m)+h*(r*d-a*f)),e[10]=n*(l*y-s*m)-i*(r*y-a*m)+h*(r*s-a*l),e[11]=-(n*(l*d-s*f)-i*(r*d-a*f)+c*(r*s-a*l)),e[12]=-(i*(f*v-p*m)-c*(l*v-u*m)+h*(l*p-u*f)),e[13]=n*(f*v-p*m)-c*(r*v-o*m)+h*(r*p-o*f),e[14]=-(n*(l*v-u*m)-i*(r*v-o*m)+h*(r*u-o*l)),e[15]=n*(l*p-u*f)-i*(r*p-o*f)+c*(r*u-o*l),e}function bo(e){var t=e[0],n=e[1],r=e[2],o=e[3],a=e[4],i=e[5],l=e[6],u=e[7],s=e[8],c=e[9],f=e[10],p=e[11],d=e[12],h=e[13],m=e[14],v=e[15];return(t*i-n*a)*(f*v-p*m)-(t*l-r*a)*(c*v-p*h)+(t*u-o*a)*(c*m-f*h)+(n*l-r*i)*(s*v-p*d)-(n*u-o*i)*(s*m-f*d)+(r*u-o*l)*(s*h-c*d)}function go(e,t,n){var r=t[0],o=t[1],a=t[2],i=t[3],l=t[4],u=t[5],s=t[6],c=t[7],f=t[8],p=t[9],d=t[10],h=t[11],m=t[12],v=t[13],y=t[14],b=t[15],g=n[0],E=n[1],w=n[2],x=n[3];return e[0]=g*r+E*l+w*f+x*m,e[1]=g*o+E*u+w*p+x*v,e[2]=g*a+E*s+w*d+x*y,e[3]=g*i+E*c+w*h+x*b,g=n[4],E=n[5],w=n[6],x=n[7],e[4]=g*r+E*l+w*f+x*m,e[5]=g*o+E*u+w*p+x*v,e[6]=g*a+E*s+w*d+x*y,e[7]=g*i+E*c+w*h+x*b,g=n[8],E=n[9],w=n[10],x=n[11],e[8]=g*r+E*l+w*f+x*m,e[9]=g*o+E*u+w*p+x*v,e[10]=g*a+E*s+w*d+x*y,e[11]=g*i+E*c+w*h+x*b,g=n[12],E=n[13],w=n[14],x=n[15],e[12]=g*r+E*l+w*f+x*m,e[13]=g*o+E*u+w*p+x*v,e[14]=g*a+E*s+w*d+x*y,e[15]=g*i+E*c+w*h+x*b,e}function Eo(e,t,n){var r,o,a,i,l,u,s,c,f,p,d,h,m=n[0],v=n[1],y=n[2];return t===e?(e[12]=t[0]*m+t[4]*v+t[8]*y+t[12],e[13]=t[1]*m+t[5]*v+t[9]*y+t[13],e[14]=t[2]*m+t[6]*v+t[10]*y+t[14],e[15]=t[3]*m+t[7]*v+t[11]*y+t[15]):(r=t[0],o=t[1],a=t[2],i=t[3],l=t[4],u=t[5],s=t[6],c=t[7],f=t[8],p=t[9],d=t[10],h=t[11],e[0]=r,e[1]=o,e[2]=a,e[3]=i,e[4]=l,e[5]=u,e[6]=s,e[7]=c,e[8]=f,e[9]=p,e[10]=d,e[11]=h,e[12]=r*m+l*v+f*y+t[12],e[13]=o*m+u*v+p*y+t[13],e[14]=a*m+s*v+d*y+t[14],e[15]=i*m+c*v+h*y+t[15]),e}function wo(e,t,n){var r=n[0],o=n[1],a=n[2];return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*o,e[5]=t[5]*o,e[6]=t[6]*o,e[7]=t[7]*o,e[8]=t[8]*a,e[9]=t[9]*a,e[10]=t[10]*a,e[11]=t[11]*a,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function xo(e,t,n,r){var o,a,i,l,u,s,c,f,p,d,h,m,v,y,b,g,E,w,x,S,T,k,C,M,_=r[0],P=r[1],O=r[2],A=Math.hypot(_,P,O);return A<io?null:(_*=A=1/A,P*=A,O*=A,o=Math.sin(n),i=1-(a=Math.cos(n)),l=t[0],u=t[1],s=t[2],c=t[3],f=t[4],p=t[5],d=t[6],h=t[7],m=t[8],v=t[9],y=t[10],b=t[11],g=_*_*i+a,E=P*_*i+O*o,w=O*_*i-P*o,x=_*P*i-O*o,S=P*P*i+a,T=O*P*i+_*o,k=_*O*i+P*o,C=P*O*i-_*o,M=O*O*i+a,e[0]=l*g+f*E+m*w,e[1]=u*g+p*E+v*w,e[2]=s*g+d*E+y*w,e[3]=c*g+h*E+b*w,e[4]=l*x+f*S+m*T,e[5]=u*x+p*S+v*T,e[6]=s*x+d*S+y*T,e[7]=c*x+h*S+b*T,e[8]=l*k+f*C+m*M,e[9]=u*k+p*C+v*M,e[10]=s*k+d*C+y*M,e[11]=c*k+h*C+b*M,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}function So(e,t,n){var r=Math.sin(n),o=Math.cos(n),a=t[4],i=t[5],l=t[6],u=t[7],s=t[8],c=t[9],f=t[10],p=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=a*o+s*r,e[5]=i*o+c*r,e[6]=l*o+f*r,e[7]=u*o+p*r,e[8]=s*o-a*r,e[9]=c*o-i*r,e[10]=f*o-l*r,e[11]=p*o-u*r,e}function To(e,t,n){var r=Math.sin(n),o=Math.cos(n),a=t[0],i=t[1],l=t[2],u=t[3],s=t[8],c=t[9],f=t[10],p=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=a*o-s*r,e[1]=i*o-c*r,e[2]=l*o-f*r,e[3]=u*o-p*r,e[8]=a*r+s*o,e[9]=i*r+c*o,e[10]=l*r+f*o,e[11]=u*r+p*o,e}function ko(e,t,n){var r=Math.sin(n),o=Math.cos(n),a=t[0],i=t[1],l=t[2],u=t[3],s=t[4],c=t[5],f=t[6],p=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=a*o+s*r,e[1]=i*o+c*r,e[2]=l*o+f*r,e[3]=u*o+p*r,e[4]=s*o-a*r,e[5]=c*o-i*r,e[6]=f*o-l*r,e[7]=p*o-u*r,e}function Co(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}function Mo(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function _o(e,t,n){var r,o,a,i=n[0],l=n[1],u=n[2],s=Math.hypot(i,l,u);return s<io?null:(i*=s=1/s,l*=s,u*=s,r=Math.sin(t),a=1-(o=Math.cos(t)),e[0]=i*i*a+o,e[1]=l*i*a+u*r,e[2]=u*i*a-l*r,e[3]=0,e[4]=i*l*a-u*r,e[5]=l*l*a+o,e[6]=u*l*a+i*r,e[7]=0,e[8]=i*u*a+l*r,e[9]=l*u*a-i*r,e[10]=u*u*a+o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e)}function Po(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=r,e[6]=n,e[7]=0,e[8]=0,e[9]=-n,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function Oo(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=0,e[2]=-n,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=n,e[9]=0,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function Ao(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[2]=0,e[3]=0,e[4]=-n,e[5]=r,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function Ro(e,t,n){var r=t[0],o=t[1],a=t[2],i=t[3],l=r+r,u=o+o,s=a+a,c=r*l,f=r*u,p=r*s,d=o*u,h=o*s,m=a*s,v=i*l,y=i*u,b=i*s;return e[0]=1-(d+m),e[1]=f+b,e[2]=p-y,e[3]=0,e[4]=f-b,e[5]=1-(c+m),e[6]=h+v,e[7]=0,e[8]=p+y,e[9]=h-v,e[10]=1-(c+d),e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}function No(e,t){var n=new lo(3),r=-t[0],o=-t[1],a=-t[2],i=t[3],l=t[4],u=t[5],s=t[6],c=t[7],f=r*r+o*o+a*a+i*i;return f>0?(n[0]=2*(l*i+c*r+u*a-s*o)/f,n[1]=2*(u*i+c*o+s*r-l*a)/f,n[2]=2*(s*i+c*a+l*o-u*r)/f):(n[0]=2*(l*i+c*r+u*a-s*o),n[1]=2*(u*i+c*o+s*r-l*a),n[2]=2*(s*i+c*a+l*o-u*r)),Ro(e,t,n),e}function Lo(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function Fo(e,t){var n=t[0],r=t[1],o=t[2],a=t[4],i=t[5],l=t[6],u=t[8],s=t[9],c=t[10];return e[0]=Math.hypot(n,r,o),e[1]=Math.hypot(a,i,l),e[2]=Math.hypot(u,s,c),e}function jo(e,t){var n=new lo(3);Fo(n,t);var r=1/n[0],o=1/n[1],a=1/n[2],i=t[0]*r,l=t[1]*o,u=t[2]*a,s=t[4]*r,c=t[5]*o,f=t[6]*a,p=t[8]*r,d=t[9]*o,h=t[10]*a,m=i+c+h,v=0;return m>0?(v=2*Math.sqrt(m+1),e[3]=.25*v,e[0]=(f-d)/v,e[1]=(p-u)/v,e[2]=(l-s)/v):i>c&&i>h?(v=2*Math.sqrt(1+i-c-h),e[3]=(f-d)/v,e[0]=.25*v,e[1]=(l+s)/v,e[2]=(p+u)/v):c>h?(v=2*Math.sqrt(1+c-i-h),e[3]=(p-u)/v,e[0]=(l+s)/v,e[1]=.25*v,e[2]=(f+d)/v):(v=2*Math.sqrt(1+h-i-c),e[3]=(l-s)/v,e[0]=(p+u)/v,e[1]=(f+d)/v,e[2]=.25*v),e}function Do(e,t,n,r){var o=t[0],a=t[1],i=t[2],l=t[3],u=o+o,s=a+a,c=i+i,f=o*u,p=o*s,d=o*c,h=a*s,m=a*c,v=i*c,y=l*u,b=l*s,g=l*c,E=r[0],w=r[1],x=r[2];return e[0]=(1-(h+v))*E,e[1]=(p+g)*E,e[2]=(d-b)*E,e[3]=0,e[4]=(p-g)*w,e[5]=(1-(f+v))*w,e[6]=(m+y)*w,e[7]=0,e[8]=(d+b)*x,e[9]=(m-y)*x,e[10]=(1-(f+h))*x,e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}function Uo(e,t,n,r,o){var a=t[0],i=t[1],l=t[2],u=t[3],s=a+a,c=i+i,f=l+l,p=a*s,d=a*c,h=a*f,m=i*c,v=i*f,y=l*f,b=u*s,g=u*c,E=u*f,w=r[0],x=r[1],S=r[2],T=o[0],k=o[1],C=o[2],M=(1-(m+y))*w,_=(d+E)*w,P=(h-g)*w,O=(d-E)*x,A=(1-(p+y))*x,R=(v+b)*x,N=(h+g)*S,L=(v-b)*S,F=(1-(p+m))*S;return e[0]=M,e[1]=_,e[2]=P,e[3]=0,e[4]=O,e[5]=A,e[6]=R,e[7]=0,e[8]=N,e[9]=L,e[10]=F,e[11]=0,e[12]=n[0]+T-(M*T+O*k+N*C),e[13]=n[1]+k-(_*T+A*k+L*C),e[14]=n[2]+C-(P*T+R*k+F*C),e[15]=1,e}function Io(e,t){var n=t[0],r=t[1],o=t[2],a=t[3],i=n+n,l=r+r,u=o+o,s=n*i,c=r*i,f=r*l,p=o*i,d=o*l,h=o*u,m=a*i,v=a*l,y=a*u;return e[0]=1-f-h,e[1]=c+y,e[2]=p-v,e[3]=0,e[4]=c-y,e[5]=1-s-h,e[6]=d+m,e[7]=0,e[8]=p+v,e[9]=d-m,e[10]=1-s-f,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function Bo(e,t,n,r,o,a,i){var l=1/(n-t),u=1/(o-r),s=1/(a-i);return e[0]=2*a*l,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=2*a*u,e[6]=0,e[7]=0,e[8]=(n+t)*l,e[9]=(o+r)*u,e[10]=(i+a)*s,e[11]=-1,e[12]=0,e[13]=0,e[14]=i*a*2*s,e[15]=0,e}function Vo(e,t,n,r,o){var a,i=1/Math.tan(t/2);return e[0]=i/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=o&&o!==1/0?(a=1/(r-o),e[10]=(o+r)*a,e[14]=2*o*r*a):(e[10]=-1,e[14]=-2*r),e}function zo(e,t,n,r){var o=Math.tan(t.upDegrees*Math.PI/180),a=Math.tan(t.downDegrees*Math.PI/180),i=Math.tan(t.leftDegrees*Math.PI/180),l=Math.tan(t.rightDegrees*Math.PI/180),u=2/(i+l),s=2/(o+a);return e[0]=u,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=0,e[7]=0,e[8]=-(i-l)*u*.5,e[9]=(o-a)*s*.5,e[10]=r/(n-r),e[11]=-1,e[12]=0,e[13]=0,e[14]=r*n/(n-r),e[15]=0,e}function Wo(e,t,n,r,o,a,i){var l=1/(t-n),u=1/(r-o),s=1/(a-i);return e[0]=-2*l,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*u,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*s,e[11]=0,e[12]=(t+n)*l,e[13]=(o+r)*u,e[14]=(i+a)*s,e[15]=1,e}function Ho(e,t,n,r){var o,a,i,l,u,s,c,f,p,d,h=t[0],m=t[1],v=t[2],y=r[0],b=r[1],g=r[2],E=n[0],w=n[1],x=n[2];return Math.abs(h-E)<io&&Math.abs(m-w)<io&&Math.abs(v-x)<io?ho(e):(c=h-E,f=m-w,p=v-x,o=b*(p*=d=1/Math.hypot(c,f,p))-g*(f*=d),a=g*(c*=d)-y*p,i=y*f-b*c,(d=Math.hypot(o,a,i))?(o*=d=1/d,a*=d,i*=d):(o=0,a=0,i=0),l=f*i-p*a,u=p*o-c*i,s=c*a-f*o,(d=Math.hypot(l,u,s))?(l*=d=1/d,u*=d,s*=d):(l=0,u=0,s=0),e[0]=o,e[1]=l,e[2]=c,e[3]=0,e[4]=a,e[5]=u,e[6]=f,e[7]=0,e[8]=i,e[9]=s,e[10]=p,e[11]=0,e[12]=-(o*h+a*m+i*v),e[13]=-(l*h+u*m+s*v),e[14]=-(c*h+f*m+p*v),e[15]=1,e)}function Yo(e,t,n,r){var o=t[0],a=t[1],i=t[2],l=r[0],u=r[1],s=r[2],c=o-n[0],f=a-n[1],p=i-n[2],d=c*c+f*f+p*p;d>0&&(c*=d=1/Math.sqrt(d),f*=d,p*=d);var h=u*p-s*f,m=s*c-l*p,v=l*f-u*c;return(d=h*h+m*m+v*v)>0&&(h*=d=1/Math.sqrt(d),m*=d,v*=d),e[0]=h,e[1]=m,e[2]=v,e[3]=0,e[4]=f*v-p*m,e[5]=p*h-c*v,e[6]=c*m-f*h,e[7]=0,e[8]=c,e[9]=f,e[10]=p,e[11]=0,e[12]=o,e[13]=a,e[14]=i,e[15]=1,e}function Ko(e){return"mat4("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+", "+e[8]+", "+e[9]+", "+e[10]+", "+e[11]+", "+e[12]+", "+e[13]+", "+e[14]+", "+e[15]+")"}function Xo(e){return Math.hypot(e[0],e[1],e[3],e[4],e[5],e[6],e[7],e[8],e[9],e[10],e[11],e[12],e[13],e[14],e[15])}function Go(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e[9]=t[9]+n[9],e[10]=t[10]+n[10],e[11]=t[11]+n[11],e[12]=t[12]+n[12],e[13]=t[13]+n[13],e[14]=t[14]+n[14],e[15]=t[15]+n[15],e}function Zo(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e[9]=t[9]-n[9],e[10]=t[10]-n[10],e[11]=t[11]-n[11],e[12]=t[12]-n[12],e[13]=t[13]-n[13],e[14]=t[14]-n[14],e[15]=t[15]-n[15],e}function $o(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e[9]=t[9]*n,e[10]=t[10]*n,e[11]=t[11]*n,e[12]=t[12]*n,e[13]=t[13]*n,e[14]=t[14]*n,e[15]=t[15]*n,e}function qo(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e[4]=t[4]+n[4]*r,e[5]=t[5]+n[5]*r,e[6]=t[6]+n[6]*r,e[7]=t[7]+n[7]*r,e[8]=t[8]+n[8]*r,e[9]=t[9]+n[9]*r,e[10]=t[10]+n[10]*r,e[11]=t[11]+n[11]*r,e[12]=t[12]+n[12]*r,e[13]=t[13]+n[13]*r,e[14]=t[14]+n[14]*r,e[15]=t[15]+n[15]*r,e}function Qo(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]}function Jo(e,t){var n=e[0],r=e[1],o=e[2],a=e[3],i=e[4],l=e[5],u=e[6],s=e[7],c=e[8],f=e[9],p=e[10],d=e[11],h=e[12],m=e[13],v=e[14],y=e[15],b=t[0],g=t[1],E=t[2],w=t[3],x=t[4],S=t[5],T=t[6],k=t[7],C=t[8],M=t[9],_=t[10],P=t[11],O=t[12],A=t[13],R=t[14],N=t[15];return Math.abs(n-b)<=io*Math.max(1,Math.abs(n),Math.abs(b))&&Math.abs(r-g)<=io*Math.max(1,Math.abs(r),Math.abs(g))&&Math.abs(o-E)<=io*Math.max(1,Math.abs(o),Math.abs(E))&&Math.abs(a-w)<=io*Math.max(1,Math.abs(a),Math.abs(w))&&Math.abs(i-x)<=io*Math.max(1,Math.abs(i),Math.abs(x))&&Math.abs(l-S)<=io*Math.max(1,Math.abs(l),Math.abs(S))&&Math.abs(u-T)<=io*Math.max(1,Math.abs(u),Math.abs(T))&&Math.abs(s-k)<=io*Math.max(1,Math.abs(s),Math.abs(k))&&Math.abs(c-C)<=io*Math.max(1,Math.abs(c),Math.abs(C))&&Math.abs(f-M)<=io*Math.max(1,Math.abs(f),Math.abs(M))&&Math.abs(p-_)<=io*Math.max(1,Math.abs(p),Math.abs(_))&&Math.abs(d-P)<=io*Math.max(1,Math.abs(d),Math.abs(P))&&Math.abs(h-O)<=io*Math.max(1,Math.abs(h),Math.abs(O))&&Math.abs(m-A)<=io*Math.max(1,Math.abs(m),Math.abs(A))&&Math.abs(v-R)<=io*Math.max(1,Math.abs(v),Math.abs(R))&&Math.abs(y-N)<=io*Math.max(1,Math.abs(y),Math.abs(N))}Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)});var ea=go,ta=Zo;function na(){var e=100,t=100;this.vertices=new Float32Array(30603);var n=this.vertices;this.normals=new Float32Array(30603);var r=this.normals;this.indicesLines=new Uint16Array(4e4);var o=this.indicesLines;this.indicesTris=new Uint16Array(6e4);for(var a=this.indicesTris,i=0,l=0,u=0,s=0;u<=e;u++,s+=.1)for(var c=0,f=0;c<=t;c++,f+=.1){var p=101*u+c,d=s*Math.cos(Math.cos(s))*Math.cos(f),h=s*Math.cos(Math.cos(s))*Math.sin(f),m=s*Math.sin(Math.cos(s));n[3*p]=d,n[3*p+1]=h,n[3*p+2]=m;var v=Math.cos(s)*Math.cos(f),y=Math.cos(s)*Math.sin(f),b=Math.sin(s);r[3*p]=v,r[3*p+1]=y,r[3*p+2]=b,c>0&&u>0&&(o[i++]=p-1,o[i++]=p),c>0&&u>0&&(o[i++]=p-101,o[i++]=p),c>0&&u>0&&(a[l++]=p,a[l++]=p-1,a[l++]=p-101,a[l++]=p-1,a[l++]=p-101-1,a[l++]=p-101)}}function ra(){var e=100,t=100;this.vertices=new Float32Array(30603);var n=this.vertices;this.normals=new Float32Array(30603);var r=this.normals;this.indicesLines=new Uint16Array(4e4);var o=this.indicesLines;this.indicesTris=new Uint16Array(6e4);for(var a=this.indicesTris,i=0,l=0,u=0,s=0;u<=e;u++,s+=.1)for(var c=0,f=0;c<=t;c++,f+=.1){var p=101*u+c,d=2*Math.sin(3*s)/(2+Math.cos(f)),h=2*(Math.sin(s)+2*Math.sin(2*s))/(2+Math.cos(f+2*Math.PI/3)),m=(Math.cos(s)-2*Math.cos(2*s))*(2+Math.cos(f))*(2+Math.cos(f+2*Math.PI))/4;n[3*p]=d,n[3*p+1]=h,n[3*p+2]=m;var v=Math.cos(s)*Math.cos(f),y=Math.cos(s)*Math.sin(f),b=Math.sin(s);r[3*p]=v,r[3*p+1]=y,r[3*p+2]=b,c>0&&u>0&&(o[i++]=p-1,o[i++]=p),c>0&&u>0&&(o[i++]=p-101,o[i++]=p),c>0&&u>0&&(a[l++]=p,a[l++]=p-1,a[l++]=p-101,a[l++]=p-1,a[l++]=p-101-1,a[l++]=p-101)}}function oa(e){return(oa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function aa(e){return(aa="function"==typeof Symbol&&"symbol"===oa(Symbol.iterator)?function(e){return oa(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":oa(e)})(e)}function ia(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function la(e){return(la=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ua(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function sa(e,t){return(sa=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ca(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}(0,mr.createSliderWithTooltip)(mr.Range),mr.Handle,Math.PI;var fa,pa,da=["attribute vec3 aPosition;","attribute vec3 aNormal;","uniform mat4 uPMatrix;","uniform mat4 uMVMatrix;","varying vec4 vColor;","void main()","{","gl_Position = uPMatrix * uMVMatrix * vec4(aPosition, 1.0);","vColor = vec4(aNormal.x, aNormal.y, aNormal.z, 1.0);","vColor = (vColor + 1.0) / 2.0;","}"].join("\n"),ha=["precision mediump float;","varying vec4 vColor;","void main()","{","  gl_FragColor = vColor;","}"].join("\n"),ma=[],va={eye:[0,1,4],center:[0,0,0],up:[1,0,0],fovy:60*Math.PI/180,lrtb:4,vMatrix:r.create(),pMatrix:r.create(),projectionType:"ortho",zAngle:0,distance:8},ya=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==aa(t)&&"function"!=typeof t?ua(e):t}(this,la(t).call(this,e)),ca(ua(n),"handleKeyDown",(function(e){if(console.log(e+"is down"),"w"===e){console.log("w pressed ! ");var t=n.state.rotationX+.01;t=n.state.cameraEyeX+.1;n.setState({rotationX:t,cameraEyeX:t})}else if("s"===e){console.log("s pressed ! ");t=n.state.rotationX-.01,t=n.state.cameraEyeX-.1;n.setState({rotationX:t,cameraEyeX:t})}else if("a"===e){console.log("a pressed ! ");t=n.state.rotationY-.01,t=n.state.cameraEyeY-.1;n.setState({rotationY:t,cameraEyeY:t})}else if("d"===e){console.log("d pressed ! ");t=n.state.rotationY+.01,t=n.state.cameraEyeY+.1;n.setState({rotationY:t,cameraEyeY:t})}else if("q"===e){console.log("q pressed ! ");t=n.state.rotationZ-.1,t=n.state.cameraEyeZ-.1;n.setState({rotationZ:t,cameraEyeZ:t})}else if("e"===e){console.log("e pressed ! ");t=n.state.rotationZ+.1,t=n.state.cameraEyeZ+.1;n.setState({rotationZ:t,cameraEyeZ:t})}else if("o"===e){console.log("i pressed ! ");t=n.state.zoom+.1;n.setState({zoom:t})}else if("i"===e){console.log("o pressed ! ");t=n.state.zoom-.1;n.setState({zoom:t})}n.renderWegGL()})),ca(ua(n),"init",(function(){try{n.initWebGL()}catch(e){alert("Error: "+e)}n.initShaderProgram(),n.initUniforms(),n.initModels(),n.initEventHandler(),n.initPipline(),n.renderWegGL()})),ca(ua(n),"initWebGL",(function(){try{if(!(fa=n.webGLCanvas.getContext("webgl")))throw"x"}catch(e){throw"Your web browser does not support WebGL!"}fa.viewportWidth=n.webGLCanvas.width,fa.viewportHeight=n.webGLCanvas.height})),ca(ua(n),"initPipline",(function(){fa.clearColor(.95,.95,.95,1),fa.frontFace(fa.CCW),fa.enable(fa.CULL_FACE),fa.cullFace(fa.BACK),fa.enable(fa.DEPTH_TEST),fa.enable(fa.POLYGON_OFFSET_FILL),fa.polygonOffset(.5,0),fa.viewport(0,0,fa.viewportWidth,fa.viewportHeight),va.aspect=fa.viewportWidth/fa.viewportHeight})),ca(ua(n),"initShaderProgram",(function(){var e=n.initShader(fa.VERTEX_SHADER,"vertexshader"),t=n.initShader(fa.FRAGMENT_SHADER,"fragmentshader");pa=fa.createProgram(),fa.attachShader(pa,e),fa.attachShader(pa,t),fa.bindAttribLocation(pa,0,"aPosition"),fa.linkProgram(pa),fa.useProgram(pa)})),ca(ua(n),"initShader",(function(e,t){var n,r=fa.createShader(e);return n="vertexshader"==t?da:ha,fa.shaderSource(r,n),fa.compileShader(r),fa.getShaderParameter(r,fa.COMPILE_STATUS)?r:(console.log(t+": "+fa.getShaderInfoLog(r)),null)})),ca(ua(n),"initUniforms",(function(){pa.pMatrixUniform=fa.getUniformLocation(pa,"uPMatrix"),pa.mvMatrixUniform=fa.getUniformLocation(pa,"uMVMatrix")})),ca(ua(n),"initModels",(function(){var e="fillwireframe";n.createModel(o,e),n.createModel(a,e)})),ca(ua(n),"createModel",(function(e,t){var o={};o.fillstyle=t,n.initDataAndBuffers(o,e),o.mvMatrix=r.create(),ma.push(o)})),ca(ua(n),"initDataAndBuffers",(function(e,t){t.createVertexData.apply(e),e.vboPos=fa.createBuffer(),fa.bindBuffer(fa.ARRAY_BUFFER,e.vboPos),fa.bufferData(fa.ARRAY_BUFFER,e.vertices,fa.STATIC_DRAW),pa.positionAttrib=fa.getAttribLocation(pa,"aPosition"),fa.enableVertexAttribArray(pa.positionAttrib),e.vboNormal=fa.createBuffer(),fa.bindBuffer(fa.ARRAY_BUFFER,e.vboNormal),fa.bufferData(fa.ARRAY_BUFFER,e.normals,fa.STATIC_DRAW),pa.normalAttrib=fa.getAttribLocation(pa,"aNormal"),fa.enableVertexAttribArray(pa.normalAttrib),e.iboLines=fa.createBuffer(),fa.bindBuffer(fa.ELEMENT_ARRAY_BUFFER,e.iboLines),fa.bufferData(fa.ELEMENT_ARRAY_BUFFER,e.indicesLines,fa.STATIC_DRAW),e.iboLines.numberOfElements=e.indicesLines.length,fa.bindBuffer(fa.ELEMENT_ARRAY_BUFFER,null),e.iboTris=fa.createBuffer(),fa.bindBuffer(fa.ELEMENT_ARRAY_BUFFER,e.iboTris),fa.bufferData(fa.ELEMENT_ARRAY_BUFFER,e.indicesTris,fa.STATIC_DRAW),e.iboTris.numberOfElements=e.indicesTris.length,fa.bindBuffer(fa.ELEMENT_ARRAY_BUFFER,null)})),ca(ua(n),"initEventHandler",(function(){window.onkeydown=function(e){var t=e.which?e.which:e.keyCode;switch(String.fromCharCode(t)){case"O":va.projectionType="ortho",va.lrtb=4}n.renderWegGL()}})),ca(ua(n),"calculateCameraOrbit",(function(){va.eye[0]=va.center[0],va.eye[2]=va.center[2],va.eye[0]+=va.distance*Math.sin(va.zAngle),va.eye[2]+=va.distance*Math.cos(va.zAngle)})),ca(ua(n),"renderWegGL",(function(){va.eye=[n.state.cameraEyeX,n.state.cameraEyeY,n.state.cameraEyeZ],va.lrtb=n.state.zoom,fa.clear(fa.COLOR_BUFFER_BIT|fa.DEPTH_BUFFER_BIT),n.setProjection(),r.lookAt(va.vMatrix,va.eye,va.center,va.up);for(var e=0;e<ma.length;e++)r.copy(ma[e].mvMatrix,va.vMatrix),fa.uniformMatrix4fv(pa.mvMatrixUniform,!1,ma[e].mvMatrix),n.draw(ma[e])})),ca(ua(n),"setProjection",(function(){switch(va.projectionType){case"ortho":var e=va.lrtb;r.ortho(va.pMatrix,-e,e,-e,e,-10,10)}fa.uniformMatrix4fv(pa.pMatrixUniform,!1,va.pMatrix)})),ca(ua(n),"draw",(function(e){fa.bindBuffer(fa.ARRAY_BUFFER,e.vboPos),fa.vertexAttribPointer(pa.positionAttrib,3,fa.FLOAT,!1,0,0),fa.bindBuffer(fa.ARRAY_BUFFER,e.vboNormal),fa.vertexAttribPointer(pa.normalAttrib,3,fa.FLOAT,!1,0,0),-1!=e.fillstyle.search(/fill/)&&(fa.enableVertexAttribArray(pa.normalAttrib),fa.bindBuffer(fa.ELEMENT_ARRAY_BUFFER,e.iboTris),fa.drawElements(fa.TRIANGLES,e.iboTris.numberOfElements,fa.UNSIGNED_SHORT,0)),-1!=e.fillstyle.search(/wireframe/)&&(fa.disableVertexAttribArray(pa.normalAttrib),fa.vertexAttrib3f(pa.normalAttrib,0,0,0),fa.bindBuffer(fa.ELEMENT_ARRAY_BUFFER,e.iboLines),fa.drawElements(fa.LINES,e.iboLines.numberOfElements,fa.UNSIGNED_SHORT,0))})),n.state={eventKey:" ",zoom:2,xMin:-3,xMax:3,yMin:-3,yMax:3,rotationX:0,rotationY:0,rotationZ:0,cameraEyeX:0,cameraEyeY:1,cameraEyeZ:4,cameraCenterX:0,cameraCenterY:0,cameraCenterZ:0,cameraUpX:0,cameraUpY:0,cameraUpZ:0},n}var n,i,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&sa(e,t)}(t,e),n=t,(i=[{key:"componentDidMount",value:function(){this.init()}},{key:"render",value:function(){var e=this,t={width:400,margin:10};return d.a.createElement("div",null,d.a.createElement("div",null,d.a.createElement("h2",null,"EA5")),d.a.createElement("div",{className:"rowCEA5"},d.a.createElement("div",{className:"canvasBoxEA5"},d.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"})),d.a.createElement(b.a,{handleKeys:["w","a","s","d","q","e","i","o"],onKeyEvent:function(t,n){return e.handleKeyDown(t)}}),d.a.createElement("div",{className:"sliderBoxEA5"},d.a.createElement("div",{style:t},"Move Camera with W,A,S,D on X and Y axis and with Q,E around Z. Zoom with I,O. The Look At Center is 0,0,0"),d.a.createElement("div",{style:t},"rotationX: ",this.state.rotationX," , cameraEyeX: ",this.state.cameraEyeX),d.a.createElement("div",{style:t},"rotationY: ",this.state.rotationY," , cameraEyeY: ",this.state.cameraEyeY),d.a.createElement("div",{style:t},"rotationZ: ",this.state.rotationZ,", cameraEyeZ: ",this.state.cameraEyeZ),d.a.createElement("div",{style:t},"camera Zoom: ",d.a.createElement("p",null,this.state.zoom)))),d.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&ia(n.prototype,i),l&&ia(n,l),t}(p.Component);ca(ya,"propTypes",{}),ca(ya,"defaultProps",{});n(154);function ba(){var e=100,t=100;this.vertices=new Float32Array(30603);var n=this.vertices;this.normals=new Float32Array(30603);var r=this.normals;this.indicesLines=new Uint16Array(4e4);var o=this.indicesLines;this.indicesTris=new Uint16Array(6e4);for(var a=this.indicesTris,i=0,l=0,u=0,s=-10;u<=e;u++,s+=.2)for(var c=0,f=-10;c<=t;c++,f+=.2){var p=101*u+c,d=s,h=f;n[3*p]=d,n[3*p+1]=0,n[3*p+2]=h,r[3*p]=0,r[3*p+1]=1,r[3*p+2]=0,c>0&&u>0&&(o[i++]=p-1,o[i++]=p),c>0&&u>0&&(o[i++]=p-101,o[i++]=p),c>0&&u>0&&(a[l++]=p,a[l++]=p-1,a[l++]=p-101,a[l++]=p-1,a[l++]=p-101-1,a[l++]=p-101)}}function ga(){var e=32,t=32;this.vertices=new Float32Array(3267);var n=this.vertices;this.normals=new Float32Array(3267);var r=this.normals;this.indicesLines=new Uint16Array(4096);var o=this.indicesLines;this.indicesTris=new Uint16Array(6144);for(var a=this.indicesTris,i=2*Math.PI/e,l=Math.PI/t,u=0,s=0,c=0,f=0;c<=e;c++,f+=i)for(var p=0,d=0;p<=t;p++,d+=l){var h=33*c+p,m=1*Math.sin(d)*Math.cos(f),v=1*Math.sin(d)*Math.sin(f),y=1*Math.cos(d);n[3*h]=m,n[3*h+1]=v,n[3*h+2]=y;var b=Math.sqrt(m*m+v*v+y*y);r[3*h]=m/b,r[3*h+1]=v/b,r[3*h+2]=y/b,p>0&&c>0&&(o[u++]=h-1,o[u++]=h),p>0&&c>0&&(o[u++]=h-33,o[u++]=h),p>0&&c>0&&(a[s++]=h,a[s++]=h-1,a[s++]=h-33,a[s++]=h-1,a[s++]=h-33-1,a[s++]=h-33)}}function Ea(){var e=16,t=32;this.vertices=new Float32Array(1683);var n=this.vertices;this.normals=new Float32Array(1683);var r=this.normals;this.indicesLines=new Uint16Array(2048);var o=this.indicesLines;this.indicesTris=new Uint16Array(3072);for(var a=this.indicesTris,i=2*Math.PI/e,l=2*Math.PI/t,u=0,s=0,c=0,f=0;c<=e;c++,f+=i)for(var p=0,d=0;p<=t;p++,d+=l){var h=33*c+p,m=(.5+.3*Math.cos(f))*Math.cos(d),v=(.5+.3*Math.cos(f))*Math.sin(d),y=.3*Math.sin(f);n[3*h]=m,n[3*h+1]=v,n[3*h+2]=y;var b=Math.cos(f)*Math.cos(d),g=Math.cos(f)*Math.sin(d),E=Math.sin(f);r[3*h]=b,r[3*h+1]=g,r[3*h+2]=E,p>0&&c>0&&(o[u++]=h-1,o[u++]=h),p>0&&c>0&&(o[u++]=h-33,o[u++]=h),p>0&&c>0&&(a[s++]=h,a[s++]=h-1,a[s++]=h-33,a[s++]=h-1,a[s++]=h-33-1,a[s++]=h-33)}}function wa(e){return(wa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function xa(e){return(xa="function"==typeof Symbol&&"symbol"===wa(Symbol.iterator)?function(e){return wa(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":wa(e)})(e)}function Sa(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ta(e){return(Ta=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ka(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ca(e,t){return(Ca=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ma(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}(0,mr.createSliderWithTooltip)(mr.Range),mr.Handle;var _a,Pa,Oa=1,Aa="wireframe",Ra="fill",Na=["attribute vec3 aPosition;","attribute vec3 aNormal;","uniform mat4 uPMatrix;","uniform mat4 uMVMatrix;","varying vec4 vColor;","void main()","{","gl_Position = uPMatrix * uMVMatrix * vec4(aPosition, 1.0);","vColor = vec4(aNormal.x, aNormal.y, aNormal.z, 1.0);","vColor = (vColor + 1.0) / 2.0;","}"].join("\n"),La=["precision mediump float;","varying vec4 vColor;","void main()","{","  gl_FragColor = vColor;","}"].join("\n"),Fa=[],ja={eye:[.7,.6,1.2],center:[0,0,0],up:[0,1,0],fovy:60*Math.PI/180,lrtb:4,vMatrix:r.create(),pMatrix:r.create(),projectionType:"ortho",zAngle:0,distance:8},Da=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==xa(t)&&"function"!=typeof t?ka(e):t}(this,Ta(t).call(this,e)),Ma(ka(n),"myLoop",(function(){setTimeout((function(){n.animateModels(),n.renderWegGL();var e=n.state.angle+n.state.deltaTime;n.setState({angle:e}),++Oa<1e5&&n.state.isLoop&&n.myLoop()}),25)})),Ma(ka(n),"handleKeyDown",(function(e){if(n.setState({commandNote:e+" pressed! "+n.state.commandNote}),"w"===e){var t=n.state.cameraEyeX+.1;n.setState({rotationX:t,cameraEyeX:t})}else if("s"===e){t=n.state.cameraEyeX-.1;n.setState({rotationX:t,cameraEyeX:t})}else if("a"===e){t=n.state.cameraEyeY-.1;n.setState({rotationY:t,cameraEyeY:t})}else if("d"===e){t=n.state.cameraEyeY+.1;n.setState({rotationY:t,cameraEyeY:t})}else if("q"===e){t=n.state.rotationZ-.1,t=n.state.cameraEyeZ-.1;n.setState({rotationZ:t,cameraEyeZ:t})}else if("e"===e){t=n.state.rotationZ+.1,t=n.state.cameraEyeZ+.1;n.setState({rotationZ:t,cameraEyeZ:t})}else if("o"===e){t=n.state.zoom+.1;n.setState({zoom:t})}else if("i"===e){t=n.state.zoom-.1;n.setState({zoom:t})}if("1"===e&&null!==n.state.interactiveTorus&&(n.state.interactiveTorus.rotate[0]+=n.state.deltaTime,console.log(n.state.interactiveTorus.rotate[0])),"2"===e&&null!==n.state.interactiveTorus&&(n.state.interactiveTorus.rotate[1]+=n.state.deltaTime),"3"===e&&null!==n.state.interactiveTorus&&(n.state.interactiveTorus.rotate[2]+=n.state.deltaTime),"k"===e){n.setState({isLoop:!1}),n.animateModels();var r=n.state.angle+n.state.deltaTime;n.setState({angle:r})}if("l"===e&&(n.setState({isLoop:!0}),n.myLoop()),"p"===e){var o=!n.state.drawOrbit;n.setState({drawOrbit:o})}n.renderWegGL()})),Ma(ka(n),"init",(function(){try{n.initWebGL(),n.initShaderProgram(),n.initUniforms(),n.initModels(),n.initPipline(),n.myLoop()}catch(e){alert("Error: "+e)}})),Ma(ka(n),"initWebGL",(function(){try{if(!(_a=n.webGLCanvas.getContext("webgl")))throw"x"}catch(e){throw"Your web browser does not support WebGL!"}_a.viewportWidth=n.webGLCanvas.width,_a.viewportHeight=n.webGLCanvas.height})),Ma(ka(n),"animateModels",(function(){var e=Math.cos(n.state.angle)*n.state.radius,t=Math.sin(n.state.angle)*n.state.radius;n.state.interactiveTorus.rotate[0]+=.5*n.state.deltaTime,n.state.interactiveSphere1.translate=[n.state.interactiveSphere1.translate[0]+t,n.state.interactiveSphere1.translate[1]+e,n.state.interactiveSphere1.translate[2]],n.state.angle>6.499&&(n.state.interactiveSphere2.translate=[n.state.interactiveSphere2.translate[0]-t,n.state.interactiveSphere2.translate[1]-e,n.state.interactiveSphere2.translate[2]]),n.state.angle>3.1&&(n.state.interactiveSphere3.translate=[n.state.interactiveSphere3.translate[0],n.state.interactiveSphere3.translate[1]+t,n.state.interactiveSphere3.translate[2]+e]),n.state.angle>9.14&&(n.state.interactiveSphere4.translate=[n.state.interactiveSphere4.translate[0]+t,n.state.interactiveSphere4.translate[1],n.state.interactiveSphere4.translate[2]-e]),n.setState({interactiveSphere1Translate:n.state.interactiveSphere1.translate}),n.setState({interactiveSphere2Translate:n.state.interactiveSphere2.translate}),n.setState({interactiveSphere3Translate:n.state.interactiveSphere3.translate}),n.setState({interactiveSphere4Translate:n.state.interactiveSphere4.translate}),n.state.angle%8&&n.state.drawOrbit&&(n.createModel("sphere",l,Aa,n.state.interactiveSphere1.translate,[0,0,0],[.1,.1,.1]),n.createModel("sphere",l,Aa,n.state.interactiveSphere2.translate,[0,0,0],[.1,.1,.1]),n.createModel("sphere",l,Aa,n.state.interactiveSphere3.translate,[0,0,0],[.1,.1,.1]),n.createModel("sphere",l,Aa,n.state.interactiveSphere4.translate,[0,0,0],[.1,.1,.1]))})),Ma(ka(n),"initPipline",(function(){_a.clearColor(.95,.95,.95,1),_a.frontFace(_a.CCW),_a.enable(_a.CULL_FACE),_a.cullFace(_a.BACK),_a.enable(_a.DEPTH_TEST),_a.enable(_a.POLYGON_OFFSET_FILL),_a.polygonOffset(.5,0),_a.viewport(0,0,_a.viewportWidth,_a.viewportHeight),ja.aspect=_a.viewportWidth/_a.viewportHeight})),Ma(ka(n),"initShaderProgram",(function(){var e=n.initShader(_a.VERTEX_SHADER,"vertexshader"),t=n.initShader(_a.FRAGMENT_SHADER,"fragmentshader");Pa=_a.createProgram(),_a.attachShader(Pa,e),_a.attachShader(Pa,t),_a.bindAttribLocation(Pa,0,"aPosition"),_a.linkProgram(Pa),_a.useProgram(Pa)})),Ma(ka(n),"initShader",(function(e,t){var n,r=_a.createShader(e);return n="vertexshader"==t?Na:La,_a.shaderSource(r,n),_a.compileShader(r),_a.getShaderParameter(r,_a.COMPILE_STATUS)?r:(console.log(t+": "+_a.getShaderInfoLog(r)),null)})),Ma(ka(n),"initUniforms",(function(){Pa.pMatrixUniform=_a.getUniformLocation(Pa,"uPMatrix"),Pa.mvMatrixUniform=_a.getUniformLocation(Pa,"uMVMatrix")})),Ma(ka(n),"initModels",(function(){n.createModel("torus",u,Ra,[0,0,0],[1.535,0,0],[4,4,4]),n.createModel("plane",i,Aa,[0,-.8,0],[0,0,0],[.3,.3,.3]),n.createModel("sphere",l,Ra,[.2,-.2,0],[0,0,0],[.15,.15,.15]),n.createModel("sphere",l,Ra,[-.2,.2,0],[0,0,0],[.15,.15,.15]),n.createModel("sphere",l,Ra,[-.2,-.2,0],[0,0,0],[.15,.15,.15]),n.createModel("sphere",l,Ra,[.2,.2,0],[0,0,0],[.15,.15,.15]),n.setState({interactiveTorus:Fa[0]}),n.setState({interactiveSphere1:Fa[2]}),n.setState({interactiveSphere2:Fa[3]}),n.setState({interactiveSphere3:Fa[4]}),n.setState({interactiveSphere4:Fa[5]})})),Ma(ka(n),"createModel",(function(e,t,r,o,a,i){var l={};l.name=e,l.fillstyle=r,n.initDataAndBuffers(l,t),n.initTransformations(l,o,a,i),Fa.push(l)})),Ma(ka(n),"initTransformations",(function(e,t,n,o){e.translate=t,e.rotate=n,e.scale=o,e.mMatrix=r.create(),e.mvMatrix=r.create()})),Ma(ka(n),"initDataAndBuffers",(function(e,t){t.createVertexData.apply(e),e.vboPos=_a.createBuffer(),_a.bindBuffer(_a.ARRAY_BUFFER,e.vboPos),_a.bufferData(_a.ARRAY_BUFFER,e.vertices,_a.STATIC_DRAW),Pa.positionAttrib=_a.getAttribLocation(Pa,"aPosition"),_a.enableVertexAttribArray(Pa.positionAttrib),e.vboNormal=_a.createBuffer(),_a.bindBuffer(_a.ARRAY_BUFFER,e.vboNormal),_a.bufferData(_a.ARRAY_BUFFER,e.normals,_a.STATIC_DRAW),Pa.normalAttrib=_a.getAttribLocation(Pa,"aNormal"),_a.enableVertexAttribArray(Pa.normalAttrib),e.iboLines=_a.createBuffer(),_a.bindBuffer(_a.ELEMENT_ARRAY_BUFFER,e.iboLines),_a.bufferData(_a.ELEMENT_ARRAY_BUFFER,e.indicesLines,_a.STATIC_DRAW),e.iboLines.numberOfElements=e.indicesLines.length,_a.bindBuffer(_a.ELEMENT_ARRAY_BUFFER,null),e.iboTris=_a.createBuffer(),_a.bindBuffer(_a.ELEMENT_ARRAY_BUFFER,e.iboTris),_a.bufferData(_a.ELEMENT_ARRAY_BUFFER,e.indicesTris,_a.STATIC_DRAW),e.iboTris.numberOfElements=e.indicesTris.length,_a.bindBuffer(_a.ELEMENT_ARRAY_BUFFER,null)})),Ma(ka(n),"calculateCameraOrbit",(function(){ja.eye[0]=ja.center[0],ja.eye[2]=ja.center[2],ja.eye[0]+=ja.distance*Math.sin(ja.zAngle),ja.eye[2]+=ja.distance*Math.cos(ja.zAngle)})),Ma(ka(n),"renderWegGL",(function(){ja.eye=[n.state.cameraEyeY,n.state.cameraEyeX,n.state.cameraEyeZ],ja.lrtb=n.state.zoom,_a.clear(_a.COLOR_BUFFER_BIT|_a.DEPTH_BUFFER_BIT),n.setProjection(),r.lookAt(ja.vMatrix,ja.eye,ja.center,ja.up);for(var e=0;e<Fa.length;e++)n.updateTransformations(Fa[e]),_a.uniformMatrix4fv(Pa.mvMatrixUniform,!1,Fa[e].mvMatrix),n.draw(Fa[e])})),Ma(ka(n),"updateTransformations",(function(e){var t=e.mMatrix,n=e.mvMatrix;r.identity(t),r.identity(n),r.translate(t,t,e.translate),r.rotateX(t,t,e.rotate[0]),r.rotateY(t,t,e.rotate[1]),r.rotateZ(t,t,e.rotate[2]),r.scale(t,t,e.scale),r.multiply(n,ja.vMatrix,t)})),Ma(ka(n),"setProjection",(function(){switch(ja.projectionType){case"ortho":var e=ja.lrtb;r.ortho(ja.pMatrix,-e,e,-e,e,-20,20)}_a.uniformMatrix4fv(Pa.pMatrixUniform,!1,ja.pMatrix)})),Ma(ka(n),"draw",(function(e){_a.bindBuffer(_a.ARRAY_BUFFER,e.vboPos),_a.vertexAttribPointer(Pa.positionAttrib,3,_a.FLOAT,!1,0,0),_a.bindBuffer(_a.ARRAY_BUFFER,e.vboNormal),_a.vertexAttribPointer(Pa.normalAttrib,3,_a.FLOAT,!1,0,0),-1!=e.fillstyle.search(/fill/)&&(_a.enableVertexAttribArray(Pa.normalAttrib),_a.bindBuffer(_a.ELEMENT_ARRAY_BUFFER,e.iboTris),_a.drawElements(_a.TRIANGLES,e.iboTris.numberOfElements,_a.UNSIGNED_SHORT,0)),-1!=e.fillstyle.search(/wireframe/)&&(_a.disableVertexAttribArray(Pa.normalAttrib),_a.vertexAttrib3f(Pa.normalAttrib,0,0,0),_a.bindBuffer(_a.ELEMENT_ARRAY_BUFFER,e.iboLines),_a.drawElements(_a.LINES,e.iboLines.numberOfElements,_a.UNSIGNED_SHORT,0))})),n.state={eventKey:" ",zoom:3.6,xMin:-3,xMax:3,yMin:-3,yMax:3,rotationX:0,rotationY:0,rotationZ:0,cameraEyeX:.7,cameraEyeY:.6,cameraEyeZ:1.2,cameraCenterX:0,cameraCenterY:0,cameraCenterZ:0,cameraUpX:0,cameraUpY:0,cameraUpZ:0,angle:0,interactiveSphere1:null,interactiveSphere2:null,interactiveSphere3:null,interactiveSphere4:null,interactiveTorus:null,interactiveSphere1Translate:null,interactiveSphere2Translate:null,interactiveSphere3Translate:null,interactiveSphere4Translate:null,deltaTime:.05,isLoop:!1,radius:.2,commandNote:"",drawOrbit:!1},n}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ca(e,t)}(t,e),n=t,(o=[{key:"componentDidMount",value:function(){this.init()}},{key:"render",value:function(){var e=this,t={width:400,margin:10};return d.a.createElement("div",null,d.a.createElement("div",null,d.a.createElement("h2",null,"EA6")),d.a.createElement("div",{className:"rowCEA5"},d.a.createElement("div",{className:"canvasBoxEA5"},d.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"})),d.a.createElement(b.a,{handleKeys:["w","a","s","d","q","e","i","o","1","2","3","k","l","p"],onKeyEvent:function(t,n){return e.handleKeyDown(t)}}),d.a.createElement("div",{className:"sliderBoxEA5"},d.a.createElement("div",{style:t},d.a.createElement("h2",null,"Note:"),d.a.createElement("p",null,"The spheres will start on by one with a little delay."),d.a.createElement("h2",null,"Controls:"),d.a.createElement("p",null,"Use P to toggle draw the Orbit"),d.a.createElement("p",null,"Start the Animated Loop with L or skip keyframe by keyframe with K. (Note: K will stop the loop.)"),d.a.createElement("p",null,"Move Camera with W,A,S,D on X and Y axis and with Q,E around Z. Zoom with I,O."),d.a.createElement("p",null,"The Look At Center is 0,0,0")),d.a.createElement("div",{style:t},"rotationX: ",this.state.rotationX," , cameraEyeX: ",this.state.cameraEyeX),d.a.createElement("div",{style:t},"rotationY: ",this.state.rotationY," , cameraEyeY: ",this.state.cameraEyeY),d.a.createElement("div",{style:t},"rotationZ: ",this.state.rotationZ,", cameraEyeZ: ",this.state.cameraEyeZ),d.a.createElement("div",{style:t},"camera Zoom: ",d.a.createElement("p",null,this.state.zoom)),d.a.createElement("div",{style:t},"function angle : ",d.a.createElement("p",null,this.state.angle)),d.a.createElement("div",{style:t},d.a.createElement("p",null,"postiton sphere1:  ",null===this.state.interactiveSphere1Translate?"null":this.state.interactiveSphere1Translate[0]+", "+this.state.interactiveSphere1Translate[1]+", "+this.state.interactiveSphere1Translate[2]),d.a.createElement("p",null,"postiton sphere2:  ",null===this.state.interactiveSphere2Translate?"null":this.state.interactiveSphere2Translate[0]+", "+this.state.interactiveSphere2Translate[1]+", "+this.state.interactiveSphere2Translate[2]),d.a.createElement("p",null,"postiton sphere3:  ",null===this.state.interactiveSphere3Translate?"null":this.state.interactiveSphere3Translate[0]+", "+this.state.interactiveSphere3Translate[1]+", "+this.state.interactiveSphere3Translate[2]),d.a.createElement("p",null,"postiton sphere4:  ",null===this.state.interactiveSphere4Translate?"null":this.state.interactiveSphere4Translate[0]+", "+this.state.interactiveSphere4Translate[1]+", "+this.state.interactiveSphere4Translate[2])),d.a.createElement("div",{style:t},"last Commands:  ",this.state.commandNote))),d.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&Sa(n.prototype,o),a&&Sa(n,a),t}(p.Component);Ma(Da,"propTypes",{}),Ma(Da,"defaultProps",{});n(156);function Ua(){var e=100,t=100;this.vertices=new Float32Array(30603);var n=this.vertices;this.normals=new Float32Array(30603);var r=this.normals;this.indicesLines=new Uint16Array(4e4);var o=this.indicesLines;this.indicesTris=new Uint16Array(6e4);for(var a=this.indicesTris,i=0,l=0,u=0,s=-10;u<=e;u++,s+=.2)for(var c=0,f=-10;c<=t;c++,f+=.2){var p=101*u+c,d=s,h=f;n[3*p]=d,n[3*p+1]=0,n[3*p+2]=h,r[3*p]=0,r[3*p+1]=1,r[3*p+2]=0,c>0&&u>0&&(o[i++]=p-1,o[i++]=p),c>0&&u>0&&(o[i++]=p-101,o[i++]=p),c>0&&u>0&&(a[l++]=p,a[l++]=p-1,a[l++]=p-101,a[l++]=p-1,a[l++]=p-101-1,a[l++]=p-101)}}function Ia(){var e=32,t=32;this.vertices=new Float32Array(3267);var n=this.vertices;this.normals=new Float32Array(3267);var r=this.normals;this.indicesLines=new Uint16Array(4096);var o=this.indicesLines;this.indicesTris=new Uint16Array(6144);for(var a=this.indicesTris,i=2*Math.PI/e,l=Math.PI/t,u=0,s=0,c=0,f=0;c<=e;c++,f+=i)for(var p=0,d=0;p<=t;p++,d+=l){var h=33*c+p,m=1*Math.sin(d)*Math.cos(f),v=1*Math.sin(d)*Math.sin(f),y=1*Math.cos(d);n[3*h]=m,n[3*h+1]=v,n[3*h+2]=y;var b=Math.sqrt(m*m+v*v+y*y);r[3*h]=m/b,r[3*h+1]=v/b,r[3*h+2]=y/b,p>0&&c>0&&(o[u++]=h-1,o[u++]=h),p>0&&c>0&&(o[u++]=h-33,o[u++]=h),p>0&&c>0&&(a[s++]=h,a[s++]=h-1,a[s++]=h-33,a[s++]=h-1,a[s++]=h-33-1,a[s++]=h-33)}}function Ba(){var e=16,t=32;this.vertices=new Float32Array(1683);var n=this.vertices;this.normals=new Float32Array(1683);var r=this.normals;this.indicesLines=new Uint16Array(2048);var o=this.indicesLines;this.indicesTris=new Uint16Array(3072);for(var a=this.indicesTris,i=2*Math.PI/e,l=2*Math.PI/t,u=0,s=0,c=0,f=0;c<=e;c++,f+=i)for(var p=0,d=0;p<=t;p++,d+=l){var h=33*c+p,m=(.5+.3*Math.cos(f))*Math.cos(d),v=(.5+.3*Math.cos(f))*Math.sin(d),y=.3*Math.sin(f);n[3*h]=m,n[3*h+1]=v,n[3*h+2]=y;var b=Math.cos(f)*Math.cos(d),g=Math.cos(f)*Math.sin(d),E=Math.sin(f);r[3*h]=b,r[3*h+1]=g,r[3*h+2]=E,p>0&&c>0&&(o[u++]=h-1,o[u++]=h),p>0&&c>0&&(o[u++]=h-33,o[u++]=h),p>0&&c>0&&(a[s++]=h,a[s++]=h-1,a[s++]=h-33,a[s++]=h-1,a[s++]=h-33-1,a[s++]=h-33)}}var Va=n(71),za=n.n(Va),Wa=n(72),Ha=n.n(Wa);function Ya(e){return(Ya="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ka(e){return(Ka="function"==typeof Symbol&&"symbol"===Ya(Symbol.iterator)?function(e){return Ya(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":Ya(e)})(e)}function Xa(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ga(e){return(Ga=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Za(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function $a(e,t){return($a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function qa(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}(0,mr.createSliderWithTooltip)(mr.Range),mr.Handle;var Qa,Ja,ei=1,ti="fillwireframe",ni="wireframe",ri="fill",oi=[],ai=1,ii={eye:[0,-5,0],center:[0,0,0],up:[0,1,0],fovy:140*Math.PI/180,lrtb:100,vMatrix:r.create(),pMatrix:r.create(),projectionType:"perspective",zAngle:0,distance:8},li=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==Ka(t)&&"function"!=typeof t?Za(e):t}(this,Ga(t).call(this,e)),qa(Za(n),"myLoop",(function(){setTimeout((function(){n.animateModels(),n.renderWegGL();var e=n.state.angle+n.state.deltaTime;n.setState({angle:e}),++ei<1e5&&n.state.isLoop&&n.myLoop()}),25)})),qa(Za(n),"handleKeyDown",(function(e){if(n.setState({commandNote:e+" pressed! "+n.state.commandNote}),"w"===e){var t=n.state.cameraEyeX+.1;n.setState({rotationX:t,cameraEyeX:t})}else if("s"===e){t=n.state.cameraEyeX-.1;n.setState({rotationX:t,cameraEyeX:t})}else if("q"===e){t=n.state.cameraEyeY-.1;n.setState({rotationY:t,cameraEyeY:t})}else if("e"===e){t=n.state.cameraEyeY+.1;n.setState({rotationY:t,cameraEyeY:t})}else if("a"===e){t=n.state.rotationZ-.1,t=n.state.cameraEyeZ-.1;n.setState({rotationZ:t,cameraEyeZ:t})}else if("d"===e){t=n.state.rotationZ+.1,t=n.state.cameraEyeZ+.1;n.setState({rotationZ:t,cameraEyeZ:t})}else if("o"===e){t=n.state.zoom+ai;n.setState({zoom:t})}else if("i"===e){t=n.state.zoom-ai;n.setState({zoom:t})}if("1"===e&&(ai=.1,ii.up=[0,1,0],n.setState({zoom:6}),ii.projectionType="ortho"),"2"===e&&(ai=.1,ii.up=[0,1,0],n.setState({zoom:6}),ii.projectionType="frustum"),"3"===e&&(ai=.1,ii.lrtb=11,ii.fovy=120*Math.PI/180,ii.up=[0,1,0],n.setState({zoom:120}),ii.projectionType="perspective"),"k"===e){n.setState({isLoop:!1}),n.animateModels();var r=n.state.angle+n.state.deltaTime;n.setState({angle:r})}if("l"===e&&(n.setState({isLoop:!0}),n.myLoop()),"p"===e){var o=!n.state.drawOrbit;n.setState({drawOrbit:o})}n.renderWegGL()})),qa(Za(n),"init",(function(){try{n.initWebGL(),n.initShaderProgram(),n.initUniforms(),n.initModels(),n.initPipline(),n.myLoop()}catch(e){alert("Error: "+e)}})),qa(Za(n),"initWebGL",(function(){try{if(!(Qa=n.webGLCanvas.getContext("webgl")))throw"x"}catch(e){throw"Your web browser does not support WebGL!"}Qa.viewportWidth=n.webGLCanvas.width,Qa.viewportHeight=n.webGLCanvas.height})),qa(Za(n),"animateModels",(function(){var e=Math.cos(n.state.angle)*n.state.radius,t=Math.sin(n.state.angle)*n.state.radius;null!==n.state.interactiveTorus&&(n.state.interactiveTorus.rotate[0]+=.5*n.state.deltaTime),null!==n.state.interactiveSphere1&&(n.state.interactiveSphere1.translate=[n.state.interactiveSphere1.translate[0]+t,n.state.interactiveSphere1.translate[1]+e,n.state.interactiveSphere1.translate[2]]),null!==n.state.interactiveSphere2&&n.state.angle>6.499&&(n.state.interactiveSphere2.translate=[n.state.interactiveSphere2.translate[0]-t,n.state.interactiveSphere2.translate[1]-e,n.state.interactiveSphere2.translate[2]]),null!==n.state.interactiveSphere3&&n.state.angle>3.1&&(n.state.interactiveSphere3.translate=[n.state.interactiveSphere3.translate[0],n.state.interactiveSphere3.translate[1]+t,n.state.interactiveSphere3.translate[2]+e]),null!==n.state.interactiveSphere4&&n.state.angle>9.14&&(n.state.interactiveSphere4.translate=[n.state.interactiveSphere4.translate[0]+t,n.state.interactiveSphere4.translate[1],n.state.interactiveSphere4.translate[2]-e]),null!==n.state.interactiveSphere1&&null!==n.state.interactiveSphere2&&null!==n.state.interactiveSphere3&&null!==n.state.interactiveSphere4&&(n.setState({interactiveSphere1Translate:n.state.interactiveSphere1.translate}),n.setState({interactiveSphere2Translate:n.state.interactiveSphere2.translate}),n.setState({interactiveSphere3Translate:n.state.interactiveSphere3.translate}),n.setState({interactiveSphere4Translate:n.state.interactiveSphere4.translate}),n.state.angle%8&&n.state.drawOrbit&&(n.createModel("sphere",c,ni,n.state.interactiveSphere1.translate,[0,0,0],[.1,.1,.1]),n.createModel("sphere",c,ni,n.state.interactiveSphere2.translate,[0,0,0],[.1,.1,.1]),n.createModel("sphere",c,ni,n.state.interactiveSphere3.translate,[0,0,0],[.1,.1,.1]),n.createModel("sphere",c,ni,n.state.interactiveSphere4.translate,[0,0,0],[.1,.1,.1])))})),qa(Za(n),"initPipline",(function(){Qa.clearColor(.95,.95,.95,1),Qa.frontFace(Qa.CCW),Qa.enable(Qa.CULL_FACE),Qa.cullFace(Qa.BACK),Qa.enable(Qa.DEPTH_TEST),Qa.enable(Qa.POLYGON_OFFSET_FILL),Qa.polygonOffset(.5,0),Qa.viewport(0,0,Qa.viewportWidth,Qa.viewportHeight),ii.aspect=Qa.viewportWidth/Qa.viewportHeight})),qa(Za(n),"initShaderProgram",(function(){var e=n.initShader(Qa.VERTEX_SHADER,"vertexshader"),t=n.initShader(Qa.FRAGMENT_SHADER,"fragmentshader");Ja=Qa.createProgram(),Qa.attachShader(Ja,e),Qa.attachShader(Ja,t),Qa.bindAttribLocation(Ja,0,"aPosition"),Qa.linkProgram(Ja),Qa.useProgram(Ja)})),qa(Za(n),"initShader",(function(e,t){var n,r=Qa.createShader(e);return n="vertexshader"==t?za.a:Ha.a,Qa.shaderSource(r,n),Qa.compileShader(r),Qa.getShaderParameter(r,Qa.COMPILE_STATUS)?r:(console.log(t+": "+Qa.getShaderInfoLog(r)),null)})),qa(Za(n),"initUniforms",(function(){Ja.pMatrixUniform=Qa.getUniformLocation(Ja,"uPMatrix"),Ja.mvMatrixUniform=Qa.getUniformLocation(Ja,"uMVMatrix")})),qa(Za(n),"initModels",(function(){n.createModel("torus",f,ri,[0,0,0],[1.535,0,0],[4,4,4]),n.createModel("plane",s,ti,[0,-.8,0],[0,0,0],[2,2,2]),n.createModel("sphere",c,ri,[.2,-.2,0],[0,0,0],[1.5,1.5,1.5]),n.createModel("sphere",c,ri,[-.2,.2,0],[0,0,0],[1.5,1.5,1.5]),n.createModel("sphere",c,ri,[-.2,-.2,0],[0,0,0],[1.5,1.5,1.5]),n.createModel("sphere",c,ri,[.2,.2,0],[0,0,0],[1.5,1.5,1.5]),n.setState({interactiveTorus:oi[0]}),n.setState({interactivePlane:oi[1]}),n.setState({interactiveSphere1:oi[2]}),n.setState({interactiveSphere2:oi[3]}),n.setState({interactiveSphere3:oi[4]}),n.setState({interactiveSphere4:oi[5]})})),qa(Za(n),"createModel",(function(e,t,r,o,a,i){var l={};l.name=e,l.fillstyle=r,n.initDataAndBuffers(l,t),n.initTransformations(l,o,a,i),oi.push(l)})),qa(Za(n),"initTransformations",(function(e,t,n,o){e.translate=t,e.rotate=n,e.scale=o,e.mMatrix=r.create(),e.mvMatrix=r.create()})),qa(Za(n),"initDataAndBuffers",(function(e,t){t.createVertexData.apply(e),e.vboPos=Qa.createBuffer(),Qa.bindBuffer(Qa.ARRAY_BUFFER,e.vboPos),Qa.bufferData(Qa.ARRAY_BUFFER,e.vertices,Qa.STATIC_DRAW),Ja.positionAttrib=Qa.getAttribLocation(Ja,"aPosition"),Qa.enableVertexAttribArray(Ja.positionAttrib),e.vboNormal=Qa.createBuffer(),Qa.bindBuffer(Qa.ARRAY_BUFFER,e.vboNormal),Qa.bufferData(Qa.ARRAY_BUFFER,e.normals,Qa.STATIC_DRAW),Ja.normalAttrib=Qa.getAttribLocation(Ja,"aNormal"),Qa.enableVertexAttribArray(Ja.normalAttrib),e.iboLines=Qa.createBuffer(),Qa.bindBuffer(Qa.ELEMENT_ARRAY_BUFFER,e.iboLines),Qa.bufferData(Qa.ELEMENT_ARRAY_BUFFER,e.indicesLines,Qa.STATIC_DRAW),e.iboLines.numberOfElements=e.indicesLines.length,Qa.bindBuffer(Qa.ELEMENT_ARRAY_BUFFER,null),e.iboTris=Qa.createBuffer(),Qa.bindBuffer(Qa.ELEMENT_ARRAY_BUFFER,e.iboTris),Qa.bufferData(Qa.ELEMENT_ARRAY_BUFFER,e.indicesTris,Qa.STATIC_DRAW),e.iboTris.numberOfElements=e.indicesTris.length,Qa.bindBuffer(Qa.ELEMENT_ARRAY_BUFFER,null)})),qa(Za(n),"calculateCameraOrbit",(function(){ii.eye[0]=ii.center[0],ii.eye[2]=ii.center[2],ii.eye[0]+=ii.distance*Math.sin(ii.zAngle),ii.eye[2]+=ii.distance*Math.cos(ii.zAngle)})),qa(Za(n),"renderWegGL",(function(){ii.eye=[n.state.cameraEyeY,n.state.cameraEyeX,n.state.cameraEyeZ],"frustum"===ii.projectionType?ii.lrtb=n.state.zoom:"perspective"===ii.projectionType?(ii.lrtb=n.state.zoom,ii.fovy=n.state.zoom*Math.PI/180):ii.lrtb=n.state.zoom,Qa.clear(Qa.COLOR_BUFFER_BIT|Qa.DEPTH_BUFFER_BIT),n.setProjection(),r.lookAt(ii.vMatrix,ii.eye,ii.center,ii.up);for(var e=0;e<oi.length;e++)n.updateTransformations(oi[e]),Qa.uniformMatrix4fv(Ja.mvMatrixUniform,!1,oi[e].mvMatrix),n.draw(oi[e])})),qa(Za(n),"updateTransformations",(function(e){var t=e.mMatrix,n=e.mvMatrix;r.identity(t),r.identity(n),r.translate(t,t,e.translate),r.rotateX(t,t,e.rotate[0]),r.rotateY(t,t,e.rotate[1]),r.rotateZ(t,t,e.rotate[2]),r.scale(t,t,e.scale),r.multiply(n,ii.vMatrix,t)})),qa(Za(n),"setProjection",(function(){switch(ii.projectionType){case"ortho":var e=ii.lrtb;r.ortho(ii.pMatrix,-e,e,-e,e,-20,20);break;case"frustum":e=ii.lrtb;r.frustum(ii.pMatrix,-e/2,e/2,-e/2,e/2,1,10);break;case"perspective":r.perspective(ii.pMatrix,ii.fovy,ii.aspect,1,10)}Qa.uniformMatrix4fv(Ja.pMatrixUniform,!1,ii.pMatrix)})),qa(Za(n),"draw",(function(e){Qa.bindBuffer(Qa.ARRAY_BUFFER,e.vboPos),Qa.vertexAttribPointer(Ja.positionAttrib,3,Qa.FLOAT,!1,0,0),Qa.bindBuffer(Qa.ARRAY_BUFFER,e.vboNormal),Qa.vertexAttribPointer(Ja.normalAttrib,3,Qa.FLOAT,!1,0,0),-1!=e.fillstyle.search(/fill/)&&(Qa.enableVertexAttribArray(Ja.normalAttrib),Qa.bindBuffer(Qa.ELEMENT_ARRAY_BUFFER,e.iboTris),Qa.drawElements(Qa.TRIANGLES,e.iboTris.numberOfElements,Qa.UNSIGNED_SHORT,0)),-1!=e.fillstyle.search(/wireframe/)&&(Qa.disableVertexAttribArray(Ja.normalAttrib),Qa.vertexAttrib3f(Ja.normalAttrib,0,0,0),Qa.bindBuffer(Qa.ELEMENT_ARRAY_BUFFER,e.iboLines),Qa.drawElements(Qa.LINES,e.iboLines.numberOfElements,Qa.UNSIGNED_SHORT,0))})),n.state={eventKey:" ",zoom:120,xMin:-3,xMax:3,yMin:-3,yMax:3,rotationX:0,rotationY:0,rotationZ:0,cameraEyeX:0,cameraEyeY:-5,cameraEyeZ:0,cameraCenterX:0,cameraCenterY:0,cameraCenterZ:0,cameraUpX:0,cameraUpY:0,cameraUpZ:0,angle:0,interactiveSphere1:null,interactiveSphere2:null,interactiveSphere3:null,interactiveSphere4:null,interactiveTorus:null,interactivePlane:null,interactiveSphere1Translate:null,interactiveSphere2Translate:null,interactiveSphere3Translate:null,interactiveSphere4Translate:null,deltaTime:.05,isLoop:!1,radius:.2,commandNote:"",drawOrbit:!1},n}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&$a(e,t)}(t,e),n=t,(o=[{key:"componentDidMount",value:function(){this.init()}},{key:"render",value:function(){var e=this,t={width:400,margin:10};return d.a.createElement("div",null,d.a.createElement("div",null,d.a.createElement("h2",null,"EA7")),d.a.createElement("div",{className:"rowCEA5"},d.a.createElement("div",{className:"canvasBoxEA5"},d.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"})),d.a.createElement(b.a,{handleKeys:["w","a","s","d","q","e","i","o","1","2","3","k","l","p"],onKeyEvent:function(t,n){return e.handleKeyDown(t)}}),d.a.createElement("div",{className:"sliderBoxEA5"},d.a.createElement("div",{style:t},d.a.createElement("h2",null,"Note:"),d.a.createElement("p",null,"Switch with 1, 2, 3 between ortho, frustum or perspective camera"),d.a.createElement("h2",null,"Controls:"),d.a.createElement("p",null,"Use P to toggle draw the Orbit"),d.a.createElement("p",null,"Start the Animated Loop with L or skip keyframe by keyframe with K. (Note: K will stop the loop.)"),d.a.createElement("p",null,"Move Camera with W,A,S,D on X and Y axis and with Q,E around Z. Zoom with I,O."),d.a.createElement("p",null,"The Look At Center is 0,0,0")),d.a.createElement("div",{style:t},"rotationX: ",this.state.rotationX," , cameraEyeX: ",this.state.cameraEyeX),d.a.createElement("div",{style:t},"rotationY: ",this.state.rotationY," , cameraEyeY: ",this.state.cameraEyeY),d.a.createElement("div",{style:t},"rotationZ: ",this.state.rotationZ,", cameraEyeZ: ",this.state.cameraEyeZ),d.a.createElement("div",{style:t},"camera Zoom: ",d.a.createElement("p",null,this.state.zoom)),d.a.createElement("div",{style:t},"function angle : ",d.a.createElement("p",null,this.state.angle)),d.a.createElement("div",{style:t},d.a.createElement("p",null,"postiton sphere1:  ",null===this.state.interactiveSphere1Translate?"null":this.state.interactiveSphere1Translate[0]+", "+this.state.interactiveSphere1Translate[1]+", "+this.state.interactiveSphere1Translate[2]),d.a.createElement("p",null,"postiton sphere2:  ",null===this.state.interactiveSphere2Translate?"null":this.state.interactiveSphere2Translate[0]+", "+this.state.interactiveSphere2Translate[1]+", "+this.state.interactiveSphere2Translate[2]),d.a.createElement("p",null,"postiton sphere3:  ",null===this.state.interactiveSphere3Translate?"null":this.state.interactiveSphere3Translate[0]+", "+this.state.interactiveSphere3Translate[1]+", "+this.state.interactiveSphere3Translate[2]),d.a.createElement("p",null,"postiton sphere4:  ",null===this.state.interactiveSphere4Translate?"null":this.state.interactiveSphere4Translate[0]+", "+this.state.interactiveSphere4Translate[1]+", "+this.state.interactiveSphere4Translate[2])),d.a.createElement("div",{style:t},"last Commands:  ",this.state.commandNote))),d.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&Xa(n.prototype,o),a&&Xa(n,a),t}(p.Component);function ui(e){return(ui="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function si(e){return(si="function"==typeof Symbol&&"symbol"===ui(Symbol.iterator)?function(e){return ui(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":ui(e)})(e)}function ci(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function fi(e){return(fi=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function pi(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function di(e,t){return(di=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function hi(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}qa(li,"propTypes",{}),qa(li,"defaultProps",{});var mi=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=function(e,t){return!t||"object"!==si(t)&&"function"!=typeof t?pi(e):t}(this,(e=fi(t)).call.apply(e,[this].concat(o))),hi(pi(n),"state",{renderView:0}),hi(pi(n),"clickBtn",(function(e){n.setState({renderView:+e.target.value})})),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&di(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){switch(this.state.renderView){case 1:return d.a.createElement(C,null);case 2:return d.a.createElement(L,null);case 3:return d.a.createElement(Ar,null);case 4:return d.a.createElement(Kr,null);case 5:return d.a.createElement(ao,null);case 6:return d.a.createElement(ya,null);case 7:return d.a.createElement(Da,null);case 8:return d.a.createElement(li,null);default:return d.a.createElement(v,{clickBtn:this.clickBtn})}}}])&&ci(n.prototype,r),o&&ci(n,o),t}(p.Component);function vi(e){return(vi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function yi(e){return(yi="function"==typeof Symbol&&"symbol"===vi(Symbol.iterator)?function(e){return vi(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":vi(e)})(e)}function bi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function gi(e,t){return!t||"object"!==yi(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ei(e){return(Ei=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function wi(e,t){return(wi=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var xi=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),gi(this,Ei(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&wi(e,t)}(t,e),n=t,(r=[{key:"_refreshPage",value:function(){console.log("Clicked"),window.location.reload()}},{key:"render",value:function(){return d.a.createElement("div",null,d.a.createElement("button",{onClick:this._refreshPage}," Home "),d.a.createElement(mi,null))}}])&&bi(n.prototype,r),o&&bi(n,o),t}(p.Component),Si=n(73),Ti=document.getElementById("root");m.a.render(d.a.createElement(xi,null),Ti),Si.a()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,