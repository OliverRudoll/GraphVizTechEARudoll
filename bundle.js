!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/GraphVizTechEARudoll/",n(n.s=173)}([function(e,t,n){"use strict";e.exports=n(90)},function(e,t,n){e.exports=n(98)()},function(e,t,n){"use strict";t.__esModule=!0;var r,a=n(104),o=(r=a)&&r.__esModule?r:{default:r};t.default=o.default||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}},function(e,t,n){"use strict";t.__esModule=!0;var r,a=n(64),o=(r=a)&&r.__esModule?r:{default:r};t.default=function(e,t,n){return t in e?(0,o.default)(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){"use strict";t.__esModule=!0;var r,a=n(36),o=(r=a)&&r.__esModule?r:{default:r};t.default=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":(0,o.default)(t))&&"function"!=typeof t?e:t}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t,n){"use strict";t.__esModule=!0;var r=i(n(133)),a=i(n(137)),o=i(n(36));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":(0,o.default)(t)));e.prototype=(0,a.default)(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(r.default?(0,r.default)(e,t):e.__proto__=t)}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(91)},function(e,t,n){var r,a;window,e.exports=(r=n(0),a=n(1),function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);Object.defineProperty(t,"default",{enumerable:!0,get:function(){return function(e){return e&&e.__esModule?e:{default:e}}(r).default}}),e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(2)),i=u(n(3)),l=n(4);function u(e){return e&&e.__esModule?e:{default:e}}var s=[],c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleKeyboardEvent=n.handleKeyboardEvent.bind(n),n.registerExclusiveHandler=n.registerExclusiveHandler.bind(n),n.deregisterExclusiveHandler=n.deregisterExclusiveHandler.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:"componentDidMount",value:function(){document.addEventListener("keydown",this.handleKeyboardEvent,!1),document.addEventListener("keyup",this.handleKeyboardEvent,!1),document.addEventListener("keypress",this.handleKeyboardEvent,!1);var e=this.props,t=e.isExclusive,n=e.isDisabled;t&&!n&&this.registerExclusiveHandler()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("keydown",this.handleKeyboardEvent,!1),document.removeEventListener("keyup",this.handleKeyboardEvent,!1),document.removeEventListener("keypress",this.handleKeyboardEvent,!1),this.deregisterExclusiveHandler()}},{key:"componentDidUpdate",value:function(e){var t=e.isExclusive,n=e.isDisabled;(this.props.isExclusive!==t||this.props.isDisabled!==n)&&(this.props.isExclusive&&!this.props.isDisabled?this.registerExclusiveHandler():this.deregisterExclusiveHandler())}},{key:"registerExclusiveHandler",value:function(){this.deregisterExclusiveHandler(),s.unshift(this)}},{key:"deregisterExclusiveHandler",value:function(){var e=this;s.includes(this)&&(s=s.filter((function(t){return t!==e})))}},{key:"handleKeyboardEvent",value:function(e){var t=this.props,n=t.isDisabled,r=t.handleKeys,a=t.onKeyEvent,o=t.handleEventType,i=t.children,u=t.handleFocusableElements;if(n)return!1;if(o!==e.type)return!1;if(s.length>0&&s[0]!==this)return!1;var c=e.target===document.body||u,f=this.childrenContainer&&this.childrenContainer.contains(e.target);if(!(i?f:c))return!1;var p=(0,l.findMatchedKey)(e,r);return!!p&&(a(p,e),!0)}},{key:"render",value:function(){var e=this,n=this.props.children,a=Object.assign({},this.props),i=!0,l=!1,u=void 0;try{for(var s,c=Object.keys(t.propTypes)[Symbol.iterator]();!(i=(s=c.next()).done);i=!0)delete a[s.value]}catch(e){l=!0,u=e}finally{try{!i&&c.return&&c.return()}finally{if(l)throw u}}return n?o.default.createElement("span",r({ref:function(t){e.childrenContainer=t}},a),n):null}}]),t}();t.default=c,c.propTypes={handleKeys:i.default.array,handleEventType:i.default.oneOf(["keydown","keyup","keypress"]),handleFocusableElements:i.default.bool,onKeyEvent:i.default.func,isDisabled:i.default.bool,isExclusive:i.default.bool,children:i.default.any},c.defaultProps={handleKeys:[],handleFocusableElements:!1,handleEventType:"keydown",onKeyEvent:function(){return null}},e.exports=t.default},function(e,t){e.exports=r},function(e,t){e.exports=a},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.matchKeyEvent=d,t.findMatchedKey=function(e,t){var n=t.map((function(e){var t=e.toLowerCase();return p[t]||[e]})).reduce((function(e,t){return e.concat(t)}),[]).find((function(t){return d(e,t)}));return!n&&t.includes("all")&&(n="other"),n};var a={backspace:[8],del:[46],delete:[46],ins:[45],insert:[45],tab:[9],enter:[13],return:[13],esc:[27],space:[32],pageup:[33],pagedown:[34],end:[35],home:[36],left:[37],up:[38],right:[39],down:[40],shift:[16],ctrl:[17],alt:[18],cap:[20],num:[144],clear:[12],meta:[91],";":[186,59],"=":[187,61],",":[188,44],"-":[189,45,173,109],minus:[189,45,173,109],".":[190,110],"/":[191,111],"`":[192],"[":[219],"\\":[220],"]":[221],"*":[106],"+":[107],plus:[107]},o=Object.keys(a).reduce((function(e,t){return Object.assign(e,r({},t.toUpperCase(),a[t]))}),{}),i="0123456789".split("").reduce((function(e,t,n){return Object.assign(e,r({},t,[n+48,n+96]))}),{}),l="ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("").reduce((function(e,t,n){return Object.assign(e,r({},t.toLowerCase(),[n+65]),r({},t,[n+65]))}),{}),u="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19".split(",").reduce((function(e,t,n){return Object.assign(e,r({},"f"+t,[n+112]))}),{}),s={control:"ctrl",ctrl:"ctrl",shift:"shift",meta:"meta",cmd:"meta",command:"meta",option:"alt",alt:"alt"},c=t.AllKeys=Object.assign({},a,o,i,l,u),f=Object.assign({},i,l),p={all:Object.keys(c),alphanumeric:Object.keys(f),numeric:Object.keys(i),alphabetic:Object.keys(l),function:Object.keys(u)};function d(e,t){var n=e.which||e.keyCode,r=e.type,a=Object.keys(s).filter((function(t){return e[t+"Key"]})).sort(),o=t.toLowerCase().trim(),i="+"===o?["+"]:o.split(/\s?\+\s?/),l=i.pop(),u=c[l],f=i;if("keypress"===r)return t==String.fromCharCode(n).toLowerCase();if(0===f.length&&0===a.length)return u.indexOf(n)>=0;if(f.length>0&&a.length>0){var p=f.map((function(e){return s[e]})).sort(),d=p.length===a.length&&p.every((function(e,t){return a[t]===e}));return u.indexOf(n)>=0&&d}return 0==f.length&&1===a.length&&l===a[0]}}]))},function(e,t,n){"use strict";t.__esModule=!0;var r,a=n(64),o=(r=a)&&r.__esModule?r:{default:r};t.default=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),(0,o.default)(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()},function(e,t){var n=e.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var o=typeof r;if("string"===o||"number"===o)e.push(r);else if(Array.isArray(r)&&r.length){var i=a.apply(null,r);i&&e.push(i)}else if("object"===o)for(var l in r)n.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(r=function(){return a}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var a=(i=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(u," */")),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")}));return[n].concat(o).concat([a]).join("\n")}var i,l,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},a=0;a<this.length;a++){var o=this[a][0];null!=o&&(r[o]=!0)}for(var i=0;i<e.length;i++){var l=e[i];null!=l[0]&&r[l[0]]||(n&&!l[2]?l[2]=n:n&&(l[2]="(".concat(l[2],") and (").concat(n,")")),t.push(l))}},t}},function(e,t,n){"use strict";var r,a={},o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function l(e,t){for(var n=[],r={},a=0;a<e.length;a++){var o=e[a],i=t.base?o[0]+t.base:o[0],l={css:o[1],media:o[2],sourceMap:o[3]};r[i]?r[i].parts.push(l):n.push(r[i]={id:i,parts:[l]})}return n}function u(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id],i=0;if(o){for(o.refs++;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(v(r.parts[i],t))}else{for(var l=[];i<r.parts.length;i++)l.push(v(r.parts[i],t));a[r.id]={id:r.id,refs:1,parts:l}}}}function s(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var r=n.nc;r&&(e.attributes.nonce=r)}if(Object.keys(e.attributes).forEach((function(n){t.setAttribute(n,e.attributes[n])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,f=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function p(e,t,n,r){var a=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function d(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a&&e.setAttribute("media",a),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function v(e,t){var n,r,a;if(t.singleton){var o=m++;n=h||(h=s(t)),r=p.bind(null,n,o,!1),a=p.bind(null,n,o,!0)}else n=s(t),r=d.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=l(e,t);return u(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var i=n[o],s=a[i.id];s&&(s.refs--,r.push(s))}e&&u(l(e,t),t);for(var c=0;c<r.length;c++){var f=r[c];if(0===f.refs){for(var p=0;p<f.parts.length;p++)f.parts[p]();delete a[f.id]}}}}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}},function(e,t,n){var r=n(46)("wks"),a=n(34),o=n(17).Symbol,i="function"==typeof o;(e.exports=function(e){return r[e]||(r[e]=i&&o[e]||(i?o:a)("Symbol."+e))}).store=r},function(e,t,n){var r=n(17),a=n(10),o=n(40),i=n(24),l=n(20),u=function(e,t,n){var s,c,f,p=e&u.F,d=e&u.G,h=e&u.S,m=e&u.P,v=e&u.B,y=e&u.W,b=d?a:a[t]||(a[t]={}),g=b.prototype,E=d?r:h?r[t]:(r[t]||{}).prototype;for(s in d&&(n=t),n)(c=!p&&E&&void 0!==E[s])&&l(b,s)||(f=c?E[s]:n[s],b[s]=d&&"function"!=typeof E[s]?n[s]:v&&c?o(f,r):y&&E[s]==f?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(f):m&&"function"==typeof f?o(Function.call,f):f,m&&((b.virtual||(b.virtual={}))[s]=f,e&u.R&&g&&!g[s]&&i(g,s,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){var r=n(25),a=n(59),o=n(41),i=Object.defineProperty;t.f=n(19)?Object.defineProperty:function(e,t,n){if(r(e),t=o(t,!0),r(n),a)try{return i(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){e.exports=!n(27)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(62),a=n(43);e.exports=function(e){return r(a(e))}},function(e,t,n){var r=n(157);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};n(13)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){var r=n(18),a=n(29);e.exports=n(19)?function(e,t,n){return r.f(e,t,a(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(26);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){"use strict";t.__esModule=!0;var r,a=n(148),o=(r=a)&&r.__esModule?r:{default:r};t.default=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return(0,o.default)(e)}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(43);e.exports=function(e){return Object(r(e))}},function(e,t){e.exports={}},function(e,t,n){var r=n(61),a=n(47);e.exports=Object.keys||function(e){return r(e,a)}},function(e,t){e.exports=!0},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){"use strict";t.__esModule=!0;var r=i(n(113)),a=i(n(123)),o="function"==typeof a.default&&"symbol"==typeof r.default?function(e){return typeof e}:function(e){return e&&"function"==typeof a.default&&e.constructor===a.default&&e!==a.default.prototype?"symbol":typeof e};function i(e){return e&&e.__esModule?e:{default:e}}t.default="function"==typeof a.default&&"symbol"===o(r.default)?function(e){return void 0===e?"undefined":o(e)}:function(e){return e&&"function"==typeof a.default&&e.constructor===a.default&&e!==a.default.prototype?"symbol":void 0===e?"undefined":o(e)}},function(e,t){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";function r(e){return function(){return e}}var a=function(){};a.thatReturns=r,a.thatReturnsFalse=r(!1),a.thatReturnsTrue=r(!0),a.thatReturnsNull=r(null),a.thatReturnsThis=function(){return this},a.thatReturnsArgument=function(e){return e},e.exports=a},function(e,t,n){e.exports=n(2)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=(r=n(3))&&r.__esModule?r:{default:r};t.default=a.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=i(n(4)),o=i(n(8));function i(e){return e&&e.__esModule?e:{default:e}}n(12);var l="#4A4A4A";function u(e){return("string"==typeof e||e instanceof String)&&e.match(/^#(([a-fA-F]|\w){3}|([a-fA-F]|\w){6})$/gi)}var s=function(e){var t=e.backAnimationDuration,n=e.borderThickness,o=e.checked,i=e.className,s=e.color,c=e.delay,f=e.id,p=e.onChange,d=e.size,h=e.tickAnimationDuration,m=e.tickSize,v=["Checkbox"];v.push(i),v.push(o?"checked":"unchecked");var y=.25+.25*d,b=""!==f?{id:f}:{},g=function(e){var t={},n=u(e);return t.backgroundColor=n?e:l,!n&&u(e.backgroundColor)&&(t.backgroundColor=e.backgroundColor),t.borderColor=n?e:l,!n&&u(e.borderColor)&&(t.borderColor=e.borderColor),t.uncheckedBorderColor=n?e:l,!n&&u(e.uncheckedBorderColor)&&(t.uncheckedBorderColor=e.uncheckedBorderColor),t.tickColor=u(e.tickColor)?e.tickColor:"#FFFFFF",t}(s),E=o?120+c:c,x=o?c:600+c;return a.default.createElement("div",{className:v.join(" "),role:"checkbox","aria-checked":"false",tabIndex:"0",onClick:function(){p(!o)},onKeyPress:function(){p(!o)}},a.default.createElement("input",r({},b,{type:"checkbox",style:{display:"none"}})),a.default.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",version:"1.1",width:"24px",height:"24px",viewBox:"0 0 24 24",transform:"scale("+y+")"},a.default.createElement("rect",{className:"square",x:"2",y:"2",width:"20",height:"20",rx:"2",ry:"2",fill:g.backgroundColor,stroke:o?g.borderColor:g.uncheckedBorderColor,strokeWidth:n+"px",style:{transitionDelay:x+"ms",transitionDuration:t+"ms"}}),a.default.createElement("path",{className:"tick",d:"M6,6 v8 h16",strokeWidth:m,stroke:g.tickColor,fill:"none",transform:"rotate(-45, 12, 12)",style:{transitionDelay:E+"ms",transitionDuration:h+"ms"}})))};s.propTypes={backAnimationDuration:o.default.number,borderThickness:o.default.oneOf([1,2,3,4]),checked:o.default.bool,className:o.default.string,color:o.default.oneOfType([o.default.string,o.default.object]),delay:o.default.number,id:o.default.string,onChange:o.default.func,size:o.default.oneOf([1,2,3]),tickAnimationDuration:o.default.number,tickSize:o.default.oneOf([1,2,3])},s.defaultProps={backAnimationDuration:180,borderThickness:3,checked:!1,className:"",color:{},delay:0,id:"",onChange:function(){},size:1,tickAnimationDuration:500,tickSize:2},t.default=s},function(e,t,n){"use strict";e.exports=n(5)},function(e,t,n){"use strict";
/** @license React v16.2.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(6),a=n(7),o=n(0),i="function"==typeof Symbol&&Symbol.for,l=i?Symbol.for("react.element"):60103,u=i?Symbol.for("react.call"):60104,s=i?Symbol.for("react.return"):60105,c=i?Symbol.for("react.portal"):60106,f=i?Symbol.for("react.fragment"):60107,p="function"==typeof Symbol&&Symbol.iterator;function d(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function m(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||h}function v(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||h}function y(){}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&d("85"),this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=m.prototype;var b=v.prototype=new y;function g(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||h}b.constructor=v,r(b,m.prototype),b.isPureReactComponent=!0;var E=g.prototype=new y;E.constructor=g,r(E,m.prototype),E.unstable_isAsyncReactComponent=!0,E.render=function(){return this.props.children};var x={current:null},w=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r,a={},o=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(o=""+t.key),t)w.call(t,r)&&!S.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:l,type:e,key:o,ref:i,props:a,_owner:x.current}}function M(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var k=/\/+/g,_=[];function C(e,t,n,r){if(_.length){var a=_.pop();return a.result=e,a.keyPrefix=t,a.func=n,a.context=r,a.count=0,a}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function A(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>_.length&&_.push(e)}function P(e,t,n,r){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var o=!1;if(null===e)o=!0;else switch(a){case"string":case"number":o=!0;break;case"object":switch(e.$$typeof){case l:case u:case s:case c:o=!0}}if(o)return n(r,e,""===t?"."+O(e,0):t),1;if(o=0,t=""===t?".":t+":",Array.isArray(e))for(var i=0;i<e.length;i++){var f=t+O(a=e[i],i);o+=P(a,f,n,r)}else if("function"==typeof(f=null==e?null:"function"==typeof(f=p&&e[p]||e["@@iterator"])?f:null))for(e=f.call(e),i=0;!(a=e.next()).done;)o+=P(a=a.value,f=t+O(a,i++),n,r);else"object"===a&&d("31","[object Object]"==(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return o}function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function R(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,a=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?N(e,r,n,o.thatReturnsArgument):null!=e&&(M(e)&&(t=a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(k,"$&/")+"/")+n,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function N(e,t,n,r,a){var o="";null!=n&&(o=(""+n).replace(k,"$&/")+"/"),t=C(t,o,r,a),null==e||P(e,"",L,t),A(t)}var F={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return N(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=C(null,null,t,n),null==e||P(e,"",R,t),A(t)},count:function(e){return null==e?0:P(e,"",o.thatReturnsNull,null)},toArray:function(e){var t=[];return N(e,t,null,o.thatReturnsArgument),t},only:function(e){return M(e)||d("143"),e}},Component:m,PureComponent:v,unstable_AsyncComponent:g,Fragment:f,createElement:T,cloneElement:function(e,t,n){var a=r({},e.props),o=e.key,i=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,u=x.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)w.call(t,c)&&!S.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:l,type:e.type,key:o,ref:i,props:a,_owner:u}},createFactory:function(e){var t=T.bind(null,e);return t.type=e,t},isValidElement:M,version:"16.2.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:x,assign:r}},D=Object.freeze({default:F}),U=D&&F||D;e.exports=U.default?U.default:U},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,l=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var s in n=Object(arguments[u]))a.call(n,s)&&(l[s]=n[s]);if(r){i=r(n);for(var c=0;c<i.length;c++)o.call(n,i[c])&&(l[i[c]]=n[i[c]])}}return l}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){e.exports=n(9)()},function(e,t,n){"use strict";var r=n(0),a=n(10),o=n(11);e.exports=function(){function e(e,t,n,r,i,l){l!==o&&a(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,a,o,i,l){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,a,o,i,l],c=0;(u=new Error(t.replace(/%s/g,(function(){return s[c++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r=n(13);"string"==typeof r&&(r=[[e.i,r,""]]);n(15)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(14)(!1)).push([e.i,".Checkbox{display:inline-block;cursor:pointer;position:relative;top:6px;width:24px;height:24px;outline:none}.Checkbox .tick{stroke-dasharray:24;stroke-dashoffset:24;transition:stroke-dashoffset 0.5s cubic-bezier(1, 0, 0.55, 0.41);transition-property:stroke-dashoffset;transition-timing-function:cubic-bezier(1, 0, 0.55, 0.41)}.Checkbox .square{fill-opacity:0;transition:fill-opacity .18s ease-in-out, stroke .18s ease-in-out}.Checkbox.checked .tick{stroke-dashoffset:0}.Checkbox.checked .square{fill-opacity:1}.Checkbox.unchecked .tick{stroke-dashoffset:24}.Checkbox.unchecked .square{fill-opacity:0}\n",""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n,r,a,o=e[1]||"",i=e[3];if(!i)return o;if(t&&"function"==typeof btoa){var l=(n=i,r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),"/*# ".concat(a," */")),u=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot).concat(e," */")}));return[o].concat(u).concat([l]).join("\n")}return[o].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},a=0;a<this.length;a++){var o=this[a][0];null!=o&&(r[o]=!0)}for(var i=0;i<e.length;i++){var l=e[i];null!=l[0]&&r[l[0]]||(n&&!l[2]?l[2]=n:n&&(l[2]="(".concat(l[2],") and (").concat(n,")")),t.push(l))}},t}},function(e,t,n){var r,a,o={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===a&&(a=r.apply(this,arguments)),a}),l=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),u=null,s=0,c=[],f=n(16);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],a=o[r.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](r.parts[i]);for(;i<r.parts.length;i++)a.parts.push(b(r.parts[i],t))}else{var l=[];for(i=0;i<r.parts.length;i++)l.push(b(r.parts[i],t));o[r.id]={id:r.id,refs:1,parts:l}}}}function d(e,t){for(var n=[],r={},a=0;a<e.length;a++){var o=e[a],i=t.base?o[0]+t.base:o[0],l={css:o[1],media:o[2],sourceMap:o[3]};r[i]?r[i].parts.push(l):n.push(r[i]={id:i,parts:[l]})}return n}function h(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=l(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,a)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function v(e){var t=document.createElement("style");return e.attrs.type="text/css",y(t,e.attrs),h(e,t),t}function y(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function b(e,t){var n,r,a,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var i=s++;n=u||(u=v(t)),r=x.bind(null,n,i,!1),a=x.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",y(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,a=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&a;(t.convertToAbsoluteUrls||o)&&(r=f(r)),a&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var i=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(i),l&&URL.revokeObjectURL(l)}.bind(null,n,t),a=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),a=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],a=0;a<n.length;a++){var i=n[a];(l=o[i.id]).refs--,r.push(l)}for(e&&p(d(e,t),t),a=0;a<r.length;a++){var l;if(0===(l=r[a]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete o[l.id]}}}};var g,E=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function x(e,t,n,r){var a=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=E(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var a,o=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(a=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")}))}}])},function(e,t,n){"use strict";t.__esModule=!0;var r=o(n(140)),a=o(n(143));function o(e){return e&&e.__esModule?e:{default:e}}t.default=function e(t,n,o){null===t&&(t=Function.prototype);var i=(0,a.default)(t,n);if(void 0===i){var l=(0,r.default)(t);return null===l?void 0:e(l,n,o)}if("value"in i)return i.value;var u=i.get;return void 0!==u?u.call(o):void 0}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=i(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))a.call(n,c)&&(u[c]=n[c]);if(r){l=r(n);for(var f=0;f<l.length;f++)o.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t,n){var r=n(107);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,a){return e.call(t,n,r,a)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(26);e.exports=function(e,t){if(!r(e))return e;var n,a;if(t&&"function"==typeof(n=e.toString)&&!r(a=n.call(e)))return a;if("function"==typeof(n=e.valueOf)&&!r(a=n.call(e)))return a;if(!t&&"function"==typeof(n=e.toString)&&!r(a=n.call(e)))return a;throw TypeError("Can't convert object to primitive value")}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(46)("keys"),a=n(34);e.exports=function(e){return r[e]||(r[e]=a(e))}},function(e,t,n){var r=n(10),a=n(17),o=a["__core-js_shared__"]||(a["__core-js_shared__"]={});(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(33)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(25),a=n(117),o=n(47),i=n(45)("IE_PROTO"),l=function(){},u=function(){var e,t=n(60)("iframe"),r=o.length;for(t.style.display="none",n(118).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;r--;)delete u.prototype[o[r]];return u()};e.exports=Object.create||function(e,t){var n;return null!==e?(l.prototype=r(e),n=new l,l.prototype=null,n[i]=e):n=u(),void 0===t?n:a(n,t)}},function(e,t,n){var r=n(18).f,a=n(20),o=n(15)("toStringTag");e.exports=function(e,t,n){e&&!a(e=n?e:e.prototype,o)&&r(e,o,{configurable:!0,value:t})}},function(e,t,n){t.f=n(15)},function(e,t,n){var r=n(17),a=n(10),o=n(33),i=n(51),l=n(18).f;e.exports=function(e){var t=a.Symbol||(a.Symbol=o?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||l(t,e,{value:i.f(e)})}},function(e,t,n){var r=n(35),a=n(29),o=n(21),i=n(41),l=n(20),u=n(59),s=Object.getOwnPropertyDescriptor;t.f=n(19)?s:function(e,t){if(e=o(e),t=i(t,!0),u)try{return s(e,t)}catch(e){}if(l(e,t))return a(!r.f.call(e,t),e[t])}},function(e,t){e.exports="attribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTextureCoord;\nuniform mat4 uPMatrix;\nuniform mat4 uMVMatrix;\nuniform mat3 uNMatrix;\nvarying vec3 vNormal;\nvarying vec4 vPosition;\nvarying vec2 vTextureCoord;\nvoid main() {\n\tvec4 tPosition = uMVMatrix * vec4(aPosition, 1.0);\n\tgl_Position = uPMatrix * tPosition;\n\tvec3 tNormal = normalize(uNMatrix * aNormal);\n\ttNormal = uNMatrix * aNormal;\n\tvPosition = tPosition;\n\tvNormal = tNormal;\n\tvTextureCoord = aTextureCoord;\n}\n"},function(e,t){e.exports="precision mediump float;\nuniform sampler2D uTexture;\nvarying vec2 vTextureCoord;\nvarying vec3 vNormal;\nvarying vec4 vPosition;\nuniform float uTime;\nstruct PhongMaterial {\n\tvec3 ka;\n\tvec3 kd;\n\tvec3 ks;\n\tfloat ke;\n};\nuniform PhongMaterial material;\nuniform vec3 ambientLight;\nconst int MAX_LIGHT_SOURCES = 8;\nstruct LightSource {\n\tbool isOn;\n\tvec3 position;\n\tvec3 color;\n};\nuniform LightSource light[MAX_LIGHT_SOURCES];\nconst int MAX_DOTS = 100;\nstruct Dot {\n\tvec2 center;\n\tfloat radius;\n};\nvec3 colorA = vec3(0.149, 0.141, 0.912);\nvec3 colorB = vec3(1.000, 0.833, 0.224);\nvec3 phong(vec3 p, vec3 n, vec3 v, LightSource l) {\n\tvec3 L = l.color;\n\tvec3 s = normalize(l.position - p);\n\tvec3 r = reflect(-s, n);\n\tfloat sn = max(dot(s, n), 0.0);\n\tfloat rv = max(dot(r, v), 0.0);\n\tvec3 diffuse = (material.kd * L) * sn;\n\tvec3 specular = (material.ks * L) * pow(rv, material.ke);\n\treturn diffuse + specular;\n}\nvec3 phong(vec3 p, vec3 n, vec3 v) {\n\tvec3 result = material.ka * ambientLight;\n\tfor (int j = 0; j < MAX_LIGHT_SOURCES; j++) {\n\t\tif ((light[j]).isOn) {\n\t\t\tresult += phong(p, n, v, light[j]);\n\t\t}\n\t}\n\treturn result;\n}\nfloat rand(vec2 co) {\n\treturn fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\nvec2 truchetPattern(in vec2 _st, in float _index) {\n\t_index = fract((_index - 0.5) * 2.0);\n\tif (_index > 0.75) {\n\t\t_st = vec2(1.0) - _st;\n\t}\n\telse if (_index > 0.5) {\n\t\t_st = vec2(1.0 - _st.x, _st.y);\n\t}\n\telse if (_index > 0.25) {\n\t\t_st = 1.0 - vec2(1.0 - _st.x, _st.y);\n\t}\n\treturn _st;\n}\nvoid main() {\n\tvec3 v = vec3(0, 0, -1);\n\tfloat pct = abs(sin(uTime * 0.5));\n\tvec3 vNormal = normalize(vNormal);\n\tvec4 tColor = vec4(1.0, 0.5, 0, 1);\n\tvec2 st = vec2((vTextureCoord.s * 2.0) * pct, (vTextureCoord.t * 2.0) * pct);\n\tvec2 ipos = floor(st);\n\tvec2 fpos = fract(st);\n\tvec2 tile = truchetPattern(fpos, rand(ipos) * pct);\n\tfloat color1ChannelProcedural = 0.0;\n\tcolor1ChannelProcedural = (step(length(tile), 0.6 * pct) - step(length(tile), 0.4 * pct)) + (step(length(tile - vec2(1.)), 0.6 * pct) - step(length(tile - vec2(1.)), 0.4 * pct));\n\tvec3 colorProcedural = vec3(color1ChannelProcedural);\n\ttColor = vec4(mix(colorA, colorProcedural, pct), 1.0);\n\tvec4 lighting = vec4(phong(vPosition.xyz, vNormal, v), 1.0);\n\tgl_FragColor = tColor * lighting;\n}\n"},function(e,t,n){var r,a,o;
/* @license
Papa Parse
v5.1.0
https://github.com/mholt/PapaParse
License: MIT
*/a=[],void 0===(o="function"==typeof(r=function e(){"use strict";var t="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:{},n=!t.document&&!!t.postMessage,r=n&&/blob:/i.test((t.location||{}).protocol),a={},o=0,i={parse:function(n,r){var l=(r=r||{}).dynamicTyping||!1;if(x(l)&&(r.dynamicTypingFunction=l,l={}),r.dynamicTyping=l,r.transform=!!x(r.transform)&&r.transform,r.worker&&i.WORKERS_SUPPORTED){var u=function(){if(!i.WORKERS_SUPPORTED)return!1;var n,r,l=(n=t.URL||t.webkitURL||null,r=e.toString(),i.BLOB_URL||(i.BLOB_URL=n.createObjectURL(new Blob(["(",r,")();"],{type:"text/javascript"})))),u=new t.Worker(l);return u.onmessage=v,u.id=o++,a[u.id]=u}();return u.userStep=r.step,u.userChunk=r.chunk,u.userComplete=r.complete,u.userError=r.error,r.step=x(r.step),r.chunk=x(r.chunk),r.complete=x(r.complete),r.error=x(r.error),delete r.worker,void u.postMessage({input:n,config:r,workerId:u.id})}var d=null;return i.NODE_STREAM_INPUT,"string"==typeof n?d=r.download?new s(r):new f(r):!0===n.readable&&x(n.read)&&x(n.on)?d=new p(r):(t.File&&n instanceof File||n instanceof Object)&&(d=new c(r)),d.stream(n)},unparse:function(e,t){var n=!1,r=!0,a=",",o="\r\n",l='"',u=l+l,s=!1,c=null;!function(){if("object"==typeof t){if("string"!=typeof t.delimiter||i.BAD_DELIMITERS.filter((function(e){return-1!==t.delimiter.indexOf(e)})).length||(a=t.delimiter),("boolean"==typeof t.quotes||"function"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes),"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(s=t.skipEmptyLines),"string"==typeof t.newline&&(o=t.newline),"string"==typeof t.quoteChar&&(l=t.quoteChar),"boolean"==typeof t.header&&(r=t.header),Array.isArray(t.columns)){if(0===t.columns.length)throw new Error("Option columns is empty");c=t.columns}void 0!==t.escapeChar&&(u=t.escapeChar+l)}}();var f=new RegExp(h(l),"g");if("string"==typeof e&&(e=JSON.parse(e)),Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return d(null,e,s);if("object"==typeof e[0])return d(c||p(e[0]),e,s)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:p(e.data[0])),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),d(e.fields||[],e.data||[],s);throw new Error("Unable to serialize unrecognized input");function p(e){if("object"!=typeof e)return[];var t=[];for(var n in e)t.push(n);return t}function d(e,t,n){var i="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var l=Array.isArray(e)&&0<e.length,u=!Array.isArray(t[0]);if(l&&r){for(var s=0;s<e.length;s++)0<s&&(i+=a),i+=m(e[s],s);0<t.length&&(i+=o)}for(var c=0;c<t.length;c++){var f=l?e.length:t[c].length,p=!1,d=l?0===Object.keys(t[c]).length:0===t[c].length;if(n&&!l&&(p="greedy"===n?""===t[c].join("").trim():1===t[c].length&&0===t[c][0].length),"greedy"===n&&l){for(var h=[],v=0;v<f;v++){var y=u?e[v]:v;h.push(t[c][y])}p=""===h.join("").trim()}if(!p){for(var b=0;b<f;b++){0<b&&!d&&(i+=a);var g=l&&u?e[b]:b;i+=m(t[c][g],b)}c<t.length-1&&(!n||0<f&&!d)&&(i+=o)}}return i}function m(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);var r=e.toString().replace(f,u);return"boolean"==typeof n&&n||"function"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||function(e,t){for(var n=0;n<t.length;n++)if(-1<e.indexOf(t[n]))return!0;return!1}(r,i.BAD_DELIMITERS)||-1<r.indexOf(a)||" "===r.charAt(0)||" "===r.charAt(r.length-1)?l+r+l:r}}};if(i.RECORD_SEP=String.fromCharCode(30),i.UNIT_SEP=String.fromCharCode(31),i.BYTE_ORDER_MARK="\ufeff",i.BAD_DELIMITERS=["\r","\n",'"',i.BYTE_ORDER_MARK],i.WORKERS_SUPPORTED=!n&&!!t.Worker,i.NODE_STREAM_INPUT=1,i.LocalChunkSize=10485760,i.RemoteChunkSize=5242880,i.DefaultDelimiter=",",i.Parser=m,i.ParserHandle=d,i.NetworkStreamer=s,i.FileStreamer=c,i.StringStreamer=f,i.ReadableStreamStreamer=p,t.jQuery){var l=t.jQuery;l.fn.parse=function(e){var n=e.config||{},r=[];return this.each((function(e){if("INPUT"!==l(this).prop("tagName").toUpperCase()||"file"!==l(this).attr("type").toLowerCase()||!t.FileReader||!this.files||0===this.files.length)return!0;for(var a=0;a<this.files.length;a++)r.push({file:this.files[a],inputElem:this,instanceConfig:l.extend({},n)})})),a(),this;function a(){if(0!==r.length){var t,n,a,u=r[0];if(x(e.before)){var s=e.before(u.file,u.inputElem);if("object"==typeof s){if("abort"===s.action)return t=u.file,n=u.inputElem,a=s.reason,void(x(e.error)&&e.error({name:"AbortError"},t,n,a));if("skip"===s.action)return void o();"object"==typeof s.config&&(u.instanceConfig=l.extend(u.instanceConfig,s.config))}else if("skip"===s)return void o()}var c=u.instanceConfig.complete;u.instanceConfig.complete=function(e){x(c)&&c(e,u.file,u.inputElem),o()},i.parse(u.file,u.instanceConfig)}else x(e.complete)&&e.complete()}function o(){r.splice(0,1),a()}}}function u(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=g(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null),this._handle=new d(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,n){if(this.isFirstChunk&&x(this._config.beforeFirstChunk)){var a=this._config.beforeFirstChunk(e);void 0!==a&&(e=a)}this.isFirstChunk=!1,this._halted=!1;var o=this._partialLine+e;this._partialLine="";var l=this._handle.parse(o,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var u=l.meta.cursor;this._finished||(this._partialLine=o.substring(u-this._baseIndex),this._baseIndex=u),l&&l.data&&(this._rowCount+=l.data.length);var s=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(r)t.postMessage({results:l,workerId:i.WORKER_ID,finished:s});else if(x(this._config.chunk)&&!n){if(this._config.chunk(l,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);l=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(l.data),this._completeResults.errors=this._completeResults.errors.concat(l.errors),this._completeResults.meta=l.meta),this._completed||!s||!x(this._config.complete)||l&&l.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),s||l&&l.meta.paused||this._nextChunk(),l}this._halted=!0},this._sendError=function(e){x(this._config.error)?this._config.error(e):r&&this._config.error&&t.postMessage({workerId:i.WORKER_ID,error:e,finished:!1})}}function s(e){var t;(e=e||{}).chunkSize||(e.chunkSize=i.RemoteChunkSize),u.call(this,e),this._nextChunk=n?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(t=new XMLHttpRequest,this._config.withCredentials&&(t.withCredentials=this._config.withCredentials),n||(t.onload=E(this._chunkLoaded,this),t.onerror=E(this._chunkError,this)),t.open("GET",this._input,!n),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var r in e)t.setRequestHeader(r,e[r])}if(this._config.chunkSize){var a=this._start+this._config.chunkSize-1;t.setRequestHeader("Range","bytes="+this._start+"-"+a)}try{t.send()}catch(e){this._chunkError(e.message)}n&&0===t.status&&this._chunkError()}},this._chunkLoaded=function(){4===t.readyState&&(t.status<200||400<=t.status?this._chunkError():(this._start+=t.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(e){var t=e.getResponseHeader("Content-Range");return null===t?-1:parseInt(t.substr(t.lastIndexOf("/")+1))}(t),this.parseChunk(t.responseText)))},this._chunkError=function(e){var n=t.statusText||e;this._sendError(new Error(n))}}function c(e){var t,n;(e=e||{}).chunkSize||(e.chunkSize=i.LocalChunkSize),u.call(this,e);var r="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,r?((t=new FileReader).onload=E(this._chunkLoaded,this),t.onerror=E(this._chunkError,this)):t=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var a=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,a)}var o=t.readAsText(e,this._config.encoding);r||this._chunkLoaded({target:{result:o}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(t.error)}}function f(e){var t;u.call(this,e=e||{}),this.stream=function(e){return t=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e=this._config.chunkSize,n=e?t.substr(0,e):t;return t=e?t.substr(e):"",this._finished=!t,this.parseChunk(n)}}}function p(e){u.call(this,e=e||{});var t=[],n=!0,r=!1;this.pause=function(){u.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){u.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):n=!0},this._streamData=E((function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}}),this),this._streamError=E((function(e){this._streamCleanUp(),this._sendError(e)}),this),this._streamEnd=E((function(){this._streamCleanUp(),r=!0,this._streamData("")}),this),this._streamCleanUp=E((function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)}),this)}function d(e){var t,n,r,a=Math.pow(2,53),o=-a,l=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,u=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,s=this,c=0,f=0,p=!1,d=!1,v=[],y={data:[],errors:[],meta:{}};if(x(e.step)){var b=e.step;e.step=function(t){if(y=t,S())w();else{if(w(),0===y.data.length)return;c+=t.data.length,e.preview&&c>e.preview?n.abort():b(y,s)}}}function E(t){return"greedy"===e.skipEmptyLines?""===t.join("").trim():1===t.length&&0===t[0].length}function w(){if(y&&r&&(M("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+i.DefaultDelimiter+"'"),r=!1),e.skipEmptyLines)for(var t=0;t<y.data.length;t++)E(y.data[t])&&y.data.splice(t--,1);return S()&&function(){if(y)if(Array.isArray(y.data[0])){for(var t=0;S()&&t<y.data.length;t++)y.data[t].forEach(n);y.data.splice(0,1)}else y.data.forEach(n);function n(t){x(e.transformHeader)&&(t=e.transformHeader(t)),v.push(t)}}(),function(){if(!y||!e.header&&!e.dynamicTyping&&!e.transform)return y;function t(t,n){var r,a=e.header?{}:[];for(r=0;r<t.length;r++){var o=r,i=t[r];e.header&&(o=r>=v.length?"__parsed_extra":v[r]),e.transform&&(i=e.transform(i,o)),i=T(o,i),"__parsed_extra"===o?(a[o]=a[o]||[],a[o].push(i)):a[o]=i}return e.header&&(r>v.length?M("FieldMismatch","TooManyFields","Too many fields: expected "+v.length+" fields but parsed "+r,f+n):r<v.length&&M("FieldMismatch","TooFewFields","Too few fields: expected "+v.length+" fields but parsed "+r,f+n)),a}var n=1;return!y.data.length||Array.isArray(y.data[0])?(y.data=y.data.map(t),n=y.data.length):y.data=t(y.data,0),e.header&&y.meta&&(y.meta.fields=v),f+=n,y}()}function S(){return e.header&&0===v.length}function T(t,n){return r=t,e.dynamicTypingFunction&&void 0===e.dynamicTyping[r]&&(e.dynamicTyping[r]=e.dynamicTypingFunction(r)),!0===(e.dynamicTyping[r]||e.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(function(e){if(l.test(e)){var t=parseFloat(e);if(o<t&&t<a)return!0}return!1}(n)?parseFloat(n):u.test(n)?new Date(n):""===n?null:n):n;var r}function M(e,t,n,r){y.errors.push({type:e,code:t,message:n,row:r})}this.parse=function(a,o,l){var u=e.quoteChar||'"';if(e.newline||(e.newline=function(e,t){e=e.substr(0,1048576);var n=new RegExp(h(t)+"([^]*?)"+h(t),"gm"),r=(e=e.replace(n,"")).split("\r"),a=e.split("\n"),o=1<a.length&&a[0].length<r[0].length;if(1===r.length||o)return"\n";for(var i=0,l=0;l<r.length;l++)"\n"===r[l][0]&&i++;return i>=r.length/2?"\r\n":"\r"}(a,u)),r=!1,e.delimiter)x(e.delimiter)&&(e.delimiter=e.delimiter(a),y.meta.delimiter=e.delimiter);else{var s=function(t,n,r,a,o){var l,u,s,c;o=o||[",","\t","|",";",i.RECORD_SEP,i.UNIT_SEP];for(var f=0;f<o.length;f++){var p=o[f],d=0,h=0,v=0;s=void 0;for(var y=new m({comments:a,delimiter:p,newline:n,preview:10}).parse(t),b=0;b<y.data.length;b++)if(r&&E(y.data[b]))v++;else{var g=y.data[b].length;h+=g,void 0!==s?0<g&&(d+=Math.abs(g-s),s=g):s=g}0<y.data.length&&(h/=y.data.length-v),(void 0===u||d<=u)&&(void 0===c||c<h)&&1.99<h&&(u=d,l=p,c=h)}return{successful:!!(e.delimiter=l),bestDelimiter:l}}(a,e.newline,e.skipEmptyLines,e.comments,e.delimitersToGuess);s.successful?e.delimiter=s.bestDelimiter:(r=!0,e.delimiter=i.DefaultDelimiter),y.meta.delimiter=e.delimiter}var c=g(e);return e.preview&&e.header&&c.preview++,t=a,n=new m(c),y=n.parse(t,o,l),w(),p?{meta:{paused:!0}}:y||{meta:{paused:!1}}},this.paused=function(){return p},this.pause=function(){p=!0,n.abort(),t=t.substr(n.getCharIndex())},this.resume=function(){s.streamer._halted?(p=!1,s.streamer.parseChunk(t,!0)):setTimeout(this.resume,3)},this.aborted=function(){return d},this.abort=function(){d=!0,n.abort(),y.meta.aborted=!0,x(e.complete)&&e.complete(y),t=""}}function h(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function m(e){var t,n=(e=e||{}).delimiter,r=e.newline,a=e.comments,o=e.step,l=e.preview,u=e.fastMode,s=t=void 0===e.quoteChar?'"':e.quoteChar;if(void 0!==e.escapeChar&&(s=e.escapeChar),("string"!=typeof n||-1<i.BAD_DELIMITERS.indexOf(n))&&(n=","),a===n)throw new Error("Comment character same as delimiter");!0===a?a="#":("string"!=typeof a||-1<i.BAD_DELIMITERS.indexOf(a))&&(a=!1),"\n"!==r&&"\r"!==r&&"\r\n"!==r&&(r="\n");var c=0,f=!1;this.parse=function(e,i,p){if("string"!=typeof e)throw new Error("Input must be a string");var d=e.length,m=n.length,v=r.length,y=a.length,b=x(o),g=[],E=[],w=[],S=c=0;if(!e)return U();if(u||!1!==u&&-1===e.indexOf(t)){for(var T=e.split(r),M=0;M<T.length;M++){if(w=T[M],c+=w.length,M!==T.length-1)c+=r.length;else if(p)return U();if(!a||w.substr(0,y)!==a){if(b){if(g=[],L(w.split(n)),j(),f)return U()}else L(w.split(n));if(l&&l<=M)return g=g.slice(0,l),U(!0)}}return U()}for(var k=e.indexOf(n,c),_=e.indexOf(r,c),C=new RegExp(h(s)+h(t),"g"),A=e.indexOf(t,c);;)if(e[c]!==t)if(a&&0===w.length&&e.substr(c,y)===a){if(-1===_)return U();c=_+v,_=e.indexOf(r,c),k=e.indexOf(n,c)}else{if(-1!==k&&(k<_||-1===_)){if(!(k<A)){w.push(e.substring(c,k)),c=k+m,k=e.indexOf(n,c);continue}var P=I(k,A,_);if(P&&void 0!==P.nextDelim){k=P.nextDelim,A=P.quoteSearch,w.push(e.substring(c,k)),c=k+m,k=e.indexOf(n,c);continue}}if(-1===_)break;if(w.push(e.substring(c,_)),D(_+v),b&&(j(),f))return U();if(l&&g.length>=l)return U(!0)}else for(A=c,c++;;){if(-1===(A=e.indexOf(t,A+1)))return p||E.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:g.length,index:c}),F();if(A===d-1)return F(e.substring(c,A).replace(C,t));if(t!==s||e[A+1]!==s){if(t===s||0===A||e[A-1]!==s){var O=N(-1===_?k:Math.min(k,_));if(e[A+1+O]===n){w.push(e.substring(c,A).replace(C,t)),e[c=A+1+O+m]!==t&&(A=e.indexOf(t,c)),k=e.indexOf(n,c),_=e.indexOf(r,c);break}var R=N(_);if(e.substr(A+1+R,v)===r){if(w.push(e.substring(c,A).replace(C,t)),D(A+1+R+v),k=e.indexOf(n,c),A=e.indexOf(t,c),b&&(j(),f))return U();if(l&&g.length>=l)return U(!0);break}E.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:g.length,index:c}),A++}}else A++}return F();function L(e){g.push(e),S=c}function N(t){var n=0;if(-1!==t){var r=e.substring(A+1,t);r&&""===r.trim()&&(n=r.length)}return n}function F(t){return p||(void 0===t&&(t=e.substr(c)),w.push(t),c=d,L(w),b&&j()),U()}function D(t){c=t,L(w),w=[],_=e.indexOf(r,c)}function U(e,t){return{data:t?g[0]:g,errors:E,meta:{delimiter:n,linebreak:r,aborted:f,truncated:!!e,cursor:S+(i||0)}}}function j(){o(U(void 0,!0)),g=[],E=[]}function I(r,a,o){var i={nextDelim:void 0,quoteSearch:void 0},l=e.indexOf(t,a+1);if(a<r&&r<l&&(l<o||-1===o)){var u=e.indexOf(n,l);if(-1===u)return i;l<u&&(l=e.indexOf(t,l+1)),i=I(u,l,o)}else i={nextDelim:r,quoteSearch:a};return i}},this.abort=function(){f=!0},this.getCharIndex=function(){return c}}function v(e){var t=e.data,n=a[t.workerId],r=!1;if(t.error)n.userError(t.error,t.file);else if(t.results&&t.results.data){var o={abort:function(){r=!0,y(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:b,resume:b};if(x(n.userStep)){for(var i=0;i<t.results.data.length&&(n.userStep({data:t.results.data[i],errors:t.results.errors,meta:t.results.meta},o),!r);i++);delete t.results}else x(n.userChunk)&&(n.userChunk(t.results,o,t.file),delete t.results)}t.finished&&!r&&y(t.workerId,t.results)}function y(e,t){var n=a[e];x(n.userComplete)&&n.userComplete(t),n.terminate(),delete a[e]}function b(){throw new Error("Not implemented.")}function g(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var n in e)t[n]=g(e[n]);return t}function E(e,t){return function(){e.apply(t,arguments)}}function x(e){return"function"==typeof e}return r&&(t.onmessage=function(e){var n=e.data;if(void 0===i.WORKER_ID&&n&&(i.WORKER_ID=n.workerId),"string"==typeof n.input)t.postMessage({workerId:i.WORKER_ID,results:i.parse(n.input,n.config),finished:!0});else if(t.File&&n.input instanceof File||n.input instanceof Object){var r=i.parse(n.input,n.config);r&&t.postMessage({workerId:i.WORKER_ID,results:r,finished:!0})}}),(s.prototype=Object.create(u.prototype)).constructor=s,(c.prototype=Object.create(u.prototype)).constructor=c,(f.prototype=Object.create(f.prototype)).constructor=f,(p.prototype=Object.create(u.prototype)).constructor=p,i})?r.apply(t,a):r)||(e.exports=o)},function(e,t){e.exports="attribute vec3 aPosition;\nattribute vec3 aNormal;\nuniform mat4 uPMatrix;\nuniform mat4 uMVMatrix;\nuniform mat3 uNMatrix;\nvarying vec3 vNormal;\nvoid main() {\n\tvec4 tPosition = uMVMatrix * vec4(aPosition, 1.0);\n\tgl_Position = uPMatrix * tPosition;\n\tvec3 tNormal = normalize(uNMatrix * aNormal);\n\ttNormal = uNMatrix * aNormal;\n\tvNormal = tNormal;\n}\n"},function(e,t){e.exports="precision mediump float;\nvarying vec3 vNormal;\nstruct PhongMaterial {\n\tvec3 ka;\n\tvec3 kd;\n\tvec3 ks;\n\tfloat ke;\n};\nuniform PhongMaterial material;\nuniform vec3 ambientLight;\nvec3 camLight(vec3 n) {\n\tvec3 ambient = material.ka * ambientLight;\n\tvec3 s = vec3(0, 0, 1);\n\tfloat sn = max(dot(s, n), 0.0);\n\tvec3 diffuse = material.kd * sn;\n\treturn ambient + diffuse;\n}\nvoid main() {\n\tvec3 vNormal = normalize(vNormal);\n\tgl_FragColor = vec4(camLight(vNormal), 1.0);\n}\n"},function(e,t,n){e.exports=!n(19)&&!n(27)((function(){return 7!=Object.defineProperty(n(60)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(26),a=n(17).document,o=r(a)&&r(a.createElement);e.exports=function(e){return o?a.createElement(e):{}}},function(e,t,n){var r=n(20),a=n(21),o=n(109)(!1),i=n(45)("IE_PROTO");e.exports=function(e,t){var n,l=a(e),u=0,s=[];for(n in l)n!=i&&r(l,n)&&s.push(n);for(;t.length>u;)r(l,n=t[u++])&&(~o(s,n)||s.push(n));return s}},function(e,t,n){var r=n(42);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){var r=n(44),a=Math.min;e.exports=function(e){return e>0?a(r(e),9007199254740991):0}},function(e,t,n){e.exports={default:n(111),__esModule:!0}},function(e,t,n){"use strict";var r=n(115)(!0);n(66)(String,"String",(function(e){this._t=String(e),this._i=0}),(function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})}))},function(e,t,n){"use strict";var r=n(33),a=n(16),o=n(67),i=n(24),l=n(31),u=n(116),s=n(50),c=n(68),f=n(15)("iterator"),p=!([].keys&&"next"in[].keys()),d=function(){return this};e.exports=function(e,t,n,h,m,v,y){u(n,t,h);var b,g,E,x=function(e){if(!p&&e in M)return M[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},w=t+" Iterator",S="values"==m,T=!1,M=e.prototype,k=M[f]||M["@@iterator"]||m&&M[m],_=k||x(m),C=m?S?x("entries"):_:void 0,A="Array"==t&&M.entries||k;if(A&&(E=c(A.call(new e)))!==Object.prototype&&E.next&&(s(E,w,!0),r||"function"==typeof E[f]||i(E,f,d)),S&&k&&"values"!==k.name&&(T=!0,_=function(){return k.call(this)}),r&&!y||!p&&!T&&M[f]||i(M,f,_),l[t]=_,l[w]=d,m)if(b={values:S?_:x("values"),keys:v?_:x("keys"),entries:C},y)for(g in b)g in M||o(M,g,b[g]);else a(a.P+a.F*(p||T),t,b);return b}},function(e,t,n){e.exports=n(24)},function(e,t,n){var r=n(20),a=n(30),o=n(45)("IE_PROTO"),i=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=a(e),r(e,o)?e[o]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?i:null}},function(e,t,n){var r=n(61),a=n(47).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,a)}},function(e,t,n){var r=n(16),a=n(10),o=n(27);e.exports=function(e,t){var n=(a.Object||{})[e]||Object[e],i={};i[e]=t(n),r(r.S+r.F*o((function(){n(1)})),"Object",i)}},function(e,t){e.exports=function(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0;n<e.length;++n)if(e[n]===t)return n;return-1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){function a(t){var r=new o.default(t);n.call(e,r)}if(e.addEventListener){var i=(l=!1,"object"==typeof r?l=r.capture||!1:"boolean"==typeof r&&(l=r),e.addEventListener(t,a,r||!1),{v:{remove:function(){e.removeEventListener(t,a,l)}}});if("object"==typeof i)return i.v}else if(e.attachEvent)return e.attachEvent("on"+t,a),{remove:function(){e.detachEvent("on"+t,a)}};var l};var r,a=n(146),o=(r=a)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t){e.exports=function(e,t,n,r){var a=n?n.call(r,e,t):void 0;if(void 0!==a)return!!a;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var o=Object.keys(e),i=Object.keys(t);if(o.length!==i.length)return!1;for(var l=Object.prototype.hasOwnProperty.bind(t),u=0;u<o.length;u++){var s=o[u];if(!l(s))return!1;var c=e[s],f=t[s];if(!1===(a=n?n.call(r,c,f,s):void 0)||void 0===a&&c!==f)return!1}return!0}},function(e,t,n){try{var r=n(71)}catch(e){r=n(71)}var a=/\s+/,o=Object.prototype.toString;function i(e){if(!e||!e.nodeType)throw new Error("A DOM element reference is required");this.el=e,this.list=e.classList}e.exports=function(e){return new i(e)},i.prototype.add=function(e){if(this.list)return this.list.add(e),this;var t=this.array();return~r(t,e)||t.push(e),this.el.className=t.join(" "),this},i.prototype.remove=function(e){if("[object RegExp]"==o.call(e))return this.removeMatching(e);if(this.list)return this.list.remove(e),this;var t=this.array(),n=r(t,e);return~n&&t.splice(n,1),this.el.className=t.join(" "),this},i.prototype.removeMatching=function(e){for(var t=this.array(),n=0;n<t.length;n++)e.test(t[n])&&this.remove(t[n]);return this},i.prototype.toggle=function(e,t){return this.list?(void 0!==t?t!==this.list.toggle(e,t)&&this.list.toggle(e):this.list.toggle(e),this):(void 0!==t?t?this.add(e):this.remove(e):this.has(e)?this.remove(e):this.add(e),this)},i.prototype.array=function(){var e=(this.el.getAttribute("class")||"").replace(/^\s+|\s+$/g,"").split(a);return""===e[0]&&e.shift(),e},i.prototype.has=i.prototype.contains=function(e){return this.list?this.list.contains(e):!!~r(this.array(),e)}},function(e,t,n){var r,a,o;a=[],void 0===(o="function"==typeof(r=function(){function e(e){switch(this.clear(),arguments.length){case 0:break;case 1:"length"in e?n(this,Array.prototype.concat.apply([],e)):this.copy(e);break;default:n(this,arguments)}}var t=e.prototype={constructor:e,get:function(e){var t=this._data[this.hash(e)];return t&&t[1]},set:function(e,t){var n=this.hash(e);n in this._data||this.size++,this._data[n]=[e,t]},multi:function(){n(this,arguments)},copy:function(e){for(var t in e._data)t in this._data||this.size++,this._data[t]=e._data[t]},has:function(e){return this.hash(e)in this._data},search:function(e){for(var t in this._data)if(this._data[t][1]===e)return this._data[t][0];return null},delete:function(e){var t=this.hash(e);t in this._data&&(this.size--,delete this._data[t])},type:function(e){var t=Object.prototype.toString.call(e).slice(8,-1).toLowerCase();return e||"domwindow"!==t&&"window"!==t?t:e+""},keys:function(){var e=[];return this.forEach((function(t,n){e.push(n)})),e},values:function(){var e=[];return this.forEach((function(t){e.push(t)})),e},entries:function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),e},count:function(){return this.size},clear:function(){this._data={},this.size=0},clone:function(){return new e(this)},hash:function(t){switch(this.type(t)){case"undefined":case"null":case"boolean":case"number":case"regexp":return t+"";case"date":return"♣"+t.getTime();case"string":return"♠"+t;case"array":for(var n=[],r=0;r<t.length;r++)n[r]=this.hash(t[r]);return"♥"+n.join("⁞");default:return t.hasOwnProperty("_hmuid_")||(t._hmuid_=++e.uid,a=t,o="_hmuid_",Object.defineProperty&&Object.defineProperty(a,o,{enumerable:!1})),"♦"+t._hmuid_}var a,o},forEach:function(e,t){for(var n in this._data){var r=this._data[n];e.call(t||this,r[1],r[0])}}};function n(e,t){for(var n=0;n<t.length;n+=2)e.set(t[n],t[n+1])}return e.uid=0,"undefined"!=typeof Symbol&&void 0!==Symbol.iterator&&(t[Symbol.iterator]=function(){var e=this.entries(),t=0;return{next:function(){if(t===e.length)return{done:!0};var n=e[t++];return{value:{key:n[0],value:n[1]},done:!1}}}}),["set","multi","copy","delete","clear","forEach"].forEach((function(e){var n=t[e];t[e]=function(){return n.apply(this,arguments),this}})),e.prototype.remove=e.prototype.delete,e})?r.apply(t,a):r)||(e.exports=o)},function(e,t){e.exports="attribute vec3 aPosition;\nuniform mat4 uPMatrix;\nuniform mat4 uMVMatrix;\nvarying vec4 position_;\nvoid main() {\n\tmat4 modelViewProjectionMatrix = uPMatrix * uMVMatrix;\n\tgl_Position = modelViewProjectionMatrix * vec4(aPosition, 1.0);\n\tposition_ = modelViewProjectionMatrix * vec4(aPosition, 1.0);\n}\n"},function(e,t){e.exports="precision mediump float;\nvarying vec4 position_;\nvoid main() {\n\tfloat depth = ((position_.z / position_.w) + 1.0) * 0.5;\n\tgl_FragColor = vec4(depth, depth, depth, 1.0);\n}\n"},function(e,t){e.exports="attribute vec3 aPosition;\nattribute vec3 aNormal;\nuniform mat4 uPMatrix;\nuniform mat4 uMVMatrix;\nuniform mat3 uNMatrix;\nvarying vec3 vNormal;\nvarying vec4 vPosition;\nvoid main() {\n\tvec4 tPosition = uMVMatrix * vec4(aPosition, 1.0);\n\tgl_Position = uPMatrix * tPosition;\n\tvec3 tNormal = normalize(uNMatrix * aNormal);\n\tvPosition = tPosition;\n\tvNormal = tNormal;\n}\n"},function(e,t){e.exports="precision mediump float;\nvarying vec3 vNormal;\nvarying vec4 vPosition;\nstruct PhongMaterial {\n\tvec3 ka;\n\tvec3 kd;\n\tvec3 ks;\n\tfloat ke;\n};\nuniform PhongMaterial material;\nuniform vec3 ambientLight;\nconst int MAX_LIGHT_SOURCES = 8;\nstruct LightSource {\n\tbool isOn;\n\tvec3 position;\n\tvec3 color;\n};\nuniform LightSource light[MAX_LIGHT_SOURCES];\nvec3 toonShader(vec3 p, vec3 n, vec3 v, LightSource l) {\n\tvec3 L = l.color;\n\tfloat uTones = 6.0;\n\tfloat uSpecularTones = 7.0;\n\tvec3 s = normalize(l.position - p);\n\tvec3 r = reflect(-s, n);\n\tfloat sn = max(dot(s, n), 0.0);\n\tfloat toneDiff = floor(sn * uTones);\n\tsn = toneDiff / uTones;\n\tvec3 diffuse = (material.kd * L) * sn;\n\tfloat rv = max(dot(r, v), 0.0);\n\tfloat toneSpec = floor(rv * uSpecularTones);\n\trv = toneSpec / uSpecularTones;\n\tvec3 specular = (material.ks * L) * pow(rv, material.ke);\n\treturn diffuse + specular;\n}\nvec3 toonShader(vec3 p, vec3 n, vec3 v) {\n\tvec3 result = material.ka * ambientLight;\n\tfor (int j = 0; j < MAX_LIGHT_SOURCES; j++) {\n\t\tif ((light[j]).isOn) {\n\t\t\tresult += toonShader(p, n, v, light[j]);\n\t\t}\n\t}\n\treturn result;\n}\nvoid main() {\n\tvec3 v = normalize(-vPosition.xyz);\n\tvec3 vNormal = normalize(vNormal);\n\tgl_FragColor = vec4(toonShader(vPosition.xyz, vNormal, v), 1.0);\n}\n"},function(e,t){e.exports="attribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTextureCoord;\nuniform mat4 uPMatrix;\nuniform mat4 uMVMatrix;\nuniform mat3 uNMatrix;\nvarying vec2 vTextureCoord;\nvoid main() {\n\tvec4 tPosition = uMVMatrix * vec4(aPosition, 1.0);\n\tgl_Position = uPMatrix * tPosition;\n\tvec3 tNormal = normalize(uNMatrix * aNormal);\n\tvTextureCoord = aTextureCoord;\n}\n"},function(e,t){e.exports="precision mediump float;\nuniform sampler2D uTexture;\nvarying vec2 vTextureCoord;\nvoid main() {\n\tgl_FragColor = texture2D(uTexture, vTextureCoord);\n}\n"},function(e,t){e.exports=function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,t),a.l=!0,a.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){if(e&&t){var n=Array.isArray(t)?t:t.split(","),r=e.name||"",a=e.type||"",o=a.replace(/\/.*$/,"");return n.some((function(e){var t=e.trim();return"."===t.charAt(0)?r.toLowerCase().endsWith(t.toLowerCase()):t.endsWith("/*")?o===t.replace(/\/.*$/,""):a===t}))}return!0}}])},function(e,t,n){var r=r||{REVISION:"ALPHA"};!function(e){"use strict";var t=function(e,t){if(!e)throw t||"Assertion failed"},n=function(e,t,n){return e.hasOwnProperty(t)?e[t]:n},r=!1,a=0,o=function(){if(r)return r=!1,a;var e=2*Math.random()-1,t=2*Math.random()-1,n=e*e+t*t;if(0==n||n>1)return o();var i=Math.sqrt(-2*Math.log(n)/n);return a=t*i,r=!0,e*i},i=function(e){if(void 0===e||isNaN(e))return[];if("undefined"==typeof ArrayBuffer){for(var t=new Array(e),n=0;n<e;n++)t[n]=0;return t}return new Float64Array(e)},l=function(e,t,n){for(var r,a=void 0!==n,i=[],l=0;l<e;l++){for(var u=[],s=0;s<t;s++)a?u.push(n):u.push((r=1e-4,0+o()*r));i.push(u)}return i},u=function(e,t){for(var n=e.length,r=0,a=0;a<n;a++){var o=e[a],i=t[a];r+=(o-i)*(o-i)}return r},s=function(e,n,r){var a=Math.sqrt(e.length),o=Math.floor(a);t(o===a,"D should have square number of elements.");for(var l=Math.log(n),u=i(o*o),s=i(o),c=0;c<o;c++){for(var f=-1/0,p=1/0,d=1,h=!1,m=0;!h;){for(var v=0,y=0;y<o;y++){var b=Math.exp(-e[c*o+y]*d);c===y&&(b=0),s[y]=b,v+=b}var g=0;for(y=0;y<o;y++){b=s[y]/v;s[y]=b,b>1e-7&&(g-=b*Math.log(b))}g>l?(f=d,p===1/0?d*=2:d=(d+p)/2):(p=d,f===-1/0?d/=2:d=(d+f)/2),m++,Math.abs(g-l)<r&&(h=!0),m>=50&&(h=!0)}for(y=0;y<o;y++)u[c*o+y]=s[y]}var E=i(o*o),x=2*o;for(c=0;c<o;c++)for(y=0;y<o;y++)E[c*o+y]=Math.max((u[c*o+y]+u[y*o+c])/x,1e-100);return E};function c(e){return e>0?1:e<0?-1:0}var f=function(e){e=e||{};this.perplexity=n(e,"perplexity",30),this.dim=n(e,"dim",2),this.epsilon=n(e,"epsilon",10),this.iter=0};f.prototype={initDataRaw:function(e){var n=e.length,r=e[0].length;t(n>0," X is empty? You must have some data!"),t(r>0," X[0] is empty? Where is the data?");var a=function(e){for(var t=e.length,n=i(t*t),r=0;r<t;r++)for(var a=r+1;a<t;a++){var o=u(e[r],e[a]);n[r*t+a]=o,n[a*t+r]=o}return n}(e);this.P=s(a,this.perplexity,1e-4),this.N=n,this.initSolution()},initDataDist:function(e){var n=e.length;t(n>0," X is empty? You must have some data!");for(var r=i(n*n),a=0;a<n;a++)for(var o=a+1;o<n;o++){var l=e[a][o];r[a*n+o]=l,r[o*n+a]=l}this.P=s(r,this.perplexity,1e-4),this.N=n,this.initSolution()},initSolution:function(){this.Y=l(this.N,this.dim),this.gains=l(this.N,this.dim,1),this.ystep=l(this.N,this.dim,0),this.iter=0},getSolution:function(){return this.Y},step:function(){this.iter+=1;for(var e=this.N,t=this.costGrad(this.Y),n=t.cost,r=t.grad,a=i(this.dim),o=0;o<e;o++)for(var l=0;l<this.dim;l++){var u=r[o][l],s=this.ystep[o][l],f=this.gains[o][l],p=c(u)===c(s)?.8*f:f+.2;f<.01&&(f=.01),this.gains[o][l]=p;var d=(this.iter<250?.5:.8)*s-this.epsilon*p*r[o][l];this.ystep[o][l]=d,this.Y[o][l]+=d,a[l]+=this.Y[o][l]}for(o=0;o<e;o++)for(l=0;l<this.dim;l++)this.Y[o][l]-=a[l]/e;return n},debugGrad:function(){for(var e=this.N,t=this.costGrad(this.Y),n=(t.cost,t.grad),r=1e-5,a=0;a<e;a++)for(var o=0;o<this.dim;o++){var i=this.Y[a][o];this.Y[a][o]=i+r;var l=this.costGrad(this.Y);this.Y[a][o]=i-r;var u=this.costGrad(this.Y),s=n[a][o],c=(l.cost-u.cost)/(2*r);console.log(a+","+o+": gradcheck analytic: "+s+" vs. numerical: "+c),this.Y[a][o]=i}},costGrad:function(e){for(var t=this.N,n=this.dim,r=this.P,a=this.iter<100?4:1,o=i(t*t),l=0,u=0;u<t;u++)for(var s=u+1;s<t;s++){for(var c=0,f=0;f<n;f++){var p=e[u][f]-e[s][f];c+=p*p}var d=1/(1+c);o[u*t+s]=d,o[s*t+u]=d,l+=2*d}for(var h=t*t,m=i(h),v=0;v<h;v++)m[v]=Math.max(o[v]/l,1e-100);var y=0,b=[];for(u=0;u<t;u++){var g=new Array(n);for(f=0;f<n;f++)g[f]=0;for(s=0;s<t;s++){y+=-r[u*t+s]*Math.log(m[u*t+s]);var E=4*(a*r[u*t+s]-m[u*t+s])*o[u*t+s];for(f=0;f<n;f++)g[f]+=E*(e[u][f]-e[s][f])}b.push(g)}return{cost:y,grad:b}}},e.tSNE=f}(r),function(t){"use strict";void 0===e.exports?window.tsnejs=t:e.exports=t}(r)},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return r}));Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function r(){"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}}).call(this,n(172))},,,,,,function(e,t,n){"use strict";
/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(39),a="function"==typeof Symbol&&Symbol.for,o=a?Symbol.for("react.element"):60103,i=a?Symbol.for("react.portal"):60106,l=a?Symbol.for("react.fragment"):60107,u=a?Symbol.for("react.strict_mode"):60108,s=a?Symbol.for("react.profiler"):60114,c=a?Symbol.for("react.provider"):60109,f=a?Symbol.for("react.context"):60110,p=a?Symbol.for("react.forward_ref"):60112,d=a?Symbol.for("react.suspense"):60113;a&&Symbol.for("react.suspense_list");var h=a?Symbol.for("react.memo"):60115,m=a?Symbol.for("react.lazy"):60116;a&&Symbol.for("react.fundamental"),a&&Symbol.for("react.responder"),a&&Symbol.for("react.scope");var v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function E(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}function x(){}function w(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}E.prototype.isReactComponent={},E.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},E.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=E.prototype;var S=w.prototype=new x;S.constructor=w,r(S,E.prototype),S.isPureReactComponent=!0;var T={current:null},M={current:null},k=Object.prototype.hasOwnProperty,_={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r,a={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!_.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:M.current}}function A(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var P=/\/+/g,O=[];function R(e,t,n,r){if(O.length){var a=O.pop();return a.result=e,a.keyPrefix=t,a.func=n,a.context=r,a.count=0,a}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function L(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>O.length&&O.push(e)}function N(e,t,n){return null==e?0:function e(t,n,r,a){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case o:case i:u=!0}}if(u)return r(a,t,""===n?"."+F(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+F(l=t[s],s);u+=e(l,c,r,a)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=v&&t[v]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(l=t.next()).done;)u+=e(l=l.value,c=n+F(l,s++),r,a);else if("object"===l)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function F(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function U(e,t,n){var r=e.result,a=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?j(e,r,n,(function(e){return e})):null!=e&&(A(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n)),r.push(e))}function j(e,t,n,r,a){var o="";null!=n&&(o=(""+n).replace(P,"$&/")+"/"),N(e,U,t=R(t,o,r,a)),L(t)}function I(){var e=T.current;if(null===e)throw Error(y(321));return e}var B={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return j(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;N(e,D,t=R(null,null,t,n)),L(t)},count:function(e){return N(e,(function(){return null}),null)},toArray:function(e){var t=[];return j(e,t,null,(function(e){return e})),t},only:function(e){if(!A(e))throw Error(y(143));return e}},createRef:function(){return{current:null}},Component:E,PureComponent:w,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return I().useCallback(e,t)},useContext:function(e,t){return I().useContext(e,t)},useEffect:function(e,t){return I().useEffect(e,t)},useImperativeHandle:function(e,t,n){return I().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return I().useLayoutEffect(e,t)},useMemo:function(e,t){return I().useMemo(e,t)},useReducer:function(e,t,n){return I().useReducer(e,t,n)},useRef:function(e){return I().useRef(e)},useState:function(e){return I().useState(e)},Fragment:l,Profiler:s,StrictMode:u,Suspense:d,createElement:C,cloneElement:function(e,t,n){if(null==e)throw Error(y(267,e));var a=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=M.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)k.call(t,c)&&!_.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},createFactory:function(e){var t=C.bind(null,e);return t.type=e,t},isValidElement:A,version:"16.12.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:M,IsSomeRendererActing:{current:!1},assign:r}},z={default:B},V=z&&B||z;e.exports=V.default||V},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),a=n(39),o=n(92);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=null,u={};function s(){if(l)for(var e in u){var t=u[e],n=l.indexOf(e);if(!(-1<n))throw Error(i(96,e));if(!f[n]){if(!t.extractEvents)throw Error(i(97,e));for(var r in f[n]=t,n=t.eventTypes){var a=void 0,o=n[r],s=t,d=r;if(p.hasOwnProperty(d))throw Error(i(99,d));p[d]=o;var h=o.phasedRegistrationNames;if(h){for(a in h)h.hasOwnProperty(a)&&c(h[a],s,d);a=!0}else o.registrationName?(c(o.registrationName,s,d),a=!0):a=!1;if(!a)throw Error(i(98,r,e))}}}}function c(e,t,n){if(d[e])throw Error(i(100,e));d[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],p={},d={},h={};function m(e,t,n,r,a,o,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var v=!1,y=null,b=!1,g=null,E={onError:function(e){v=!0,y=e}};function x(e,t,n,r,a,o,i,l,u){v=!1,y=null,m.apply(E,arguments)}var w=null,S=null,T=null;function M(e,t,n){var r=e.type||"unknown-event";e.currentTarget=T(n),function(e,t,n,r,a,o,l,u,s){if(x.apply(this,arguments),v){if(!v)throw Error(i(198));var c=y;v=!1,y=null,b||(b=!0,g=c)}}(r,t,void 0,e),e.currentTarget=null}function k(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function _(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var C=null;function A(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)M(e,t[r],n[r]);else t&&M(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function P(e){if(null!==e&&(C=k(C,e)),e=C,C=null,e){if(_(e,A),C)throw Error(i(95));if(b)throw e=g,b=!1,g=null,e}}var O={injectEventPluginOrder:function(e){if(l)throw Error(i(101));l=Array.prototype.slice.call(e),s()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!u.hasOwnProperty(t)||u[t]!==r){if(u[t])throw Error(i(102,t));u[t]=r,n=!0}}n&&s()}};function R(e,t){var n=e.stateNode;if(!n)return null;var r=w(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var L=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;L.hasOwnProperty("ReactCurrentDispatcher")||(L.ReactCurrentDispatcher={current:null}),L.hasOwnProperty("ReactCurrentBatchConfig")||(L.ReactCurrentBatchConfig={suspense:null});var N=/^(.*)[\\\/]/,F="function"==typeof Symbol&&Symbol.for,D=F?Symbol.for("react.element"):60103,U=F?Symbol.for("react.portal"):60106,j=F?Symbol.for("react.fragment"):60107,I=F?Symbol.for("react.strict_mode"):60108,B=F?Symbol.for("react.profiler"):60114,z=F?Symbol.for("react.provider"):60109,V=F?Symbol.for("react.context"):60110,W=F?Symbol.for("react.concurrent_mode"):60111,Y=F?Symbol.for("react.forward_ref"):60112,H=F?Symbol.for("react.suspense"):60113,K=F?Symbol.for("react.suspense_list"):60120,X=F?Symbol.for("react.memo"):60115,G=F?Symbol.for("react.lazy"):60116;F&&Symbol.for("react.fundamental"),F&&Symbol.for("react.responder"),F&&Symbol.for("react.scope");var Z="function"==typeof Symbol&&Symbol.iterator;function q(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=Z&&e[Z]||e["@@iterator"])?e:null}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case j:return"Fragment";case U:return"Portal";case B:return"Profiler";case I:return"StrictMode";case H:return"Suspense";case K:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case V:return"Context.Consumer";case z:return"Context.Provider";case Y:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case X:return $(e.type);case G:if(e=1===e._status?e._result:null)return $(e)}return null}function Q(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,a=e._debugSource,o=$(e.type);n=null,r&&(n=$(r.type)),r=o,o="",a?o=" (at "+a.fileName.replace(N,"")+":"+a.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}var J=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),ee=null,te=null,ne=null;function re(e){if(e=S(e)){if("function"!=typeof ee)throw Error(i(280));var t=w(e.stateNode);ee(e.stateNode,e.type,t)}}function ae(e){te?ne?ne.push(e):ne=[e]:te=e}function oe(){if(te){var e=te,t=ne;if(ne=te=null,re(e),t)for(e=0;e<t.length;e++)re(t[e])}}function ie(e,t){return e(t)}function le(e,t,n,r){return e(t,n,r)}function ue(){}var se=ie,ce=!1,fe=!1;function pe(){null===te&&null===ne||(ue(),oe())}new Map;var de=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,he=Object.prototype.hasOwnProperty,me={},ve={};function ye(e,t,n,r,a,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var be={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){be[e]=new ye(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];be[t]=new ye(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){be[e]=new ye(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){be[e]=new ye(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){be[e]=new ye(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){be[e]=new ye(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){be[e]=new ye(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){be[e]=new ye(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){be[e]=new ye(e,5,!1,e.toLowerCase(),null,!1)}));var ge=/[\-:]([a-z])/g;function Ee(e){return e[1].toUpperCase()}function xe(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function we(e,t,n,r){var a=be.hasOwnProperty(t)?be[t]:null;(null!==a?0===a.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!he.call(ve,e)||!he.call(me,e)&&(de.test(e)?ve[e]=!0:(me[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Se(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Te(e){e._valueTracker||(e._valueTracker=function(e){var t=Se(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Me(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Se(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ke(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function _e(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=xe(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ce(e,t){null!=(t=t.checked)&&we(e,"checked",t,!1)}function Ae(e,t){Ce(e,t);var n=xe(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&Oe(e,t.type,xe(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Pe(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Oe(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Re(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Le(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+xe(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function Ne(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Fe(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw Error(i(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(i(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:xe(n)}}function De(e,t){var n=xe(t.value),r=xe(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ue(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(ge,Ee);be[t]=new ye(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(ge,Ee);be[t]=new ye(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(ge,Ee);be[t]=new ye(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){be[e]=new ye(e,1,!1,e.toLowerCase(),null,!1)})),be.xlinkHref=new ye("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){be[e]=new ye(e,1,!1,e.toLowerCase(),null,!0)}));var je={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Be(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ze,Ve=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,a){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==je.svg||"innerHTML"in e)e.innerHTML=t;else{for((ze=ze||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ze.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function We(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ye(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var He={animationend:Ye("Animation","AnimationEnd"),animationiteration:Ye("Animation","AnimationIteration"),animationstart:Ye("Animation","AnimationStart"),transitionend:Ye("Transition","TransitionEnd")},Ke={},Xe={};function Ge(e){if(Ke[e])return Ke[e];if(!He[e])return e;var t,n=He[e];for(t in n)if(n.hasOwnProperty(t)&&t in Xe)return Ke[e]=n[t];return e}J&&(Xe=document.createElement("div").style,"AnimationEvent"in window||(delete He.animationend.animation,delete He.animationiteration.animation,delete He.animationstart.animation),"TransitionEvent"in window||delete He.transitionend.transition);var Ze=Ge("animationend"),qe=Ge("animationiteration"),$e=Ge("animationstart"),Qe=Ge("transitionend"),Je="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");function et(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function tt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function nt(e){if(et(e)!==e)throw Error(i(188))}function rt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=et(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return nt(a),e;if(o===r)return nt(a),t;o=o.sibling}throw Error(i(188))}if(n.return!==r.return)n=a,r=o;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l){for(u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var at,ot,it,lt=!1,ut=[],st=null,ct=null,ft=null,pt=new Map,dt=new Map,ht=[],mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),vt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function yt(e,t,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r}}function bt(e,t){switch(e){case"focus":case"blur":st=null;break;case"dragenter":case"dragleave":ct=null;break;case"mouseover":case"mouseout":ft=null;break;case"pointerover":case"pointerout":pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":dt.delete(t.pointerId)}}function gt(e,t,n,r,a){return null===e||e.nativeEvent!==a?(e=yt(t,n,r,a),null!==t&&(null!==(t=dr(t))&&ot(t)),e):(e.eventSystemFlags|=r,e)}function Et(e){var t=pr(e.target);if(null!==t){var n=et(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=tt(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){it(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function xt(e){if(null!==e.blockedOn)return!1;var t=On(e.topLevelType,e.eventSystemFlags,e.nativeEvent);if(null!==t){var n=dr(t);return null!==n&&ot(n),e.blockedOn=t,!1}return!0}function wt(e,t,n){xt(e)&&n.delete(t)}function St(){for(lt=!1;0<ut.length;){var e=ut[0];if(null!==e.blockedOn){null!==(e=dr(e.blockedOn))&&at(e);break}var t=On(e.topLevelType,e.eventSystemFlags,e.nativeEvent);null!==t?e.blockedOn=t:ut.shift()}null!==st&&xt(st)&&(st=null),null!==ct&&xt(ct)&&(ct=null),null!==ft&&xt(ft)&&(ft=null),pt.forEach(wt),dt.forEach(wt)}function Tt(e,t){e.blockedOn===t&&(e.blockedOn=null,lt||(lt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,St)))}function Mt(e){function t(t){return Tt(t,e)}if(0<ut.length){Tt(ut[0],e);for(var n=1;n<ut.length;n++){var r=ut[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==st&&Tt(st,e),null!==ct&&Tt(ct,e),null!==ft&&Tt(ft,e),pt.forEach(t),dt.forEach(t),n=0;n<ht.length;n++)(r=ht[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ht.length&&null===(n=ht[0]).blockedOn;)Et(n),null===n.blockedOn&&ht.shift()}function kt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function _t(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Ct(e,t,n){(t=R(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function At(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=_t(t);for(t=n.length;0<t--;)Ct(n[t],"captured",e);for(t=0;t<n.length;t++)Ct(n[t],"bubbled",e)}}function Pt(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=R(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function Ot(e){e&&e.dispatchConfig.registrationName&&Pt(e._targetInst,null,e)}function Rt(e){_(e,At)}function Lt(){return!0}function Nt(){return!1}function Ft(e,t,n,r){for(var a in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(a)&&((t=e[a])?this[a]=t(n):"target"===a?this.target=r:this[a]=n[a]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Lt:Nt,this.isPropagationStopped=Nt,this}function Dt(e,t,n,r){if(this.eventPool.length){var a=this.eventPool.pop();return this.call(a,e,t,n,r),a}return new this(e,t,n,r)}function Ut(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function jt(e){e.eventPool=[],e.getPooled=Dt,e.release=Ut}a(Ft.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Lt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Lt)},persist:function(){this.isPersistent=Lt},isPersistent:Nt,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Nt,this._dispatchInstances=this._dispatchListeners=null}}),Ft.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Ft.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,jt(n),n},jt(Ft);var It=Ft.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Bt=Ft.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),zt=Ft.extend({view:null,detail:null}),Vt=zt.extend({relatedTarget:null});function Wt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Yt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Ht={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Kt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Xt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Kt[e])&&!!t[e]}function Gt(){return Xt}for(var Zt=zt.extend({key:function(e){if(e.key){var t=Yt[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Wt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Ht[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Gt,charCode:function(e){return"keypress"===e.type?Wt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Wt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),qt=0,$t=0,Qt=!1,Jt=!1,en=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Gt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=qt;return qt=e.screenX,Qt?"mousemove"===e.type?e.screenX-t:0:(Qt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=$t;return $t=e.screenY,Jt?"mousemove"===e.type?e.screenY-t:0:(Jt=!0,0)}}),tn=en.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),nn=en.extend({dataTransfer:null}),rn=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Gt}),an=Ft.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),on=en.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ln=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Ze,"animationEnd",2],[qe,"animationIteration",2],[$e,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Qe,"transitionEnd",2],["waiting","waiting",2]],un={},sn={},cn=0;cn<ln.length;cn++){var fn=ln[cn],pn=fn[0],dn=fn[1],hn=fn[2],mn="on"+(dn[0].toUpperCase()+dn.slice(1)),vn={phasedRegistrationNames:{bubbled:mn,captured:mn+"Capture"},dependencies:[pn],eventPriority:hn};un[dn]=vn,sn[pn]=vn}var yn={eventTypes:un,getEventPriority:function(e){return void 0!==(e=sn[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var a=sn[e];if(!a)return null;switch(e){case"keypress":if(0===Wt(n))return null;case"keydown":case"keyup":e=Zt;break;case"blur":case"focus":e=Vt;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=en;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=nn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=rn;break;case Ze:case qe:case $e:e=It;break;case Qe:e=an;break;case"scroll":e=zt;break;case"wheel":e=on;break;case"copy":case"cut":case"paste":e=Bt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=tn;break;default:e=Ft}return Rt(t=e.getPooled(a,t,n,r)),t}},bn=o.unstable_UserBlockingPriority,gn=o.unstable_runWithPriority,En=yn.getEventPriority,xn=10,wn=[];function Sn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=pr(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var a=kt(e.nativeEvent);r=e.topLevelType;for(var o=e.nativeEvent,i=e.eventSystemFlags,l=null,u=0;u<f.length;u++){var s=f[u];s&&(s=s.extractEvents(r,t,o,a,i))&&(l=k(l,s))}P(l)}}var Tn=!0;function Mn(e,t){kn(t,e,!1)}function kn(e,t,n){switch(En(t)){case 0:var r=_n.bind(null,t,1);break;case 1:r=Cn.bind(null,t,1);break;default:r=Pn.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function _n(e,t,n){ce||ue();var r=Pn,a=ce;ce=!0;try{le(r,e,t,n)}finally{(ce=a)||pe()}}function Cn(e,t,n){gn(bn,Pn.bind(null,e,t,n))}function An(e,t,n,r){if(wn.length){var a=wn.pop();a.topLevelType=e,a.eventSystemFlags=t,a.nativeEvent=n,a.targetInst=r,e=a}else e={topLevelType:e,eventSystemFlags:t,nativeEvent:n,targetInst:r,ancestors:[]};try{if(t=Sn,n=e,fe)t(n,void 0);else{fe=!0;try{se(t,n,void 0)}finally{fe=!1,pe()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,wn.length<xn&&wn.push(e)}}function Pn(e,t,n){if(Tn)if(0<ut.length&&-1<mt.indexOf(e))e=yt(null,e,t,n),ut.push(e);else{var r=On(e,t,n);null===r?bt(e,n):-1<mt.indexOf(e)?(e=yt(r,e,t,n),ut.push(e)):function(e,t,n,r){switch(t){case"focus":return st=gt(st,e,t,n,r),!0;case"dragenter":return ct=gt(ct,e,t,n,r),!0;case"mouseover":return ft=gt(ft,e,t,n,r),!0;case"pointerover":var a=r.pointerId;return pt.set(a,gt(pt.get(a)||null,e,t,n,r)),!0;case"gotpointercapture":return a=r.pointerId,dt.set(a,gt(dt.get(a)||null,e,t,n,r)),!0}return!1}(r,e,t,n)||(bt(e,n),An(e,t,n,null))}}function On(e,t,n){var r=kt(n);if(null!==(r=pr(r))){var a=et(r);if(null===a)r=null;else{var o=a.tag;if(13===o){if(null!==(r=tt(a)))return r;r=null}else if(3===o){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;r=null}else a!==r&&(r=null)}}return An(e,t,n,r),null}function Rn(e){if(!J)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var Ln=new("function"==typeof WeakMap?WeakMap:Map);function Nn(e){var t=Ln.get(e);return void 0===t&&(t=new Set,Ln.set(e,t)),t}function Fn(e,t,n){if(!n.has(e)){switch(e){case"scroll":kn(t,"scroll",!0);break;case"focus":case"blur":kn(t,"focus",!0),kn(t,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":Rn(e)&&kn(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Je.indexOf(e)&&Mn(e,t)}n.add(e)}}var Dn={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Un=["Webkit","ms","Moz","O"];function jn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Dn.hasOwnProperty(e)&&Dn[e]?(""+t).trim():t+"px"}function In(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=jn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(Dn).forEach((function(e){Un.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Dn[t]=Dn[e]}))}));var Bn=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function zn(e,t){if(t){if(Bn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62,""))}}function Vn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Wn(e,t){var n=Nn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++)Fn(t[r],e,n)}function Yn(){}function Hn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Kn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Xn(e,t){var n,r=Kn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Kn(r)}}function Gn(){for(var e=window,t=Hn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Hn((e=t.contentWindow).document)}return t}function Zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var qn="$",$n="/$",Qn="$?",Jn="$!",er=null,tr=null;function nr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function rr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ar="function"==typeof setTimeout?setTimeout:void 0,or="function"==typeof clearTimeout?clearTimeout:void 0;function ir(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function lr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===qn||n===Jn||n===Qn){if(0===t)return e;t--}else n===$n&&t++}e=e.previousSibling}return null}var ur=Math.random().toString(36).slice(2),sr="__reactInternalInstance$"+ur,cr="__reactEventHandlers$"+ur,fr="__reactContainere$"+ur;function pr(e){var t=e[sr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[fr]||n[sr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=lr(e);null!==e;){if(n=e[sr])return n;e=lr(e)}return t}n=(e=n).parentNode}return null}function dr(e){return!(e=e[sr]||e[fr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function hr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function mr(e){return e[cr]||null}var vr=null,yr=null,br=null;function gr(){if(br)return br;var e,t,n=yr,r=n.length,a="value"in vr?vr.value:vr.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return br=a.slice(e,1<t?1-t:void 0)}var Er=Ft.extend({data:null}),xr=Ft.extend({data:null}),wr=[9,13,27,32],Sr=J&&"CompositionEvent"in window,Tr=null;J&&"documentMode"in document&&(Tr=document.documentMode);var Mr=J&&"TextEvent"in window&&!Tr,kr=J&&(!Sr||Tr&&8<Tr&&11>=Tr),_r=String.fromCharCode(32),Cr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Ar=!1;function Pr(e,t){switch(e){case"keyup":return-1!==wr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Or(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Rr=!1;var Lr={eventTypes:Cr,extractEvents:function(e,t,n,r){var a;if(Sr)e:{switch(e){case"compositionstart":var o=Cr.compositionStart;break e;case"compositionend":o=Cr.compositionEnd;break e;case"compositionupdate":o=Cr.compositionUpdate;break e}o=void 0}else Rr?Pr(e,n)&&(o=Cr.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Cr.compositionStart);return o?(kr&&"ko"!==n.locale&&(Rr||o!==Cr.compositionStart?o===Cr.compositionEnd&&Rr&&(a=gr()):(yr="value"in(vr=r)?vr.value:vr.textContent,Rr=!0)),o=Er.getPooled(o,t,n,r),a?o.data=a:null!==(a=Or(n))&&(o.data=a),Rt(o),a=o):a=null,(e=Mr?function(e,t){switch(e){case"compositionend":return Or(t);case"keypress":return 32!==t.which?null:(Ar=!0,_r);case"textInput":return(e=t.data)===_r&&Ar?null:e;default:return null}}(e,n):function(e,t){if(Rr)return"compositionend"===e||!Sr&&Pr(e,t)?(e=gr(),br=yr=vr=null,Rr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return kr&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=xr.getPooled(Cr.beforeInput,t,n,r)).data=e,Rt(t)):t=null,null===a?t:null===t?a:[a,t]}},Nr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Nr[e.type]:"textarea"===t}var Dr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ur(e,t,n){return(e=Ft.getPooled(Dr.change,e,t,n)).type="change",ae(n),Rt(e),e}var jr=null,Ir=null;function Br(e){P(e)}function zr(e){if(Me(hr(e)))return e}function Vr(e,t){if("change"===e)return t}var Wr=!1;function Yr(){jr&&(jr.detachEvent("onpropertychange",Hr),Ir=jr=null)}function Hr(e){if("value"===e.propertyName&&zr(Ir))if(e=Ur(Ir,e,kt(e)),ce)P(e);else{ce=!0;try{ie(Br,e)}finally{ce=!1,pe()}}}function Kr(e,t,n){"focus"===e?(Yr(),Ir=n,(jr=t).attachEvent("onpropertychange",Hr)):"blur"===e&&Yr()}function Xr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return zr(Ir)}function Gr(e,t){if("click"===e)return zr(t)}function Zr(e,t){if("input"===e||"change"===e)return zr(t)}J&&(Wr=Rn("input")&&(!document.documentMode||9<document.documentMode));var qr,$r={eventTypes:Dr,_isInputEventSupported:Wr,extractEvents:function(e,t,n,r){var a=t?hr(t):window,o=a.nodeName&&a.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===a.type)var i=Vr;else if(Fr(a))if(Wr)i=Zr;else{i=Xr;var l=Kr}else(o=a.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===a.type||"radio"===a.type)&&(i=Gr);if(i&&(i=i(e,t)))return Ur(i,n,r);l&&l(e,a,t),"blur"===e&&(e=a._wrapperState)&&e.controlled&&"number"===a.type&&Oe(a,"number",a.value)}},Qr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Jr={eventTypes:Qr,extractEvents:function(e,t,n,r,a){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&0==(32&a)&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(a=r.window===r?r:(a=r.ownerDocument)?a.defaultView||a.parentWindow:window,i?(i=t,null!==(t=(t=n.relatedTarget||n.toElement)?pr(t):null)&&(t!==(o=et(t))||5!==t.tag&&6!==t.tag)&&(t=null)):i=null,i===t)return null;if("mouseout"===e||"mouseover"===e)var l=en,u=Qr.mouseLeave,s=Qr.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=tn,u=Qr.pointerLeave,s=Qr.pointerEnter,c="pointer");if(e=null==i?a:hr(i),a=null==t?a:hr(t),(u=l.getPooled(u,i,n,r)).type=c+"leave",u.target=e,u.relatedTarget=a,(r=l.getPooled(s,t,n,r)).type=c+"enter",r.target=a,r.relatedTarget=e,c=t,(l=i)&&c)e:{for(e=c,i=0,t=s=l;t;t=_t(t))i++;for(t=0,a=e;a;a=_t(a))t++;for(;0<i-t;)s=_t(s),i--;for(;0<t-i;)e=_t(e),t--;for(;i--;){if(s===e||s===e.alternate)break e;s=_t(s),e=_t(e)}s=null}else s=null;for(e=s,s=[];l&&l!==e&&(null===(i=l.alternate)||i!==e);)s.push(l),l=_t(l);for(l=[];c&&c!==e&&(null===(i=c.alternate)||i!==e);)l.push(c),c=_t(c);for(c=0;c<s.length;c++)Pt(s[c],"bubbled",u);for(c=l.length;0<c--;)Pt(l[c],"captured",r);return n===qr?(qr=null,[u]):(qr=n,[u,r])}};var ea="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ta=Object.prototype.hasOwnProperty;function na(e,t){if(ea(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ta.call(t,n[r])||!ea(e[n[r]],t[n[r]]))return!1;return!0}var ra=J&&"documentMode"in document&&11>=document.documentMode,aa={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},oa=null,ia=null,la=null,ua=!1;function sa(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return ua||null==oa||oa!==Hn(n)?null:("selectionStart"in(n=oa)&&Zn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},la&&na(la,n)?null:(la=n,(e=Ft.getPooled(aa.select,ia,e,t)).type="select",e.target=oa,Rt(e),e))}var ca={eventTypes:aa,extractEvents:function(e,t,n,r){var a,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(a=!o)){e:{o=Nn(o),a=h.onSelect;for(var i=0;i<a.length;i++)if(!o.has(a[i])){o=!1;break e}o=!0}a=!o}if(a)return null;switch(o=t?hr(t):window,e){case"focus":(Fr(o)||"true"===o.contentEditable)&&(oa=o,ia=t,la=null);break;case"blur":la=ia=oa=null;break;case"mousedown":ua=!0;break;case"contextmenu":case"mouseup":case"dragend":return ua=!1,sa(n,r);case"selectionchange":if(ra)break;case"keydown":case"keyup":return sa(n,r)}return null}};O.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=mr,S=dr,T=hr,O.injectEventPluginsByName({SimpleEventPlugin:yn,EnterLeaveEventPlugin:Jr,ChangeEventPlugin:$r,SelectEventPlugin:ca,BeforeInputEventPlugin:Lr}),new Set;var fa=[],pa=-1;function da(e){0>pa||(e.current=fa[pa],fa[pa]=null,pa--)}function ha(e,t){pa++,fa[pa]=e.current,e.current=t}var ma={},va={current:ma},ya={current:!1},ba=ma;function ga(e,t){var n=e.type.contextTypes;if(!n)return ma;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ea(e){return null!=(e=e.childContextTypes)}function xa(e){da(ya),da(va)}function wa(e){da(ya),da(va)}function Sa(e,t,n){if(va.current!==ma)throw Error(i(168));ha(va,t),ha(ya,n)}function Ta(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(i(108,$(t)||"Unknown",o));return a({},n,{},r)}function Ma(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||ma,ba=va.current,ha(va,t),ha(ya,ya.current),!0}function ka(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(t=Ta(e,t,ba),r.__reactInternalMemoizedMergedChildContext=t,da(ya),da(va),ha(va,t)):da(ya),ha(ya,n)}var _a=o.unstable_runWithPriority,Ca=o.unstable_scheduleCallback,Aa=o.unstable_cancelCallback,Pa=o.unstable_shouldYield,Oa=o.unstable_requestPaint,Ra=o.unstable_now,La=o.unstable_getCurrentPriorityLevel,Na=o.unstable_ImmediatePriority,Fa=o.unstable_UserBlockingPriority,Da=o.unstable_NormalPriority,Ua=o.unstable_LowPriority,ja=o.unstable_IdlePriority,Ia={},Ba=void 0!==Oa?Oa:function(){},za=null,Va=null,Wa=!1,Ya=Ra(),Ha=1e4>Ya?Ra:function(){return Ra()-Ya};function Ka(){switch(La()){case Na:return 99;case Fa:return 98;case Da:return 97;case Ua:return 96;case ja:return 95;default:throw Error(i(332))}}function Xa(e){switch(e){case 99:return Na;case 98:return Fa;case 97:return Da;case 96:return Ua;case 95:return ja;default:throw Error(i(332))}}function Ga(e,t){return e=Xa(e),_a(e,t)}function Za(e,t,n){return e=Xa(e),Ca(e,t,n)}function qa(e){return null===za?(za=[e],Va=Ca(Na,Qa)):za.push(e),Ia}function $a(){if(null!==Va){var e=Va;Va=null,Aa(e)}Qa()}function Qa(){if(!Wa&&null!==za){Wa=!0;var e=0;try{var t=za;Ga(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),za=null}catch(t){throw null!==za&&(za=za.slice(e+1)),Ca(Na,$a),t}finally{Wa=!1}}}var Ja=3;function eo(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function to(e,t){if(e&&e.defaultProps)for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var no={current:null},ro=null,ao=null,oo=null;function io(){oo=ao=ro=null}function lo(e,t){var n=e.type._context;ha(no,n._currentValue),n._currentValue=t}function uo(e){var t=no.current;da(no),e.type._context._currentValue=t}function so(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function co(e,t){ro=e,oo=ao=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Hi=!0),e.firstContext=null)}function fo(e,t){if(oo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(oo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ao){if(null===ro)throw Error(i(308));ao=t,ro.dependencies={expirationTime:0,firstContext:t,responders:null}}else ao=ao.next=t;return e._currentValue}var po=!1;function ho(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function mo(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function vo(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function yo(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function bo(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,a=null;null===r&&(r=e.updateQueue=ho(e.memoizedState))}else r=e.updateQueue,a=n.updateQueue,null===r?null===a?(r=e.updateQueue=ho(e.memoizedState),a=n.updateQueue=ho(n.memoizedState)):r=e.updateQueue=mo(a):null===a&&(a=n.updateQueue=mo(r));null===a||r===a?yo(r,t):null===r.lastUpdate||null===a.lastUpdate?(yo(r,t),yo(a,t)):(yo(r,t),a.lastUpdate=t)}function go(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=ho(e.memoizedState):Eo(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Eo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=mo(t)),t}function xo(e,t,n,r,o,i){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(i,r,o):e;case 3:e.effectTag=-4097&e.effectTag|64;case 0:if(null==(o="function"==typeof(e=n.payload)?e.call(i,r,o):e))break;return a({},r,o);case 2:po=!0}return r}function wo(e,t,n,r,a){po=!1;for(var o=(t=Eo(e,t)).baseState,i=null,l=0,u=t.firstUpdate,s=o;null!==u;){var c=u.expirationTime;c<a?(null===i&&(i=u,o=s),l<c&&(l=c)):(_u(c,u.suspenseConfig),s=xo(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(c=null,u=t.firstCapturedUpdate;null!==u;){var f=u.expirationTime;f<a?(null===c&&(c=u,null===i&&(o=s)),l<f&&(l=f)):(s=xo(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===i&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===c&&(o=s),t.baseState=o,t.firstUpdate=i,t.firstCapturedUpdate=c,Cu(l),e.expirationTime=l,e.memoizedState=s}function So(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),To(t.firstEffect,n),t.firstEffect=t.lastEffect=null,To(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function To(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw Error(i(191,n));n.call(r)}e=e.nextEffect}}var Mo=L.ReactCurrentBatchConfig,ko=(new r.Component).refs;function _o(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Co={isMounted:function(e){return!!(e=e._reactInternalFiber)&&et(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=hu(),a=Mo.suspense;(a=vo(r=mu(r,e,a),a)).payload=t,null!=n&&(a.callback=n),bo(e,a),vu(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=hu(),a=Mo.suspense;(a=vo(r=mu(r,e,a),a)).tag=1,a.payload=t,null!=n&&(a.callback=n),bo(e,a),vu(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=hu(),r=Mo.suspense;(r=vo(n=mu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),bo(e,r),vu(e,n)}};function Ao(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!t.prototype||!t.prototype.isPureReactComponent||(!na(n,r)||!na(a,o))}function Po(e,t,n){var r=!1,a=ma,o=t.contextType;return"object"==typeof o&&null!==o?o=fo(o):(a=Ea(t)?ba:va.current,o=(r=null!=(r=t.contextTypes))?ga(e,a):ma),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Co,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function Oo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Co.enqueueReplaceState(t,t.state,null)}function Ro(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=ko;var o=t.contextType;"object"==typeof o&&null!==o?a.context=fo(o):(o=Ea(t)?ba:va.current,a.context=ga(e,o)),null!==(o=e.updateQueue)&&(wo(e,o,n,a,r),a.state=e.memoizedState),"function"==typeof(o=t.getDerivedStateFromProps)&&(_o(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&Co.enqueueReplaceState(a,a.state,null),null!==(o=e.updateQueue)&&(wo(e,o,n,a,r),a.state=e.memoizedState)),"function"==typeof a.componentDidMount&&(e.effectTag|=4)}var Lo=Array.isArray;function No(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===ko&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Fo(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Do(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t,n){return(e=Gu(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=$u(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=No(e,t,n),r.return=e,r):((r=Zu(n.type,n.key,n.props,null,e.mode,r)).ref=No(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Qu(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=qu(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=$u(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case D:return(n=Zu(t.type,t.key,t.props,null,e.mode,n)).ref=No(e,null,t),n.return=e,n;case U:return(t=Qu(t,e.mode,n)).return=e,t}if(Lo(t)||q(t))return(t=qu(t,e.mode,n,null)).return=e,t;Fo(e,t)}return null}function d(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case D:return n.key===a?n.type===j?f(e,t,n.props.children,r,a):s(e,t,n,r):null;case U:return n.key===a?c(e,t,n,r):null}if(Lo(n)||q(n))return null!==a?null:f(e,t,n,r,null);Fo(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case D:return e=e.get(null===r.key?n:r.key)||null,r.type===j?f(t,e,r.props.children,a,r.key):s(t,e,r,a);case U:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(Lo(r)||q(r))return f(t,e=e.get(n)||null,r,a,null);Fo(t,r)}return null}function m(a,i,l,u){for(var s=null,c=null,f=i,m=i=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=d(a,f,l[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(a,f),i=o(y,i,m),null===c?s=y:c.sibling=y,c=y,f=v}if(m===l.length)return n(a,f),s;if(null===f){for(;m<l.length;m++)null!==(f=p(a,l[m],u))&&(i=o(f,i,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(a,f);m<l.length;m++)null!==(v=h(f,a,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=o(v,i,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(a,e)})),s}function v(a,l,u,s){var c=q(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var f=c=null,m=l,v=l=0,y=null,b=u.next();null!==m&&!b.done;v++,b=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var g=d(a,m,b.value,s);if(null===g){null===m&&(m=y);break}e&&m&&null===g.alternate&&t(a,m),l=o(g,l,v),null===f?c=g:f.sibling=g,f=g,m=y}if(b.done)return n(a,m),c;if(null===m){for(;!b.done;v++,b=u.next())null!==(b=p(a,b.value,s))&&(l=o(b,l,v),null===f?c=b:f.sibling=b,f=b);return c}for(m=r(a,m);!b.done;v++,b=u.next())null!==(b=h(m,a,v,b.value,s))&&(e&&null!==b.alternate&&m.delete(null===b.key?v:b.key),l=o(b,l,v),null===f?c=b:f.sibling=b,f=b);return e&&m.forEach((function(e){return t(a,e)})),c}return function(e,r,o,u){var s="object"==typeof o&&null!==o&&o.type===j&&null===o.key;s&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case D:e:{for(c=o.key,s=r;null!==s;){if(s.key===c){if(7===s.tag?o.type===j:s.elementType===o.type){n(e,s.sibling),(r=a(s,o.type===j?o.props.children:o.props)).ref=No(e,s,o),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}o.type===j?((r=qu(o.props.children,e.mode,u,o.key)).return=e,e=r):((u=Zu(o.type,o.key,o.props,null,e.mode,u)).ref=No(e,r,o),u.return=e,e=u)}return l(e);case U:e:{for(s=o.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=a(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Qu(o,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,o)).return=e,e=r):(n(e,r),(r=$u(o,e.mode,u)).return=e,e=r),l(e);if(Lo(o))return m(e,r,o,u);if(q(o))return v(e,r,o,u);if(c&&Fo(e,o),void 0===o&&!s)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Uo=Do(!0),jo=Do(!1),Io={},Bo={current:Io},zo={current:Io},Vo={current:Io};function Wo(e){if(e===Io)throw Error(i(174));return e}function Yo(e,t){ha(Vo,t),ha(zo,e),ha(Bo,Io);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Be(null,"");break;default:t=Be(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}da(Bo),ha(Bo,t)}function Ho(e){da(Bo),da(zo),da(Vo)}function Ko(e){Wo(Vo.current);var t=Wo(Bo.current),n=Be(t,e.type);t!==n&&(ha(zo,e),ha(Bo,n))}function Xo(e){zo.current===e&&(da(Bo),da(zo))}var Go={current:0};function Zo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===Qn||n.data===Jn))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function qo(e,t){return{responder:e,props:t}}var $o=L.ReactCurrentDispatcher,Qo=L.ReactCurrentBatchConfig,Jo=0,ei=null,ti=null,ni=null,ri=null,ai=null,oi=null,ii=0,li=null,ui=0,si=!1,ci=null,fi=0;function pi(){throw Error(i(321))}function di(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ea(e[n],t[n]))return!1;return!0}function hi(e,t,n,r,a,o){if(Jo=o,ei=t,ni=null!==e?e.memoizedState:null,$o.current=null===ni?Li:Ni,t=n(r,a),si){do{si=!1,fi+=1,ni=null!==e?e.memoizedState:null,oi=ri,li=ai=ti=null,$o.current=Ni,t=n(r,a)}while(si);ci=null,fi=0}if($o.current=Ri,(e=ei).memoizedState=ri,e.expirationTime=ii,e.updateQueue=li,e.effectTag|=ui,e=null!==ti&&null!==ti.next,Jo=0,oi=ai=ri=ni=ti=ei=null,ii=0,li=null,ui=0,e)throw Error(i(300));return t}function mi(){$o.current=Ri,Jo=0,oi=ai=ri=ni=ti=ei=null,ii=0,li=null,ui=0,si=!1,ci=null,fi=0}function vi(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===ai?ri=ai=e:ai=ai.next=e,ai}function yi(){if(null!==oi)oi=(ai=oi).next,ni=null!==(ti=ni)?ti.next:null;else{if(null===ni)throw Error(i(310));var e={memoizedState:(ti=ni).memoizedState,baseState:ti.baseState,queue:ti.queue,baseUpdate:ti.baseUpdate,next:null};ai=null===ai?ri=e:ai.next=e,ni=ti.next}return ai}function bi(e,t){return"function"==typeof t?t(e):t}function gi(e){var t=yi(),n=t.queue;if(null===n)throw Error(i(311));if(n.lastRenderedReducer=e,0<fi){var r=n.dispatch;if(null!==ci){var a=ci.get(n);if(void 0!==a){ci.delete(n);var o=t.memoizedState;do{o=e(o,a.action),a=a.next}while(null!==a);return ea(o,t.memoizedState)||(Hi=!0),t.memoizedState=o,t.baseUpdate===n.last&&(t.baseState=o),n.lastRenderedState=o,[o,r]}}return[t.memoizedState,r]}r=n.last;var l=t.baseUpdate;if(o=t.baseState,null!==l?(null!==r&&(r.next=null),r=l.next):r=null!==r?r.next:null,null!==r){var u=a=null,s=r,c=!1;do{var f=s.expirationTime;f<Jo?(c||(c=!0,u=l,a=o),f>ii&&Cu(ii=f)):(_u(f,s.suspenseConfig),o=s.eagerReducer===e?s.eagerState:e(o,s.action)),l=s,s=s.next}while(null!==s&&s!==r);c||(u=l,a=o),ea(o,t.memoizedState)||(Hi=!0),t.memoizedState=o,t.baseUpdate=u,t.baseState=a,n.lastRenderedState=o}return[t.memoizedState,n.dispatch]}function Ei(e){var t=vi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:bi,lastRenderedState:e}).dispatch=Oi.bind(null,ei,e),[t.memoizedState,e]}function xi(e){return gi(bi)}function wi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===li?(li={lastEffect:null}).lastEffect=e.next=e:null===(t=li.lastEffect)?li.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,li.lastEffect=e),e}function Si(e,t,n,r){var a=vi();ui|=e,a.memoizedState=wi(t,n,void 0,void 0===r?null:r)}function Ti(e,t,n,r){var a=yi();r=void 0===r?null:r;var o=void 0;if(null!==ti){var i=ti.memoizedState;if(o=i.destroy,null!==r&&di(r,i.deps))return void wi(0,n,o,r)}ui|=e,a.memoizedState=wi(t,n,o,r)}function Mi(e,t){return Si(516,192,e,t)}function ki(e,t){return Ti(516,192,e,t)}function _i(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ci(){}function Ai(e,t){return vi().memoizedState=[e,void 0===t?null:t],e}function Pi(e,t){var n=yi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&di(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Oi(e,t,n){if(!(25>fi))throw Error(i(301));var r=e.alternate;if(e===ei||null!==r&&r===ei)if(si=!0,e={expirationTime:Jo,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===ci&&(ci=new Map),void 0===(n=ci.get(t)))ci.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var a=hu(),o=Mo.suspense;o={expirationTime:a=mu(a,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var l=t.last;if(null===l)o.next=o;else{var u=l.next;null!==u&&(o.next=u),l.next=o}if(t.last=o,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var s=t.lastRenderedState,c=r(s,n);if(o.eagerReducer=r,o.eagerState=c,ea(c,s))return}catch(e){}vu(e,a)}}var Ri={readContext:fo,useCallback:pi,useContext:pi,useEffect:pi,useImperativeHandle:pi,useLayoutEffect:pi,useMemo:pi,useReducer:pi,useRef:pi,useState:pi,useDebugValue:pi,useResponder:pi,useDeferredValue:pi,useTransition:pi},Li={readContext:fo,useCallback:Ai,useContext:fo,useEffect:Mi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Si(4,36,_i.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Si(4,36,e,t)},useMemo:function(e,t){var n=vi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=vi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Oi.bind(null,ei,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},vi().memoizedState=e},useState:Ei,useDebugValue:Ci,useResponder:qo,useDeferredValue:function(e,t){var n=Ei(e),r=n[0],a=n[1];return Mi((function(){o.unstable_next((function(){var n=Qo.suspense;Qo.suspense=void 0===t?null:t;try{a(e)}finally{Qo.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=Ei(!1),n=t[0],r=t[1];return[Ai((function(t){r(!0),o.unstable_next((function(){var n=Qo.suspense;Qo.suspense=void 0===e?null:e;try{r(!1),t()}finally{Qo.suspense=n}}))}),[e,n]),n]}},Ni={readContext:fo,useCallback:Pi,useContext:fo,useEffect:ki,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ti(4,36,_i.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ti(4,36,e,t)},useMemo:function(e,t){var n=yi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&di(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:gi,useRef:function(){return yi().memoizedState},useState:xi,useDebugValue:Ci,useResponder:qo,useDeferredValue:function(e,t){var n=xi(),r=n[0],a=n[1];return ki((function(){o.unstable_next((function(){var n=Qo.suspense;Qo.suspense=void 0===t?null:t;try{a(e)}finally{Qo.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=xi(),n=t[0],r=t[1];return[Pi((function(t){r(!0),o.unstable_next((function(){var n=Qo.suspense;Qo.suspense=void 0===e?null:e;try{r(!1),t()}finally{Qo.suspense=n}}))}),[e,n]),n]}},Fi=null,Di=null,Ui=!1;function ji(e,t){var n=Ku(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ii(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Bi(e){if(Ui){var t=Di;if(t){var n=t;if(!Ii(e,t)){if(!(t=ir(n.nextSibling))||!Ii(e,t))return e.effectTag=-1025&e.effectTag|2,Ui=!1,void(Fi=e);ji(Fi,n)}Fi=e,Di=ir(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ui=!1,Fi=e}}function zi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Fi=e}function Vi(e){if(e!==Fi)return!1;if(!Ui)return zi(e),Ui=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!rr(t,e.memoizedProps))for(t=Di;t;)ji(e,t),t=ir(t.nextSibling);if(zi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if(n===$n){if(0===t){Di=ir(e.nextSibling);break e}t--}else n!==qn&&n!==Jn&&n!==Qn||t++}e=e.nextSibling}Di=null}}else Di=Fi?ir(e.stateNode.nextSibling):null;return!0}function Wi(){Di=Fi=null,Ui=!1}var Yi=L.ReactCurrentOwner,Hi=!1;function Ki(e,t,n,r){t.child=null===e?jo(t,null,n,r):Uo(t,e.child,n,r)}function Xi(e,t,n,r,a){n=n.render;var o=t.ref;return co(t,a),r=hi(e,t,n,r,o,a),null===e||Hi?(t.effectTag|=1,Ki(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),cl(e,t,a))}function Gi(e,t,n,r,a,o){if(null===e){var i=n.type;return"function"!=typeof i||Xu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Zu(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Zi(e,t,i,r,a,o))}return i=e.child,a<o&&(a=i.memoizedProps,(n=null!==(n=n.compare)?n:na)(a,r)&&e.ref===t.ref)?cl(e,t,o):(t.effectTag|=1,(e=Gu(i,r)).ref=t.ref,e.return=t,t.child=e)}function Zi(e,t,n,r,a,o){return null!==e&&na(e.memoizedProps,r)&&e.ref===t.ref&&(Hi=!1,a<o)?cl(e,t,o):$i(e,t,n,r,o)}function qi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function $i(e,t,n,r,a){var o=Ea(n)?ba:va.current;return o=ga(t,o),co(t,a),n=hi(e,t,n,r,o,a),null===e||Hi?(t.effectTag|=1,Ki(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),cl(e,t,a))}function Qi(e,t,n,r,a){if(Ea(n)){var o=!0;Ma(t)}else o=!1;if(co(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Po(t,n,r),Ro(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;"object"==typeof s&&null!==s?s=fo(s):s=ga(t,s=Ea(n)?ba:va.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&Oo(t,i,r,s),po=!1;var p=t.memoizedState;u=i.state=p;var d=t.updateQueue;null!==d&&(wo(t,d,r,i,a),u=t.memoizedState),l!==r||p!==u||ya.current||po?("function"==typeof c&&(_o(t,n,c,r),u=t.memoizedState),(l=po||Ao(t,n,l,r,p,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,l=t.memoizedProps,i.props=t.type===t.elementType?l:to(t.type,l),u=i.context,"object"==typeof(s=n.contextType)&&null!==s?s=fo(s):s=ga(t,s=Ea(n)?ba:va.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&Oo(t,i,r,s),po=!1,u=t.memoizedState,p=i.state=u,null!==(d=t.updateQueue)&&(wo(t,d,r,i,a),p=t.memoizedState),l!==r||u!==p||ya.current||po?("function"==typeof c&&(_o(t,n,c,r),p=t.memoizedState),(c=po||Ao(t,n,l,r,u,p,s))?(f||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,p,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),i.props=r,i.state=p,i.context=s,r=c):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Ji(e,t,n,r,o,a)}function Ji(e,t,n,r,a,o){qi(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return a&&ka(t,n,!1),cl(e,t,o);r=t.stateNode,Yi.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=Uo(t,e.child,null,o),t.child=Uo(t,null,l,o)):Ki(e,t,l,o),t.memoizedState=r.state,a&&ka(t,n,!0),t.child}function el(e){var t=e.stateNode;t.pendingContext?Sa(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Sa(0,t.context,!1),Yo(e,t.containerInfo)}var tl,nl,rl,al,ol={dehydrated:null,retryTime:0};function il(e,t,n){var r,a=t.mode,o=t.pendingProps,i=Go.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&i)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),ha(Go,1&i),null===e){if(void 0!==o.fallback&&Bi(t),l){if(l=o.fallback,(o=qu(null,a,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=qu(l,a,n,null)).return=t,o.sibling=n,t.memoizedState=ol,t.child=o,n}return a=o.children,t.memoizedState=null,t.child=jo(t,null,a,n)}if(null!==e.memoizedState){if(a=(e=e.child).sibling,l){if(o=o.fallback,(n=Gu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(a=Gu(a,o,a.expirationTime)).return=t,n.sibling=a,n.childExpirationTime=0,t.memoizedState=ol,t.child=n,a}return n=Uo(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=o.fallback,(o=qu(null,a,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=qu(l,a,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=ol,t.child=o,n}return t.memoizedState=null,t.child=Uo(t,e,o.children,n)}function ll(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),so(e.return,t)}function ul(e,t,n,r,a,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:a,lastEffect:o}:(i.isBackwards=t,i.rendering=null,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=a,i.lastEffect=o)}function sl(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Ki(e,t,r.children,n),0!=(2&(r=Go.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ll(e,n);else if(19===e.tag)ll(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ha(Go,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Zo(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),ul(t,!1,a,n,o,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Zo(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}ul(t,!0,n,null,o,t.lastEffect);break;case"together":ul(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function cl(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&Cu(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Gu(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Gu(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function fl(e){e.effectTag|=4}function pl(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function dl(e){switch(e.tag){case 1:Ea(e.type)&&xa();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ho(),wa(),0!=(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return Xo(e),null;case 13:return da(Go),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return da(Go),null;case 4:return Ho(),null;case 10:return uo(e),null;default:return null}}function hl(e,t){return{value:e,source:t,stack:Q(t)}}tl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},nl=function(){},rl=function(e,t,n,r,o){var i=e.memoizedProps;if(i!==r){var l,u,s=t.stateNode;switch(Wo(Bo.current),e=null,n){case"input":i=ke(s,i),r=ke(s,r),e=[];break;case"option":i=Re(s,i),r=Re(s,r),e=[];break;case"select":i=a({},i,{value:void 0}),r=a({},r,{value:void 0}),e=[];break;case"textarea":i=Ne(s,i),r=Ne(s,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(s.onclick=Yn)}for(l in zn(n,r),n=null,i)if(!r.hasOwnProperty(l)&&i.hasOwnProperty(l)&&null!=i[l])if("style"===l)for(u in s=i[l])s.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(d.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var c=r[l];if(s=null!=i?i[l]:void 0,r.hasOwnProperty(l)&&c!==s&&(null!=c||null!=s))if("style"===l)if(s){for(u in s)!s.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in c)c.hasOwnProperty(u)&&s[u]!==c[u]&&(n||(n={}),n[u]=c[u])}else n||(e||(e=[]),e.push(l,n)),n=c;else"dangerouslySetInnerHTML"===l?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(l,""+c)):"children"===l?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(l,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(d.hasOwnProperty(l)?(null!=c&&Wn(o,l),e||s===c||(e=[])):(e=e||[]).push(l,c))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&fl(t)}},al=function(e,t,n,r){n!==r&&fl(t)};var ml="function"==typeof WeakSet?WeakSet:Set;function vl(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=Q(n)),null!==n&&$(n.type),t=t.value,null!==e&&1===e.tag&&$(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function yl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Bu(e,t)}else t.current=null}function bl(e,t){switch(t.tag){case 0:case 11:case 15:gl(2,0,t);break;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:to(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:case 17:break;default:throw Error(i(163))}}function gl(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&e)){var a=r.destroy;r.destroy=void 0,void 0!==a&&a()}0!=(r.tag&t)&&(a=r.create,r.destroy=a()),r=r.next}while(r!==n)}}function El(e,t,n){switch("function"==typeof Yu&&Yu(t),t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Ga(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var a=t;try{n()}catch(e){Bu(a,e)}}e=e.next}while(e!==r)}))}break;case 1:yl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Bu(e,t)}}(t,n);break;case 5:yl(t);break;case 4:Tl(e,t,n)}}function xl(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,null!==t&&xl(t)}function wl(e){return 5===e.tag||3===e.tag||4===e.tag}function Sl(e){e:{for(var t=e.return;null!==t;){if(wl(t)){var n=t;break e}t=t.return}throw Error(i(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.effectTag&&(We(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||wl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var a=e;;){var o=5===a.tag||6===a.tag;if(o){var l=o?a.stateNode:a.stateNode.instance;if(n)if(r){var u=l;l=n,8===(o=t).nodeType?o.parentNode.insertBefore(u,l):o.insertBefore(u,l)}else t.insertBefore(l,n);else r?(8===(u=t).nodeType?(o=u.parentNode).insertBefore(l,u):(o=u).appendChild(l),null!=(u=u._reactRootContainer)||null!==o.onclick||(o.onclick=Yn)):t.appendChild(l)}else if(4!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===e)break;for(;null===a.sibling;){if(null===a.return||a.return===e)return;a=a.return}a.sibling.return=a.return,a=a.sibling}}function Tl(e,t,n){for(var r,a,o=t,l=!1;;){if(!l){l=o.return;e:for(;;){if(null===l)throw Error(i(160));switch(r=l.stateNode,l.tag){case 5:a=!1;break e;case 3:case 4:r=r.containerInfo,a=!0;break e}l=l.return}l=!0}if(5===o.tag||6===o.tag){e:for(var u=e,s=o,c=n,f=s;;)if(El(u,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===s)break;for(;null===f.sibling;){if(null===f.return||f.return===s)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}a?(u=r,s=o.stateNode,8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,a=!0,o.child.return=o,o=o.child;continue}}else if(El(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(l=!1)}o.sibling.return=o.return,o=o.sibling}}function Ml(e,t){switch(t.tag){case 0:case 11:case 14:case 15:gl(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,a=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[cr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ce(n,r),Vn(e,a),t=Vn(e,r),a=0;a<o.length;a+=2){var l=o[a],u=o[a+1];"style"===l?In(n,u):"dangerouslySetInnerHTML"===l?Ve(n,u):"children"===l?We(n,u):we(n,l,u,t)}switch(e){case"input":Ae(n,r);break;case"textarea":De(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Le(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Le(n,!!r.multiple,r.defaultValue,!0):Le(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw Error(i(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:(t=t.stateNode).hydrate&&(t.hydrate=!1,Mt(t.containerInfo));break;case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,tu=Ha()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,a=null!=(a=e.memoizedProps.style)&&a.hasOwnProperty("display")?a.display:null,o.style.display=jn("display",a));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}kl(t);break;case 19:kl(t);break;case 17:case 20:case 21:break;default:throw Error(i(163))}}function kl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ml),t.forEach((function(t){var r=Vu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var _l="function"==typeof WeakMap?WeakMap:Map;function Cl(e,t,n){(n=vo(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){au||(au=!0,ou=r),vl(e,t)},n}function Al(e,t,n){(n=vo(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return vl(e,t),r(a)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===iu?iu=new Set([this]):iu.add(this),vl(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Pl,Ol=Math.ceil,Rl=L.ReactCurrentDispatcher,Ll=L.ReactCurrentOwner,Nl=0,Fl=8,Dl=16,Ul=32,jl=0,Il=1,Bl=2,zl=3,Vl=4,Wl=5,Yl=Nl,Hl=null,Kl=null,Xl=0,Gl=jl,Zl=null,ql=1073741823,$l=1073741823,Ql=null,Jl=0,eu=!1,tu=0,nu=500,ru=null,au=!1,ou=null,iu=null,lu=!1,uu=null,su=90,cu=null,fu=0,pu=null,du=0;function hu(){return(Yl&(Dl|Ul))!==Nl?1073741821-(Ha()/10|0):0!==du?du:du=1073741821-(Ha()/10|0)}function mu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Ka();if(0==(4&t))return 99===r?1073741823:1073741822;if((Yl&Dl)!==Nl)return Xl;if(null!==n)e=eo(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=eo(e,150,100);break;case 97:case 96:e=eo(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==Hl&&e===Xl&&--e,e}function vu(e,t){if(50<fu)throw fu=0,pu=null,Error(i(185));if(null!==(e=yu(e,t))){var n=Ka();1073741823===t?(Yl&Fl)!==Nl&&(Yl&(Dl|Ul))===Nl?xu(e):(gu(e),Yl===Nl&&$a()):gu(e),(4&Yl)===Nl||98!==n&&99!==n||(null===cu?cu=new Map([[e,t]]):(void 0===(n=cu.get(e))||n>t)&&cu.set(e,t))}}function yu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,a=null;if(null===r&&3===e.tag)a=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){a=r.stateNode;break}r=r.return}return null!==a&&(Hl===a&&(Cu(t),Gl===Vl&&ts(a,Xl)),ns(a,t)),a}function bu(e){var t=e.lastExpiredTime;return 0!==t?t:es(e,t=e.firstPendingTime)?(t=e.lastPingedTime)>(e=e.nextKnownPendingLevel)?t:e:t}function gu(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=qa(xu.bind(null,e));else{var t=bu(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=hu();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var a=e.callbackPriority;if(e.callbackExpirationTime===t&&a>=r)return;n!==Ia&&Aa(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?qa(xu.bind(null,e)):Za(r,Eu.bind(null,e),{timeout:10*(1073741821-t)-Ha()}),e.callbackNode=t}}}function Eu(e,t){if(du=0,t)return rs(e,t=hu()),gu(e),null;var n=bu(e);if(0!==n){if(t=e.callbackNode,(Yl&(Dl|Ul))!==Nl)throw Error(i(327));if(Uu(),e===Hl&&n===Xl||Tu(e,n),null!==Kl){var r=Yl;Yl|=Dl;for(var a=ku();;)try{Pu();break}catch(t){Mu(e,t)}if(io(),Yl=r,Rl.current=a,Gl===Il)throw t=Zl,Tu(e,n),ts(e,n),gu(e),t;if(null===Kl)switch(a=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Gl,Hl=null,r){case jl:case Il:throw Error(i(345));case Bl:rs(e,2<n?2:n);break;case zl:if(ts(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Lu(a)),1073741823===ql&&10<(a=tu+nu-Ha())){if(eu){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,Tu(e,n);break}}if(0!==(o=bu(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=ar(Nu.bind(null,e),a);break}Nu(e);break;case Vl:if(ts(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Lu(a)),eu&&(0===(a=e.lastPingedTime)||a>=n)){e.lastPingedTime=n,Tu(e,n);break}if(0!==(a=bu(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==$l?r=10*(1073741821-$l)-Ha():1073741823===ql?r=0:(r=10*(1073741821-ql)-5e3,0>(r=(a=Ha())-r)&&(r=0),(n=10*(1073741821-n)-a)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Ol(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=ar(Nu.bind(null,e),r);break}Nu(e);break;case Wl:if(1073741823!==ql&&null!==Ql){o=ql;var l=Ql;if(0>=(r=0|l.busyMinDurationMs)?r=0:(a=0|l.busyDelayMs,r=(o=Ha()-(10*(1073741821-o)-(0|l.timeoutMs||5e3)))<=a?0:a+r-o),10<r){ts(e,n),e.timeoutHandle=ar(Nu.bind(null,e),r);break}}Nu(e);break;default:throw Error(i(329))}if(gu(e),e.callbackNode===t)return Eu.bind(null,e)}}return null}function xu(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,e.finishedExpirationTime===t)Nu(e);else{if((Yl&(Dl|Ul))!==Nl)throw Error(i(327));if(Uu(),e===Hl&&t===Xl||Tu(e,t),null!==Kl){var n=Yl;Yl|=Dl;for(var r=ku();;)try{Au();break}catch(t){Mu(e,t)}if(io(),Yl=n,Rl.current=r,Gl===Il)throw n=Zl,Tu(e,t),ts(e,t),gu(e),n;if(null!==Kl)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Hl=null,Nu(e),gu(e)}}return null}function wu(e,t){var n=Yl;Yl|=1;try{return e(t)}finally{(Yl=n)===Nl&&$a()}}function Su(e,t){var n=Yl;Yl&=-2,Yl|=Fl;try{return e(t)}finally{(Yl=n)===Nl&&$a()}}function Tu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,or(n)),null!==Kl)for(n=Kl.return;null!==n;){var r=n;switch(r.tag){case 1:var a=r.type.childContextTypes;null!=a&&xa();break;case 3:Ho(),wa();break;case 5:Xo(r);break;case 4:Ho();break;case 13:case 19:da(Go);break;case 10:uo(r)}n=n.return}Hl=e,Kl=Gu(e.current,null),Xl=t,Gl=jl,Zl=null,$l=ql=1073741823,Ql=null,Jl=0,eu=!1}function Mu(e,t){for(;;){try{if(io(),mi(),null===Kl||null===Kl.return)return Gl=Il,Zl=t,null;e:{var n=e,r=Kl.return,a=Kl,o=t;if(t=Xl,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==o&&"object"==typeof o&&"function"==typeof o.then){var i=o,l=0!=(1&Go.current),u=r;do{var s;if(s=13===u.tag){var c=u.memoizedState;if(null!==c)s=null!==c.dehydrated;else{var f=u.memoizedProps;s=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!l)}}if(s){var p=u.updateQueue;if(null===p){var d=new Set;d.add(i),u.updateQueue=d}else p.add(i);if(0==(2&u.mode)){if(u.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var h=vo(1073741823,null);h.tag=2,bo(a,h)}a.expirationTime=1073741823;break e}o=void 0,a=t;var m=n.pingCache;if(null===m?(m=n.pingCache=new _l,o=new Set,m.set(i,o)):void 0===(o=m.get(i))&&(o=new Set,m.set(i,o)),!o.has(a)){o.add(a);var v=zu.bind(null,n,i,a);i.then(v,v)}u.effectTag|=4096,u.expirationTime=t;break e}u=u.return}while(null!==u);o=Error(($(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+Q(a))}Gl!==Wl&&(Gl=Bl),o=hl(o,a),u=r;do{switch(u.tag){case 3:i=o,u.effectTag|=4096,u.expirationTime=t,go(u,Cl(u,i,t));break e;case 1:i=o;var y=u.type,b=u.stateNode;if(0==(64&u.effectTag)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===iu||!iu.has(b)))){u.effectTag|=4096,u.expirationTime=t,go(u,Al(u,i,t));break e}}u=u.return}while(null!==u)}Kl=Ru(Kl)}catch(e){t=e;continue}break}}function ku(){var e=Rl.current;return Rl.current=Ri,null===e?Ri:e}function _u(e,t){e<ql&&2<e&&(ql=e),null!==t&&e<$l&&2<e&&($l=e,Ql=t)}function Cu(e){e>Jl&&(Jl=e)}function Au(){for(;null!==Kl;)Kl=Ou(Kl)}function Pu(){for(;null!==Kl&&!Pa();)Kl=Ou(Kl)}function Ou(e){var t=Pl(e.alternate,e,Xl);return e.memoizedProps=e.pendingProps,null===t&&(t=Ru(e)),Ll.current=null,t}function Ru(e){Kl=e;do{var t=Kl.alternate;if(e=Kl.return,0==(2048&Kl.effectTag)){e:{var n=t,r=Xl,o=(t=Kl).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Ea(t.type)&&xa();break;case 3:Ho(),wa(),(o=t.stateNode).pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),(null===n||null===n.child)&&Vi(t)&&fl(t),nl(t);break;case 5:Xo(t),r=Wo(Vo.current);var l=t.type;if(null!==n&&null!=t.stateNode)rl(n,t,l,o,r),n.ref!==t.ref&&(t.effectTag|=128);else if(o){var u=Wo(Bo.current);if(Vi(t)){var s=(o=t).stateNode;n=o.type;var c=o.memoizedProps,f=r;switch(s[sr]=o,s[cr]=c,l=void 0,r=s,n){case"iframe":case"object":case"embed":Mn("load",r);break;case"video":case"audio":for(s=0;s<Je.length;s++)Mn(Je[s],r);break;case"source":Mn("error",r);break;case"img":case"image":case"link":Mn("error",r),Mn("load",r);break;case"form":Mn("reset",r),Mn("submit",r);break;case"details":Mn("toggle",r);break;case"input":_e(r,c),Mn("invalid",r),Wn(f,"onChange");break;case"select":r._wrapperState={wasMultiple:!!c.multiple},Mn("invalid",r),Wn(f,"onChange");break;case"textarea":Fe(r,c),Mn("invalid",r),Wn(f,"onChange")}for(l in zn(n,c),s=null,c)c.hasOwnProperty(l)&&(u=c[l],"children"===l?"string"==typeof u?r.textContent!==u&&(s=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(s=["children",""+u]):d.hasOwnProperty(l)&&null!=u&&Wn(f,l));switch(n){case"input":Te(r),Pe(r,c,!0);break;case"textarea":Te(r),Ue(r);break;case"select":case"option":break;default:"function"==typeof c.onClick&&(r.onclick=Yn)}l=s,o.updateQueue=l,(o=null!==l)&&fl(t)}else{n=t,f=l,c=o,s=9===r.nodeType?r:r.ownerDocument,u===je.html&&(u=Ie(f)),u===je.html?"script"===f?((c=s.createElement("div")).innerHTML="<script><\/script>",s=c.removeChild(c.firstChild)):"string"==typeof c.is?s=s.createElement(f,{is:c.is}):(s=s.createElement(f),"select"===f&&(f=s,c.multiple?f.multiple=!0:c.size&&(f.size=c.size))):s=s.createElementNS(u,f),(c=s)[sr]=n,c[cr]=o,tl(c,t,!1,!1),t.stateNode=c;var p=r,h=Vn(f=l,n=o);switch(f){case"iframe":case"object":case"embed":Mn("load",c),r=n;break;case"video":case"audio":for(r=0;r<Je.length;r++)Mn(Je[r],c);r=n;break;case"source":Mn("error",c),r=n;break;case"img":case"image":case"link":Mn("error",c),Mn("load",c),r=n;break;case"form":Mn("reset",c),Mn("submit",c),r=n;break;case"details":Mn("toggle",c),r=n;break;case"input":_e(c,n),r=ke(c,n),Mn("invalid",c),Wn(p,"onChange");break;case"option":r=Re(c,n);break;case"select":c._wrapperState={wasMultiple:!!n.multiple},r=a({},n,{value:void 0}),Mn("invalid",c),Wn(p,"onChange");break;case"textarea":Fe(c,n),r=Ne(c,n),Mn("invalid",c),Wn(p,"onChange");break;default:r=n}zn(f,r),s=void 0,u=f;var m=c,v=r;for(s in v)if(v.hasOwnProperty(s)){var y=v[s];"style"===s?In(m,y):"dangerouslySetInnerHTML"===s?null!=(y=y?y.__html:void 0)&&Ve(m,y):"children"===s?"string"==typeof y?("textarea"!==u||""!==y)&&We(m,y):"number"==typeof y&&We(m,""+y):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(d.hasOwnProperty(s)?null!=y&&Wn(p,s):null!=y&&we(m,s,y,h))}switch(f){case"input":Te(c),Pe(c,n,!1);break;case"textarea":Te(c),Ue(c);break;case"option":null!=n.value&&c.setAttribute("value",""+xe(n.value));break;case"select":(r=c).multiple=!!n.multiple,null!=(c=n.value)?Le(r,!!n.multiple,c,!1):null!=n.defaultValue&&Le(r,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(c.onclick=Yn)}(o=nr(l,o))&&fl(t)}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw Error(i(166));break;case 6:if(n&&null!=t.stateNode)al(n,t,n.memoizedProps,o);else{if("string"!=typeof o&&null===t.stateNode)throw Error(i(166));r=Wo(Vo.current),Wo(Bo.current),Vi(t)?(l=(o=t).stateNode,r=o.memoizedProps,l[sr]=o,(o=l.nodeValue!==r)&&fl(t)):(l=t,(o=(9===r.nodeType?r:r.ownerDocument).createTextNode(o))[sr]=l,t.stateNode=o)}break;case 11:break;case 13:if(da(Go),o=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}o=null!==o,l=!1,null===n?void 0!==t.memoizedProps.fallback&&Vi(t):(l=null!==(r=n.memoizedState),o||null===r||null!==(r=n.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=r,r.nextEffect=c):(t.firstEffect=t.lastEffect=r,r.nextEffect=null),r.effectTag=8)),o&&!l&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Go.current)?Gl===jl&&(Gl=zl):(Gl!==jl&&Gl!==zl||(Gl=Vl),0!==Jl&&null!==Hl&&(ts(Hl,Xl),ns(Hl,Jl)))),(o||l)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Ho(),nl(t);break;case 10:uo(t);break;case 9:case 14:break;case 17:Ea(t.type)&&xa();break;case 19:if(da(Go),null===(o=t.memoizedState))break;if(l=0!=(64&t.effectTag),null===(c=o.rendering)){if(l)pl(o,!1);else if(Gl!==jl||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(c=Zo(n))){for(t.effectTag|=64,pl(o,!1),null!==(l=c.updateQueue)&&(t.updateQueue=l,t.effectTag|=4),null===o.lastEffect&&(t.firstEffect=null),t.lastEffect=o.lastEffect,o=r,l=t.child;null!==l;)n=o,(r=l).effectTag&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(c=r.alternate)?(r.childExpirationTime=0,r.expirationTime=n,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null):(r.childExpirationTime=c.childExpirationTime,r.expirationTime=c.expirationTime,r.child=c.child,r.memoizedProps=c.memoizedProps,r.memoizedState=c.memoizedState,r.updateQueue=c.updateQueue,n=c.dependencies,r.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),l=l.sibling;ha(Go,1&Go.current|2),t=t.child;break e}n=n.sibling}}else{if(!l)if(null!==(n=Zo(c))){if(t.effectTag|=64,l=!0,null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),pl(o,!0),null===o.tail&&"hidden"===o.tailMode&&!c.alternate){null!==(t=t.lastEffect=o.lastEffect)&&(t.nextEffect=null);break}}else Ha()>o.tailExpiration&&1<r&&(t.effectTag|=64,l=!0,pl(o,!1),t.expirationTime=t.childExpirationTime=r-1);o.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=o.last)?r.sibling=c:t.child=c,o.last=c)}if(null!==o.tail){0===o.tailExpiration&&(o.tailExpiration=Ha()+500),r=o.tail,o.rendering=r,o.tail=r.sibling,o.lastEffect=t.lastEffect,r.sibling=null,o=Go.current,ha(Go,o=l?1&o|2:1&o),t=r;break e}break;case 20:case 21:break;default:throw Error(i(156,t.tag))}t=null}if(o=Kl,1===Xl||1!==o.childExpirationTime){for(l=0,r=o.child;null!==r;)(n=r.expirationTime)>l&&(l=n),(c=r.childExpirationTime)>l&&(l=c),r=r.sibling;o.childExpirationTime=l}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Kl.firstEffect),null!==Kl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Kl.firstEffect),e.lastEffect=Kl.lastEffect),1<Kl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Kl:e.firstEffect=Kl,e.lastEffect=Kl))}else{if(null!==(t=dl(Kl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Kl.sibling))return t;Kl=e}while(null!==Kl);return Gl===jl&&(Gl=Wl),null}function Lu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function Nu(e){var t=Ka();return Ga(99,Fu.bind(null,e,t)),null}function Fu(e,t){do{Uu()}while(null!==uu);if((Yl&(Dl|Ul))!==Nl)throw Error(i(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var a=Lu(n);if(e.firstPendingTime=a,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Hl&&(Kl=Hl=null,Xl=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,a=n.firstEffect):a=n:a=n.firstEffect,null!==a){var o=Yl;Yl|=Ul,Ll.current=null,er=Tn;var l=Gn();if(Zn(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var s=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(s&&0!==s.rangeCount){u=s.anchorNode;var c=s.anchorOffset,f=s.focusNode;s=s.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var p=0,d=-1,h=-1,m=0,v=0,y=l,b=null;t:for(;;){for(var g;y!==u||0!==c&&3!==y.nodeType||(d=p+c),y!==f||0!==s&&3!==y.nodeType||(h=p+s),3===y.nodeType&&(p+=y.nodeValue.length),null!==(g=y.firstChild);)b=y,y=g;for(;;){if(y===l)break t;if(b===u&&++m===c&&(d=p),b===f&&++v===s&&(h=p),null!==(g=y.nextSibling))break;b=(y=b).parentNode}y=g}u=-1===d||-1===h?null:{start:d,end:h}}else u=null}u=u||{start:0,end:0}}else u=null;tr={focusedElem:l,selectionRange:u},Tn=!1,ru=a;do{try{Du()}catch(e){if(null===ru)throw Error(i(330));Bu(ru,e),ru=ru.nextEffect}}while(null!==ru);ru=a;do{try{for(l=e,u=t;null!==ru;){var E=ru.effectTag;if(16&E&&We(ru.stateNode,""),128&E){var x=ru.alternate;if(null!==x){var w=x.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&E){case 2:Sl(ru),ru.effectTag&=-3;break;case 6:Sl(ru),ru.effectTag&=-3,Ml(ru.alternate,ru);break;case 1024:ru.effectTag&=-1025;break;case 1028:ru.effectTag&=-1025,Ml(ru.alternate,ru);break;case 4:Ml(ru.alternate,ru);break;case 8:Tl(l,c=ru,u),xl(c)}ru=ru.nextEffect}}catch(e){if(null===ru)throw Error(i(330));Bu(ru,e),ru=ru.nextEffect}}while(null!==ru);if(w=tr,x=Gn(),E=w.focusedElem,u=w.selectionRange,x!==E&&E&&E.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(E.ownerDocument.documentElement,E)){null!==u&&Zn(E)&&(x=u.start,void 0===(w=u.end)&&(w=x),"selectionStart"in E?(E.selectionStart=x,E.selectionEnd=Math.min(w,E.value.length)):(w=(x=E.ownerDocument||document)&&x.defaultView||window).getSelection&&(w=w.getSelection(),c=E.textContent.length,l=Math.min(u.start,c),u=void 0===u.end?l:Math.min(u.end,c),!w.extend&&l>u&&(c=u,u=l,l=c),c=Xn(E,l),f=Xn(E,u),c&&f&&(1!==w.rangeCount||w.anchorNode!==c.node||w.anchorOffset!==c.offset||w.focusNode!==f.node||w.focusOffset!==f.offset)&&((x=x.createRange()).setStart(c.node,c.offset),w.removeAllRanges(),l>u?(w.addRange(x),w.extend(f.node,f.offset)):(x.setEnd(f.node,f.offset),w.addRange(x))))),x=[];for(w=E;w=w.parentNode;)1===w.nodeType&&x.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof E.focus&&E.focus(),E=0;E<x.length;E++)(w=x[E]).element.scrollLeft=w.left,w.element.scrollTop=w.top}tr=null,Tn=!!er,er=null,e.current=n,ru=a;do{try{for(E=r;null!==ru;){var S=ru.effectTag;if(36&S){var T=ru.alternate;switch(w=E,(x=ru).tag){case 0:case 11:case 15:gl(16,32,x);break;case 1:var M=x.stateNode;if(4&x.effectTag)if(null===T)M.componentDidMount();else{var k=x.elementType===x.type?T.memoizedProps:to(x.type,T.memoizedProps);M.componentDidUpdate(k,T.memoizedState,M.__reactInternalSnapshotBeforeUpdate)}var _=x.updateQueue;null!==_&&So(0,_,M);break;case 3:var C=x.updateQueue;if(null!==C){if(l=null,null!==x.child)switch(x.child.tag){case 5:l=x.child.stateNode;break;case 1:l=x.child.stateNode}So(0,C,l)}break;case 5:var A=x.stateNode;null===T&&4&x.effectTag&&nr(x.type,x.memoizedProps)&&A.focus();break;case 6:case 4:case 12:break;case 13:if(null===x.memoizedState){var P=x.alternate;if(null!==P){var O=P.memoizedState;if(null!==O){var R=O.dehydrated;null!==R&&Mt(R)}}}break;case 19:case 17:case 20:case 21:break;default:throw Error(i(163))}}if(128&S){x=void 0;var L=ru.ref;if(null!==L){var N=ru.stateNode;switch(ru.tag){case 5:x=N;break;default:x=N}"function"==typeof L?L(x):L.current=x}}ru=ru.nextEffect}}catch(e){if(null===ru)throw Error(i(330));Bu(ru,e),ru=ru.nextEffect}}while(null!==ru);ru=null,Ba(),Yl=o}else e.current=n;if(lu)lu=!1,uu=e,su=t;else for(ru=a;null!==ru;)t=ru.nextEffect,ru.nextEffect=null,ru=t;if(0===(t=e.firstPendingTime)&&(iu=null),1073741823===t?e===pu?fu++:(fu=0,pu=e):fu=0,"function"==typeof Wu&&Wu(n.stateNode,r),gu(e),au)throw au=!1,e=ou,ou=null,e;return(Yl&Fl)!==Nl?null:($a(),null)}function Du(){for(;null!==ru;){var e=ru.effectTag;0!=(256&e)&&bl(ru.alternate,ru),0==(512&e)||lu||(lu=!0,Za(97,(function(){return Uu(),null}))),ru=ru.nextEffect}}function Uu(){if(90!==su){var e=97<su?97:su;return su=90,Ga(e,ju)}}function ju(){if(null===uu)return!1;var e=uu;if(uu=null,(Yl&(Dl|Ul))!==Nl)throw Error(i(331));var t=Yl;for(Yl|=Ul,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:gl(128,0,n),gl(0,64,n)}}catch(t){if(null===e)throw Error(i(330));Bu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Yl=t,$a(),!0}function Iu(e,t,n){bo(e,t=Cl(e,t=hl(n,t),1073741823)),null!==(e=yu(e,1073741823))&&gu(e)}function Bu(e,t){if(3===e.tag)Iu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Iu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===iu||!iu.has(r))){bo(n,e=Al(n,e=hl(t,e),1073741823)),null!==(n=yu(n,1073741823))&&gu(n);break}}n=n.return}}function zu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Hl===e&&Xl===n?Gl===Vl||Gl===zl&&1073741823===ql&&Ha()-tu<nu?Tu(e,Xl):eu=!0:es(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),gu(e)))}function Vu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=mu(t=hu(),e,null)),null!==(e=yu(e,t))&&gu(e)}Pl=function(e,t,n){var r=t.expirationTime;if(null!==e){var a=t.pendingProps;if(e.memoizedProps!==a||ya.current)Hi=!0;else{if(r<n){switch(Hi=!1,t.tag){case 3:el(t),Wi();break;case 5:if(Ko(t),4&t.mode&&1!==n&&a.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:Ea(t.type)&&Ma(t);break;case 4:Yo(t,t.stateNode.containerInfo);break;case 10:lo(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?il(e,t,n):(ha(Go,1&Go.current),null!==(t=cl(e,t,n))?t.sibling:null);ha(Go,1&Go.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return sl(e,t,n);t.effectTag|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null),ha(Go,Go.current),!r)return null}return cl(e,t,n)}Hi=!1}}else Hi=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,a=ga(t,va.current),co(t,n),a=hi(null,t,r,e,a,n),t.effectTag|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,mi(),Ea(r)){var o=!0;Ma(t)}else o=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&_o(t,r,l,e),a.updater=Co,t.stateNode=a,a._reactInternalFiber=t,Ro(t,r,e,n),t=Ji(null,t,r,!0,o,n)}else t.tag=0,Ki(null,t,a,n),t=t.child;return t;case 16:if(a=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(a),1!==a._status)throw a._result;switch(a=a._result,t.type=a,o=t.tag=function(e){if("function"==typeof e)return Xu(e)?1:0;if(null!=e){if((e=e.$$typeof)===Y)return 11;if(e===X)return 14}return 2}(a),e=to(a,e),o){case 0:t=$i(null,t,a,e,n);break;case 1:t=Qi(null,t,a,e,n);break;case 11:t=Xi(null,t,a,e,n);break;case 14:t=Gi(null,t,a,to(a.type,e),r,n);break;default:throw Error(i(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,$i(e,t,r,a=t.elementType===r?a:to(r,a),n);case 1:return r=t.type,a=t.pendingProps,Qi(e,t,r,a=t.elementType===r?a:to(r,a),n);case 3:if(el(t),null===(r=t.updateQueue))throw Error(i(282));if(a=null!==(a=t.memoizedState)?a.element:null,wo(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===a)Wi(),t=cl(e,t,n);else{if((a=t.stateNode.hydrate)&&(Di=ir(t.stateNode.containerInfo.firstChild),Fi=t,a=Ui=!0),a)for(n=jo(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Ki(e,t,r,n),Wi();t=t.child}return t;case 5:return Ko(t),null===e&&Bi(t),r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,l=a.children,rr(r,a)?l=null:null!==o&&rr(r,o)&&(t.effectTag|=16),qi(e,t),4&t.mode&&1!==n&&a.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ki(e,t,l,n),t=t.child),t;case 6:return null===e&&Bi(t),null;case 13:return il(e,t,n);case 4:return Yo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Uo(t,null,r,n):Ki(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Xi(e,t,r,a=t.elementType===r?a:to(r,a),n);case 7:return Ki(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ki(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,l=t.memoizedProps,lo(t,o=a.value),null!==l){var u=l.value;if(0===(o=ea(u,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(l.children===a.children&&!ya.current){t=cl(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===u.tag&&((c=vo(n,null)).tag=2,bo(u,c)),u.expirationTime<n&&(u.expirationTime=n),null!==(c=u.alternate)&&c.expirationTime<n&&(c.expirationTime=n),so(u.return,n),s.expirationTime<n&&(s.expirationTime=n);break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}}Ki(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(o=t.pendingProps).children,co(t,n),r=r(a=fo(a,o.unstable_observedBits)),t.effectTag|=1,Ki(e,t,r,n),t.child;case 14:return o=to(a=t.type,t.pendingProps),Gi(e,t,a,o=to(a.type,o),r,n);case 15:return Zi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:to(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Ea(r)?(e=!0,Ma(t)):e=!1,co(t,n),Po(t,r,a),Ro(t,r,a,n),Ji(null,t,r,!0,e,n);case 19:return sl(e,t,n)}throw Error(i(156,t.tag))};var Wu=null,Yu=null;function Hu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Ku(e,t,n,r){return new Hu(e,t,n,r)}function Xu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Gu(e,t){var n=e.alternate;return null===n?((n=Ku(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Zu(e,t,n,r,a,o){var l=2;if(r=e,"function"==typeof e)Xu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case j:return qu(n.children,a,o,t);case W:l=8,a|=7;break;case I:l=8,a|=1;break;case B:return(e=Ku(12,n,t,8|a)).elementType=B,e.type=B,e.expirationTime=o,e;case H:return(e=Ku(13,n,t,a)).type=H,e.elementType=H,e.expirationTime=o,e;case K:return(e=Ku(19,n,t,a)).elementType=K,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case z:l=10;break e;case V:l=9;break e;case Y:l=11;break e;case X:l=14;break e;case G:l=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ku(l,n,t,a)).elementType=e,t.type=r,t.expirationTime=o,t}function qu(e,t,n,r){return(e=Ku(7,e,r,t)).expirationTime=n,e}function $u(e,t,n){return(e=Ku(6,e,null,t)).expirationTime=n,e}function Qu(e,t,n){return(t=Ku(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ju(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function es(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function ts(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function ns(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function rs(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function as(e,t,n,r){var a=t.current,o=hu(),l=Mo.suspense;o=mu(o,a,l);e:if(n){t:{if(et(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(Ea(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var s=n.type;if(Ea(s)){n=Ta(n,s,u);break e}}n=u}else n=ma;return null===t.context?t.context=n:t.pendingContext=n,(t=vo(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),bo(a,t),vu(a,o),o}function os(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function is(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function ls(e,t){is(e,t),(e=e.alternate)&&is(e,t)}function us(e,t,n){var r=new Ju(e,t,n=null!=n&&!0===n.hydrate),a=Ku(3,null,null,2===t?7:1===t?3:0);r.current=a,a.stateNode=r,e[fr]=r.current,n&&0!==t&&function(e){var t=Nn(e);mt.forEach((function(n){Fn(n,e,t)})),vt.forEach((function(n){Fn(n,e,t)}))}(9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function ss(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function cs(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o._internalRoot;if("function"==typeof a){var l=a;a=function(){var e=os(i);l.call(e)}}as(t,i,e,a)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new us(e,0,t?{hydrate:!0}:void 0)}(n,r),i=o._internalRoot,"function"==typeof a){var u=a;a=function(){var e=os(i);u.call(e)}}Su((function(){as(t,i,e,a)}))}return os(i)}function fs(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ss(t))throw Error(i(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:U,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}us.prototype.render=function(e,t){as(e,this._internalRoot,null,void 0===t?null:t)},us.prototype.unmount=function(e){var t=this._internalRoot,n=void 0===e?null:e,r=t.containerInfo;as(null,t,null,(function(){r[fr]=null,null!==n&&n()}))},at=function(e){if(13===e.tag){var t=eo(hu(),150,100);vu(e,t),ls(e,t)}},ot=function(e){if(13===e.tag){hu();var t=Ja++;vu(e,t),ls(e,t)}},it=function(e){if(13===e.tag){var t=hu();vu(e,t=mu(t,e,null)),ls(e,t)}},ee=function(e,t,n){switch(t){case"input":if(Ae(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=mr(r);if(!a)throw Error(i(90));Me(r),Ae(r,a)}}}break;case"textarea":De(e,n);break;case"select":null!=(t=n.value)&&Le(e,!!n.multiple,t,!1)}},ie=wu,le=function(e,t,n,r){var a=Yl;Yl|=4;try{return Ga(98,e.bind(null,t,n,r))}finally{(Yl=a)===Nl&&$a()}},ue=function(){(Yl&(1|Dl|Ul))===Nl&&(function(){if(null!==cu){var e=cu;cu=null,e.forEach((function(e,t){rs(t,e),gu(t)})),$a()}}(),Uu())},se=function(e,t){var n=Yl;Yl|=2;try{return e(t)}finally{(Yl=n)===Nl&&$a()}};var ps,ds,hs={createPortal:fs,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=rt(t))?null:e.stateNode},hydrate:function(e,t,n){if(!ss(t))throw Error(i(200));return cs(null,e,t,!0,n)},render:function(e,t,n){if(!ss(t))throw Error(i(200));return cs(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!ss(n))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return cs(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!ss(e))throw Error(i(40));return!!e._reactRootContainer&&(Su((function(){cs(null,null,e,!1,(function(){e._reactRootContainer=null,e[fr]=null}))})),!0)},unstable_createPortal:function(){return fs.apply(void 0,arguments)},unstable_batchedUpdates:wu,flushSync:function(e,t){if((Yl&(Dl|Ul))!==Nl)throw Error(i(187));var n=Yl;Yl|=1;try{return Ga(99,e.bind(null,t))}finally{Yl=n,$a()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[dr,hr,mr,O.injectEventPluginsByName,p,Rt,function(e){_(e,Ot)},ae,oe,Pn,P,Uu,{current:!1}]}};ds=(ps={findFiberByHostInstance:pr,bundleType:0,version:"16.12.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Wu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Yu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(a({},ps,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:L.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return ds?ds(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var ms={default:hs},vs=ms&&hs||ms;e.exports=vs.default||vs},function(e,t,n){"use strict";e.exports=n(93)},function(e,t,n){"use strict";
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,a,o,i,l;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,s=null,c=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(c,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(c,0))},a=function(e,t){s=setTimeout(e,t)},o=function(){clearTimeout(s)},i=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var p=window.performance,d=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof p&&"function"==typeof p.now)t.unstable_now=function(){return p.now()};else{var y=d.now();t.unstable_now=function(){return d.now()-y}}var b=!1,g=null,E=-1,x=5,w=0;i=function(){return t.unstable_now()>=w},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<e?Math.floor(1e3/e):5};var S=new MessageChannel,T=S.port2;S.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();w=e+x;try{g(!0,e)?T.postMessage(null):(b=!1,g=null)}catch(e){throw T.postMessage(null),e}}else b=!1},r=function(e){g=e,b||(b=!0,T.postMessage(null))},a=function(e,n){E=h((function(){e(t.unstable_now())}),n)},o=function(){m(E),E=-1}}function M(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),a=e[r];if(!(void 0!==a&&0<C(a,t)))break e;e[r]=t,e[n]=a,n=r}}function k(e){return void 0===(e=e[0])?null:e}function _(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var o=2*(r+1)-1,i=e[o],l=o+1,u=e[l];if(void 0!==i&&0>C(i,n))void 0!==u&&0>C(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[o]=n,r=o);else{if(!(void 0!==u&&0>C(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var A=[],P=[],O=1,R=null,L=3,N=!1,F=!1,D=!1;function U(e){for(var t=k(P);null!==t;){if(null===t.callback)_(P);else{if(!(t.startTime<=e))break;_(P),t.sortIndex=t.expirationTime,M(A,t)}t=k(P)}}function j(e){if(D=!1,U(e),!F)if(null!==k(A))F=!0,r(I);else{var t=k(P);null!==t&&a(j,t.startTime-e)}}function I(e,n){F=!1,D&&(D=!1,o()),N=!0;var r=L;try{for(U(n),R=k(A);null!==R&&(!(R.expirationTime>n)||e&&!i());){var l=R.callback;if(null!==l){R.callback=null,L=R.priorityLevel;var u=l(R.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?R.callback=u:R===k(A)&&_(A),U(n)}else _(A);R=k(A)}if(null!==R)var s=!0;else{var c=k(P);null!==c&&a(j,c.startTime-n),s=!1}return s}finally{R=null,L=r,N=!1}}function B(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var z=l;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=L;L=e;try{return t()}finally{L=n}},t.unstable_next=function(e){switch(L){case 1:case 2:case 3:var t=3;break;default:t=L}var n=L;L=t;try{return e()}finally{L=n}},t.unstable_scheduleCallback=function(e,n,i){var l=t.unstable_now();if("object"==typeof i&&null!==i){var u=i.delay;u="number"==typeof u&&0<u?l+u:l,i="number"==typeof i.timeout?i.timeout:B(e)}else i=B(e),u=l;return e={id:O++,callback:n,priorityLevel:e,startTime:u,expirationTime:i=u+i,sortIndex:-1},u>l?(e.sortIndex=u,M(P,e),null===k(A)&&e===k(P)&&(D?o():D=!0,a(j,u-l))):(e.sortIndex=i,M(A,e),F||N||(F=!0,r(I))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=L;return function(){var n=L;L=t;try{return e.apply(this,arguments)}finally{L=n}}},t.unstable_getCurrentPriorityLevel=function(){return L},t.unstable_shouldYield=function(){var e=t.unstable_now();U(e);var n=k(A);return n!==R&&null!==R&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<R.expirationTime||i()},t.unstable_requestPaint=z,t.unstable_continueExecution=function(){F||N||(F=!0,r(I))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return k(A)},t.unstable_Profiling=null},function(e,t,n){var r=n(95);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};n(13)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(12)(!1)).push([e.i,'body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",\n    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n    monospace;\n}\n',""])},function(e,t,n){var r=n(97);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};n(13)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(12)(!1)).push([e.i,".App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #09d3ac;\n}\n\n\n.ea4_1_box {\n  width: 50%;\n  background-color: lightgrey;\n  font-family: arial;\n  margin-left: 30px;\n  height: 80%;\n  padding: 10px 10px 10px 10px;\n  border-radius: 10px;\n  display: inline-block;\n}\n.ea4_2_box {\nwidth: 50%;\nbackground-color: lightgrey;\nfont-family: arial;\nmargin-left: 30px;\nheight: 80%;\npadding: 10px 10px 10px 10px;\nborder-radius: 10px;\ndisplay: inline-block;\n}\n\n.ea4_row{display:flex; flex-direction:row;}\n",""])},function(e,t,n){"use strict";var r=n(99);function a(){}function o(){}o.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,o,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:a};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r=n(101);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};n(13)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(12)(!1)).push([e.i,'.clippingrect {\n    width: 512px;\n    height: 512px;\n    background: url("https://i.ibb.co/b7HgSFy/Graph-Viz-Tech-EA1.png") 0 0;\n  }',""])},function(e,t,n){var r=n(103);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};n(13)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(12)(!1)).push([e.i,"",""])},function(e,t,n){e.exports={default:n(105),__esModule:!0}},function(e,t,n){n(106),e.exports=n(10).Object.assign},function(e,t,n){var r=n(16);r(r.S+r.F,"Object",{assign:n(108)})},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){"use strict";var r=n(19),a=n(32),o=n(48),i=n(35),l=n(30),u=n(62),s=Object.assign;e.exports=!s||n(27)((function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=s({},e)[n]||Object.keys(s({},t)).join("")!=r}))?function(e,t){for(var n=l(e),s=arguments.length,c=1,f=o.f,p=i.f;s>c;)for(var d,h=u(arguments[c++]),m=f?a(h).concat(f(h)):a(h),v=m.length,y=0;v>y;)d=m[y++],r&&!p.call(h,d)||(n[d]=h[d]);return n}:s},function(e,t,n){var r=n(21),a=n(63),o=n(110);e.exports=function(e){return function(t,n,i){var l,u=r(t),s=a(u.length),c=o(i,s);if(e&&n!=n){for(;s>c;)if((l=u[c++])!=l)return!0}else for(;s>c;c++)if((e||c in u)&&u[c]===n)return e||c||0;return!e&&-1}}},function(e,t,n){var r=n(44),a=Math.max,o=Math.min;e.exports=function(e,t){return(e=r(e))<0?a(e+t,0):o(e,t)}},function(e,t,n){n(112);var r=n(10).Object;e.exports=function(e,t,n){return r.defineProperty(e,t,n)}},function(e,t,n){var r=n(16);r(r.S+r.F*!n(19),"Object",{defineProperty:n(18).f})},function(e,t,n){e.exports={default:n(114),__esModule:!0}},function(e,t,n){n(65),n(119),e.exports=n(51).f("iterator")},function(e,t,n){var r=n(44),a=n(43);e.exports=function(e){return function(t,n){var o,i,l=String(a(t)),u=r(n),s=l.length;return u<0||u>=s?e?"":void 0:(o=l.charCodeAt(u))<55296||o>56319||u+1===s||(i=l.charCodeAt(u+1))<56320||i>57343?e?l.charAt(u):o:e?l.slice(u,u+2):i-56320+(o-55296<<10)+65536}}},function(e,t,n){"use strict";var r=n(49),a=n(29),o=n(50),i={};n(24)(i,n(15)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=r(i,{next:a(1,n)}),o(e,t+" Iterator")}},function(e,t,n){var r=n(18),a=n(25),o=n(32);e.exports=n(19)?Object.defineProperties:function(e,t){a(e);for(var n,i=o(t),l=i.length,u=0;l>u;)r.f(e,n=i[u++],t[n]);return e}},function(e,t,n){var r=n(17).document;e.exports=r&&r.documentElement},function(e,t,n){n(120);for(var r=n(17),a=n(24),o=n(31),i=n(15)("toStringTag"),l="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),u=0;u<l.length;u++){var s=l[u],c=r[s],f=c&&c.prototype;f&&!f[i]&&a(f,i,s),o[s]=o.Array}},function(e,t,n){"use strict";var r=n(121),a=n(122),o=n(31),i=n(21);e.exports=n(66)(Array,"Array",(function(e,t){this._t=i(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,a(1)):a(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(e,t){e.exports=function(){}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){e.exports={default:n(124),__esModule:!0}},function(e,t,n){n(125),n(130),n(131),n(132),e.exports=n(10).Symbol},function(e,t,n){"use strict";var r=n(17),a=n(20),o=n(19),i=n(16),l=n(67),u=n(126).KEY,s=n(27),c=n(46),f=n(50),p=n(34),d=n(15),h=n(51),m=n(52),v=n(127),y=n(128),b=n(25),g=n(26),E=n(30),x=n(21),w=n(41),S=n(29),T=n(49),M=n(129),k=n(53),_=n(48),C=n(18),A=n(32),P=k.f,O=C.f,R=M.f,L=r.Symbol,N=r.JSON,F=N&&N.stringify,D=d("_hidden"),U=d("toPrimitive"),j={}.propertyIsEnumerable,I=c("symbol-registry"),B=c("symbols"),z=c("op-symbols"),V=Object.prototype,W="function"==typeof L&&!!_.f,Y=r.QObject,H=!Y||!Y.prototype||!Y.prototype.findChild,K=o&&s((function(){return 7!=T(O({},"a",{get:function(){return O(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=P(V,t);r&&delete V[t],O(e,t,n),r&&e!==V&&O(V,t,r)}:O,X=function(e){var t=B[e]=T(L.prototype);return t._k=e,t},G=W&&"symbol"==typeof L.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof L},Z=function(e,t,n){return e===V&&Z(z,t,n),b(e),t=w(t,!0),b(n),a(B,t)?(n.enumerable?(a(e,D)&&e[D][t]&&(e[D][t]=!1),n=T(n,{enumerable:S(0,!1)})):(a(e,D)||O(e,D,S(1,{})),e[D][t]=!0),K(e,t,n)):O(e,t,n)},q=function(e,t){b(e);for(var n,r=v(t=x(t)),a=0,o=r.length;o>a;)Z(e,n=r[a++],t[n]);return e},$=function(e){var t=j.call(this,e=w(e,!0));return!(this===V&&a(B,e)&&!a(z,e))&&(!(t||!a(this,e)||!a(B,e)||a(this,D)&&this[D][e])||t)},Q=function(e,t){if(e=x(e),t=w(t,!0),e!==V||!a(B,t)||a(z,t)){var n=P(e,t);return!n||!a(B,t)||a(e,D)&&e[D][t]||(n.enumerable=!0),n}},J=function(e){for(var t,n=R(x(e)),r=[],o=0;n.length>o;)a(B,t=n[o++])||t==D||t==u||r.push(t);return r},ee=function(e){for(var t,n=e===V,r=R(n?z:x(e)),o=[],i=0;r.length>i;)!a(B,t=r[i++])||n&&!a(V,t)||o.push(B[t]);return o};W||(l((L=function(){if(this instanceof L)throw TypeError("Symbol is not a constructor!");var e=p(arguments.length>0?arguments[0]:void 0),t=function(n){this===V&&t.call(z,n),a(this,D)&&a(this[D],e)&&(this[D][e]=!1),K(this,e,S(1,n))};return o&&H&&K(V,e,{configurable:!0,set:t}),X(e)}).prototype,"toString",(function(){return this._k})),k.f=Q,C.f=Z,n(69).f=M.f=J,n(35).f=$,_.f=ee,o&&!n(33)&&l(V,"propertyIsEnumerable",$,!0),h.f=function(e){return X(d(e))}),i(i.G+i.W+i.F*!W,{Symbol:L});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;te.length>ne;)d(te[ne++]);for(var re=A(d.store),ae=0;re.length>ae;)m(re[ae++]);i(i.S+i.F*!W,"Symbol",{for:function(e){return a(I,e+="")?I[e]:I[e]=L(e)},keyFor:function(e){if(!G(e))throw TypeError(e+" is not a symbol!");for(var t in I)if(I[t]===e)return t},useSetter:function(){H=!0},useSimple:function(){H=!1}}),i(i.S+i.F*!W,"Object",{create:function(e,t){return void 0===t?T(e):q(T(e),t)},defineProperty:Z,defineProperties:q,getOwnPropertyDescriptor:Q,getOwnPropertyNames:J,getOwnPropertySymbols:ee});var oe=s((function(){_.f(1)}));i(i.S+i.F*oe,"Object",{getOwnPropertySymbols:function(e){return _.f(E(e))}}),N&&i(i.S+i.F*(!W||s((function(){var e=L();return"[null]"!=F([e])||"{}"!=F({a:e})||"{}"!=F(Object(e))}))),"JSON",{stringify:function(e){for(var t,n,r=[e],a=1;arguments.length>a;)r.push(arguments[a++]);if(n=t=r[1],(g(t)||void 0!==e)&&!G(e))return y(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!G(t))return t}),r[1]=t,F.apply(N,r)}}),L.prototype[U]||n(24)(L.prototype,U,L.prototype.valueOf),f(L,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){var r=n(34)("meta"),a=n(26),o=n(20),i=n(18).f,l=0,u=Object.isExtensible||function(){return!0},s=!n(27)((function(){return u(Object.preventExtensions({}))})),c=function(e){i(e,r,{value:{i:"O"+ ++l,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!a(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!o(e,r)){if(!u(e))return"F";if(!t)return"E";c(e)}return e[r].i},getWeak:function(e,t){if(!o(e,r)){if(!u(e))return!0;if(!t)return!1;c(e)}return e[r].w},onFreeze:function(e){return s&&f.NEED&&u(e)&&!o(e,r)&&c(e),e}}},function(e,t,n){var r=n(32),a=n(48),o=n(35);e.exports=function(e){var t=r(e),n=a.f;if(n)for(var i,l=n(e),u=o.f,s=0;l.length>s;)u.call(e,i=l[s++])&&t.push(i);return t}},function(e,t,n){var r=n(42);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(21),a=n(69).f,o={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==o.call(e)?function(e){try{return a(e)}catch(e){return i.slice()}}(e):a(r(e))}},function(e,t){},function(e,t,n){n(52)("asyncIterator")},function(e,t,n){n(52)("observable")},function(e,t,n){e.exports={default:n(134),__esModule:!0}},function(e,t,n){n(135),e.exports=n(10).Object.setPrototypeOf},function(e,t,n){var r=n(16);r(r.S,"Object",{setPrototypeOf:n(136).set})},function(e,t,n){var r=n(26),a=n(25),o=function(e,t){if(a(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(40)(Function.call,n(53).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return o(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:o}},function(e,t,n){e.exports={default:n(138),__esModule:!0}},function(e,t,n){n(139);var r=n(10).Object;e.exports=function(e,t){return r.create(e,t)}},function(e,t,n){var r=n(16);r(r.S,"Object",{create:n(49)})},function(e,t,n){e.exports={default:n(141),__esModule:!0}},function(e,t,n){n(142),e.exports=n(10).Object.getPrototypeOf},function(e,t,n){var r=n(30),a=n(68);n(70)("getPrototypeOf",(function(){return function(e){return a(r(e))}}))},function(e,t,n){e.exports={default:n(144),__esModule:!0}},function(e,t,n){n(145);var r=n(10).Object;e.exports=function(e,t){return r.getOwnPropertyDescriptor(e,t)}},function(e,t,n){var r=n(21),a=n(53).f;n(70)("getOwnPropertyDescriptor",(function(){return function(e,t){return a(r(e),t)}}))},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(147)),o=r(n(39)),i=!0,l=!1,u=["altKey","bubbles","cancelable","ctrlKey","currentTarget","eventPhase","metaKey","shiftKey","target","timeStamp","view","type"];function s(e){return null==e}var c=[{reg:/^key/,props:["char","charCode","key","keyCode","which"],fix:function(e,t){s(e.which)&&(e.which=s(t.charCode)?t.keyCode:t.charCode),void 0===e.metaKey&&(e.metaKey=e.ctrlKey)}},{reg:/^touch/,props:["touches","changedTouches","targetTouches"]},{reg:/^hashchange$/,props:["newURL","oldURL"]},{reg:/^gesturechange$/i,props:["rotation","scale"]},{reg:/^(mousewheel|DOMMouseScroll)$/,props:[],fix:function(e,t){var n=void 0,r=void 0,a=void 0,o=t.wheelDelta,i=t.axis,l=t.wheelDeltaY,u=t.wheelDeltaX,s=t.detail;o&&(a=o/120),s&&(a=0-(s%3==0?s/3:s)),void 0!==i&&(i===e.HORIZONTAL_AXIS?(r=0,n=0-a):i===e.VERTICAL_AXIS&&(n=0,r=a)),void 0!==l&&(r=l/120),void 0!==u&&(n=-1*u/120),n||r||(r=a),void 0!==n&&(e.deltaX=n),void 0!==r&&(e.deltaY=r),void 0!==a&&(e.delta=a)}},{reg:/^mouse|contextmenu|click|mspointer|(^DOMMouseScroll$)/i,props:["buttons","clientX","clientY","button","offsetX","relatedTarget","which","fromElement","toElement","offsetY","pageX","pageY","screenX","screenY"],fix:function(e,t){var n=void 0,r=void 0,a=void 0,o=e.target,i=t.button;return o&&s(e.pageX)&&!s(t.clientX)&&(r=(n=o.ownerDocument||document).documentElement,a=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||a&&a.scrollLeft||0)-(r&&r.clientLeft||a&&a.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||a&&a.scrollTop||0)-(r&&r.clientTop||a&&a.clientTop||0)),e.which||void 0===i||(e.which=1&i?1:2&i?3:4&i?2:0),!e.relatedTarget&&e.fromElement&&(e.relatedTarget=e.fromElement===o?e.toElement:e.fromElement),e}}];function f(){return i}function p(){return l}function d(e){var t=e.type,n="function"==typeof e.stopPropagation||"boolean"==typeof e.cancelBubble;a.default.call(this),this.nativeEvent=e;var r=p;"defaultPrevented"in e?r=e.defaultPrevented?f:p:"getPreventDefault"in e?r=e.getPreventDefault()?f:p:"returnValue"in e&&(r=e.returnValue===l?f:p),this.isDefaultPrevented=r;var o=[],i=void 0,s=void 0,d=u.concat();for(c.forEach((function(e){t.match(e.reg)&&(d=d.concat(e.props),e.fix&&o.push(e.fix))})),i=d.length;i;)this[s=d[--i]]=e[s];for(!this.target&&n&&(this.target=e.srcElement||document),this.target&&3===this.target.nodeType&&(this.target=this.target.parentNode),i=o.length;i;)(0,o[--i])(this,e);this.timeStamp=e.timeStamp||Date.now()}var h=a.default.prototype;(0,o.default)(d.prototype,h,{constructor:d,preventDefault:function(){var e=this.nativeEvent;e.preventDefault?e.preventDefault():e.returnValue=l,h.preventDefault.call(this)},stopPropagation:function(){var e=this.nativeEvent;e.stopPropagation?e.stopPropagation():e.cancelBubble=i,h.stopPropagation.call(this)}}),t.default=d,e.exports=t.default},function(e,t,n){"use strict";function r(){return!1}function a(){return!0}function o(){this.timeStamp=Date.now(),this.target=void 0,this.currentTarget=void 0}Object.defineProperty(t,"__esModule",{value:!0}),o.prototype={isEventObject:1,constructor:o,isDefaultPrevented:r,isPropagationStopped:r,isImmediatePropagationStopped:r,preventDefault:function(){this.isDefaultPrevented=a},stopPropagation:function(){this.isPropagationStopped=a},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=a,this.stopPropagation()},halt:function(e){e?this.stopImmediatePropagation():this.stopPropagation(),this.preventDefault()}},t.default=o,e.exports=t.default},function(e,t,n){e.exports={default:n(149),__esModule:!0}},function(e,t,n){n(65),n(150),e.exports=n(10).Array.from},function(e,t,n){"use strict";var r=n(40),a=n(16),o=n(30),i=n(151),l=n(152),u=n(63),s=n(153),c=n(154);a(a.S+a.F*!n(156)((function(e){Array.from(e)})),"Array",{from:function(e){var t,n,a,f,p=o(e),d="function"==typeof this?this:Array,h=arguments.length,m=h>1?arguments[1]:void 0,v=void 0!==m,y=0,b=c(p);if(v&&(m=r(m,h>2?arguments[2]:void 0,2)),null==b||d==Array&&l(b))for(n=new d(t=u(p.length));t>y;y++)s(n,y,v?m(p[y],y):p[y]);else for(f=b.call(p),n=new d;!(a=f.next()).done;y++)s(n,y,v?i(f,m,[a.value,y],!0):a.value);return n.length=y,n}})},function(e,t,n){var r=n(25);e.exports=function(e,t,n,a){try{return a?t(r(n)[0],n[1]):t(n)}catch(t){var o=e.return;throw void 0!==o&&r(o.call(e)),t}}},function(e,t,n){var r=n(31),a=n(15)("iterator"),o=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||o[a]===e)}},function(e,t,n){"use strict";var r=n(18),a=n(29);e.exports=function(e,t,n){t in e?r.f(e,t,a(0,n)):e[t]=n}},function(e,t,n){var r=n(155),a=n(15)("iterator"),o=n(31);e.exports=n(10).getIteratorMethod=function(e){if(null!=e)return e[a]||e["@@iterator"]||o[r(e)]}},function(e,t,n){var r=n(42),a=n(15)("toStringTag"),o="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,i;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),a))?n:o?r(t):"Object"==(i=r(t))&&"function"==typeof t.callee?"Arguments":i}},function(e,t,n){var r=n(15)("iterator"),a=!1;try{var o=[7][r]();o.return=function(){a=!0},Array.from(o,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!a)return!1;var n=!1;try{var o=[7],i=o[r]();i.next=function(){return{done:n=!0}},o[r]=function(){return i},e(o)}catch(e){}return n}},function(e,t,n){(e.exports=n(12)(!1)).push([e.i,".rc-slider {\n  position: relative;\n  height: 14px;\n  padding: 5px 0;\n  width: 100%;\n  border-radius: 6px;\n  -ms-touch-action: none;\n      touch-action: none;\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider * {\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider-rail {\n  position: absolute;\n  width: 100%;\n  background-color: #e9e9e9;\n  height: 4px;\n  border-radius: 6px;\n}\n.rc-slider-track {\n  position: absolute;\n  left: 0;\n  height: 4px;\n  border-radius: 6px;\n  background-color: #abe2fb;\n}\n.rc-slider-handle {\n  position: absolute;\n  width: 14px;\n  height: 14px;\n  cursor: pointer;\n  cursor: -webkit-grab;\n  margin-top: -5px;\n  cursor: grab;\n  border-radius: 50%;\n  border: solid 2px #96dbfa;\n  background-color: #fff;\n  -ms-touch-action: pan-x;\n      touch-action: pan-x;\n}\n.rc-slider-handle:focus {\n  border-color: #57c5f7;\n  box-shadow: 0 0 0 5px #96dbfa;\n  outline: none;\n}\n.rc-slider-handle-click-focused:focus {\n  border-color: #96dbfa;\n  box-shadow: unset;\n}\n.rc-slider-handle:hover {\n  border-color: #57c5f7;\n}\n.rc-slider-handle:active {\n  border-color: #57c5f7;\n  box-shadow: 0 0 5px #57c5f7;\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n.rc-slider-mark {\n  position: absolute;\n  top: 18px;\n  left: 0;\n  width: 100%;\n  font-size: 12px;\n}\n.rc-slider-mark-text {\n  position: absolute;\n  display: inline-block;\n  vertical-align: middle;\n  text-align: center;\n  cursor: pointer;\n  color: #999;\n}\n.rc-slider-mark-text-active {\n  color: #666;\n}\n.rc-slider-step {\n  position: absolute;\n  width: 100%;\n  height: 4px;\n  background: transparent;\n}\n.rc-slider-dot {\n  position: absolute;\n  bottom: -2px;\n  margin-left: -4px;\n  width: 8px;\n  height: 8px;\n  border: 2px solid #e9e9e9;\n  background-color: #fff;\n  cursor: pointer;\n  border-radius: 50%;\n  vertical-align: middle;\n}\n.rc-slider-dot-active {\n  border-color: #96dbfa;\n}\n.rc-slider-dot-reverse {\n  margin-left: 0;\n  margin-right: -4px;\n}\n.rc-slider-disabled {\n  background-color: #e9e9e9;\n}\n.rc-slider-disabled .rc-slider-track {\n  background-color: #ccc;\n}\n.rc-slider-disabled .rc-slider-handle,\n.rc-slider-disabled .rc-slider-dot {\n  border-color: #ccc;\n  box-shadow: none;\n  background-color: #fff;\n  cursor: not-allowed;\n}\n.rc-slider-disabled .rc-slider-mark-text,\n.rc-slider-disabled .rc-slider-dot {\n  cursor: not-allowed !important;\n}\n.rc-slider-vertical {\n  width: 14px;\n  height: 100%;\n  padding: 0 5px;\n}\n.rc-slider-vertical .rc-slider-rail {\n  height: 100%;\n  width: 4px;\n}\n.rc-slider-vertical .rc-slider-track {\n  left: 5px;\n  bottom: 0;\n  width: 4px;\n}\n.rc-slider-vertical .rc-slider-handle {\n  margin-left: -5px;\n  -ms-touch-action: pan-y;\n      touch-action: pan-y;\n}\n.rc-slider-vertical .rc-slider-mark {\n  top: 0;\n  left: 18px;\n  height: 100%;\n}\n.rc-slider-vertical .rc-slider-step {\n  height: 100%;\n  width: 4px;\n}\n.rc-slider-vertical .rc-slider-dot {\n  left: 2px;\n  margin-bottom: -4px;\n}\n.rc-slider-vertical .rc-slider-dot:first-child {\n  margin-bottom: -4px;\n}\n.rc-slider-vertical .rc-slider-dot:last-child {\n  margin-bottom: -4px;\n}\n.rc-slider-tooltip-zoom-down-enter,\n.rc-slider-tooltip-zoom-down-appear {\n  animation-duration: .3s;\n  animation-fill-mode: both;\n  display: block !important;\n  animation-play-state: paused;\n}\n.rc-slider-tooltip-zoom-down-leave {\n  animation-duration: .3s;\n  animation-fill-mode: both;\n  display: block !important;\n  animation-play-state: paused;\n}\n.rc-slider-tooltip-zoom-down-enter.rc-slider-tooltip-zoom-down-enter-active,\n.rc-slider-tooltip-zoom-down-appear.rc-slider-tooltip-zoom-down-appear-active {\n  animation-name: rcSliderTooltipZoomDownIn;\n  animation-play-state: running;\n}\n.rc-slider-tooltip-zoom-down-leave.rc-slider-tooltip-zoom-down-leave-active {\n  animation-name: rcSliderTooltipZoomDownOut;\n  animation-play-state: running;\n}\n.rc-slider-tooltip-zoom-down-enter,\n.rc-slider-tooltip-zoom-down-appear {\n  transform: scale(0, 0);\n  animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);\n}\n.rc-slider-tooltip-zoom-down-leave {\n  animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);\n}\n@keyframes rcSliderTooltipZoomDownIn {\n  0% {\n    opacity: 0;\n    transform-origin: 50% 100%;\n    transform: scale(0, 0);\n  }\n  100% {\n    transform-origin: 50% 100%;\n    transform: scale(1, 1);\n  }\n}\n@keyframes rcSliderTooltipZoomDownOut {\n  0% {\n    transform-origin: 50% 100%;\n    transform: scale(1, 1);\n  }\n  100% {\n    opacity: 0;\n    transform-origin: 50% 100%;\n    transform: scale(0, 0);\n  }\n}\n.rc-slider-tooltip {\n  position: absolute;\n  left: -9999px;\n  top: -9999px;\n  visibility: visible;\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider-tooltip * {\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider-tooltip-hidden {\n  display: none;\n}\n.rc-slider-tooltip-placement-top {\n  padding: 4px 0 8px 0;\n}\n.rc-slider-tooltip-inner {\n  padding: 6px 2px;\n  min-width: 24px;\n  height: 24px;\n  font-size: 12px;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  text-decoration: none;\n  background-color: #6c6c6c;\n  border-radius: 6px;\n  box-shadow: 0 0 4px #d9d9d9;\n}\n.rc-slider-tooltip-arrow {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.rc-slider-tooltip-placement-top .rc-slider-tooltip-arrow {\n  bottom: 4px;\n  left: 50%;\n  margin-left: -4px;\n  border-width: 4px 4px 0;\n  border-top-color: #6c6c6c;\n}\n",""])},function(e,t,n){var r=n(159);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};n(13)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(12)(!1)).push([e.i,".canvasBox {\n    width: 50%;\n    background-color: lightgrey;\n    font-family: arial;\n    margin-left: 30px;\n    height: 80%;\n    padding: 10px 10px 10px 10px;\n    border-radius: 10px;\n    display: inline-block;\n  }\n.sliderBox {\n  width: 50%;\n  background-color: lightgrey;\n  font-family: arial;\n  margin-left: 30px;\n  height: 80%;\n  padding: 10px 10px 10px 10px;\n  border-radius: 10px;\n  display: inline-block;\n}\n\n.rowC{display:flex; flex-direction:row;}",""])},function(e,t,n){var r=n(161);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};n(13)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(12)(!1)).push([e.i,".canvasBoxEA5 {\n    width: 50%;\n    background-color: lightgrey;\n    font-family: arial;\n    margin-left: 30px;\n    height: 80%;\n    padding: 10px 10px 10px 10px;\n    border-radius: 10px;\n    display: inline-block;\n  }\n.sliderBoxEA5 {\n  width: 50%;\n  background-color: lightgrey;\n  font-family: arial;\n  margin-left: 30px;\n  height: 80%;\n  padding: 10px 10px 10px 10px;\n  border-radius: 10px;\n  display: inline-block;\n}\n\n.rowCEA5{display:flex; flex-direction:row;}",""])},function(e,t,n){var r=n(163);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};n(13)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(12)(!1)).push([e.i,".canvasBoxEA5 {\n    width: 50%;\n    background-color: lightgrey;\n    font-family: arial;\n    margin-left: 30px;\n    height: 80%;\n    padding: 10px 10px 10px 10px;\n    border-radius: 10px;\n    display: inline-block;\n  }\n.sliderBoxEA5 {\n  width: 50%;\n  background-color: lightgrey;\n  font-family: arial;\n  margin-left: 30px;\n  height: 80%;\n  padding: 10px 10px 10px 10px;\n  border-radius: 10px;\n  display: inline-block;\n}\n\n.rowCEA5{display:flex; flex-direction:row;}",""])},function(e,t,n){var r=n(165);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};n(13)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(12)(!1)).push([e.i,".canvasBoxEA5 {\n    width: 50%;\n    background-color: lightgrey;\n    font-family: arial;\n    margin-left: 30px;\n    height: 80%;\n    padding: 10px 10px 10px 10px;\n    border-radius: 10px;\n    display: inline-block;\n  }\n.sliderBoxEA5 {\n  width: 50%;\n  background-color: lightgrey;\n  font-family: arial;\n  margin-left: 30px;\n  height: 80%;\n  padding: 10px 10px 10px 10px;\n  border-radius: 10px;\n  display: inline-block;\n}\n\n.rowCEA5{display:flex; flex-direction:row;}",""])},function(e,t,n){var r=n(167);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};n(13)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(12)(!1)).push([e.i,".canvasBoxEA5 {\n    width: 50%;\n    background-color: lightgrey;\n    font-family: arial;\n    margin-left: 30px;\n    height: 80%;\n    padding: 10px 10px 10px 10px;\n    border-radius: 10px;\n    display: inline-block;\n  }\n.sliderBoxEA5 {\n  width: 50%;\n  background-color: lightgrey;\n  font-family: arial;\n  margin-left: 30px;\n  height: 80%;\n  padding: 10px 10px 10px 10px;\n  border-radius: 10px;\n  display: inline-block;\n}\n\n.rowCEA5{display:flex; flex-direction:row;}",""])},function(e,t,n){var r=n(169);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};n(13)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(12)(!1)).push([e.i,".canvasBoxEA5 {\n    width: 50%;\n    background-color: lightgrey;\n    font-family: arial;\n    margin-left: 30px;\n    height: 80%;\n    padding: 10px 10px 10px 10px;\n    border-radius: 10px;\n    display: inline-block;\n  }\n.sliderBoxEA5 {\n  width: 50%;\n  background-color: lightgrey;\n  font-family: arial;\n  margin-left: 30px;\n  height: 80%;\n  padding: 10px 10px 10px 10px;\n  border-radius: 10px;\n  display: inline-block;\n}\n\n.rowCEA5{display:flex; flex-direction:row;}",""])},function(e,t,n){var r=n(171);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};n(13)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(12)(!1)).push([e.i,".canvasBoxEA5 {\n    width: 50%;\n    background-color: lightgrey;\n    font-family: arial;\n    margin-left: 30px;\n    height: 80%;\n    padding: 10px 10px 10px 10px;\n    border-radius: 10px;\n    display: inline-block;\n  }\n.sliderBoxEA5 {\n  width: 50%;\n  background-color: lightgrey;\n  font-family: arial;\n  margin-left: 30px;\n  height: 80%;\n  padding: 10px 10px 10px 10px;\n  border-radius: 10px;\n  display: inline-block;\n}\n\n.rowCEA5{display:flex; flex-direction:row;}",""])},function(e,t){var n,r,a=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var u,s=[],c=!1,f=-1;function p(){c&&u&&(c=!1,u.length?s=u.concat(s):f=-1,s.length&&d())}function d(){if(!c){var e=l(p);c=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||c||l(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=m,a.addListener=m,a.once=m,a.off=m,a.removeListener=m,a.removeAllListeners=m,a.emit=m,a.prependListener=m,a.prependOnceListener=m,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"create",(function(){return ba})),n.d(r,"fromMat4",(function(){return ga})),n.d(r,"clone",(function(){return Ea})),n.d(r,"copy",(function(){return xa})),n.d(r,"fromValues",(function(){return wa})),n.d(r,"set",(function(){return Sa})),n.d(r,"identity",(function(){return Ta})),n.d(r,"transpose",(function(){return Ma})),n.d(r,"invert",(function(){return ka})),n.d(r,"adjoint",(function(){return _a})),n.d(r,"determinant",(function(){return Ca})),n.d(r,"multiply",(function(){return Aa})),n.d(r,"translate",(function(){return Pa})),n.d(r,"rotate",(function(){return Oa})),n.d(r,"scale",(function(){return Ra})),n.d(r,"fromTranslation",(function(){return La})),n.d(r,"fromRotation",(function(){return Na})),n.d(r,"fromScaling",(function(){return Fa})),n.d(r,"fromMat2d",(function(){return Da})),n.d(r,"fromQuat",(function(){return Ua})),n.d(r,"normalFromMat4",(function(){return ja})),n.d(r,"projection",(function(){return Ia})),n.d(r,"str",(function(){return Ba})),n.d(r,"frob",(function(){return za})),n.d(r,"add",(function(){return Va})),n.d(r,"subtract",(function(){return Wa})),n.d(r,"multiplyScalar",(function(){return Ya})),n.d(r,"multiplyScalarAndAdd",(function(){return Ha})),n.d(r,"exactEquals",(function(){return Ka})),n.d(r,"equals",(function(){return Xa})),n.d(r,"mul",(function(){return Ga})),n.d(r,"sub",(function(){return Za}));var a={};n.r(a),n.d(a,"create",(function(){return qa})),n.d(a,"clone",(function(){return $a})),n.d(a,"copy",(function(){return Qa})),n.d(a,"fromValues",(function(){return Ja})),n.d(a,"set",(function(){return eo})),n.d(a,"identity",(function(){return to})),n.d(a,"transpose",(function(){return no})),n.d(a,"invert",(function(){return ro})),n.d(a,"adjoint",(function(){return ao})),n.d(a,"determinant",(function(){return oo})),n.d(a,"multiply",(function(){return io})),n.d(a,"translate",(function(){return lo})),n.d(a,"scale",(function(){return uo})),n.d(a,"rotate",(function(){return so})),n.d(a,"rotateX",(function(){return co})),n.d(a,"rotateY",(function(){return fo})),n.d(a,"rotateZ",(function(){return po})),n.d(a,"fromTranslation",(function(){return ho})),n.d(a,"fromScaling",(function(){return mo})),n.d(a,"fromRotation",(function(){return vo})),n.d(a,"fromXRotation",(function(){return yo})),n.d(a,"fromYRotation",(function(){return bo})),n.d(a,"fromZRotation",(function(){return go})),n.d(a,"fromRotationTranslation",(function(){return Eo})),n.d(a,"fromQuat2",(function(){return xo})),n.d(a,"getTranslation",(function(){return wo})),n.d(a,"getScaling",(function(){return So})),n.d(a,"getRotation",(function(){return To})),n.d(a,"fromRotationTranslationScale",(function(){return Mo})),n.d(a,"fromRotationTranslationScaleOrigin",(function(){return ko})),n.d(a,"fromQuat",(function(){return _o})),n.d(a,"frustum",(function(){return Co})),n.d(a,"perspective",(function(){return Ao})),n.d(a,"perspectiveFromFieldOfView",(function(){return Po})),n.d(a,"ortho",(function(){return Oo})),n.d(a,"lookAt",(function(){return Ro})),n.d(a,"targetTo",(function(){return Lo})),n.d(a,"str",(function(){return No})),n.d(a,"frob",(function(){return Fo})),n.d(a,"add",(function(){return Do})),n.d(a,"subtract",(function(){return Uo})),n.d(a,"multiplyScalar",(function(){return jo})),n.d(a,"multiplyScalarAndAdd",(function(){return Io})),n.d(a,"exactEquals",(function(){return Bo})),n.d(a,"equals",(function(){return zo})),n.d(a,"mul",(function(){return Vo})),n.d(a,"sub",(function(){return Wo}));var o={};n.r(o),n.d(o,"create",(function(){return Yo})),n.d(o,"clone",(function(){return Ho})),n.d(o,"length",(function(){return Ko})),n.d(o,"fromValues",(function(){return Xo})),n.d(o,"copy",(function(){return Go})),n.d(o,"set",(function(){return Zo})),n.d(o,"add",(function(){return qo})),n.d(o,"subtract",(function(){return $o})),n.d(o,"multiply",(function(){return Qo})),n.d(o,"divide",(function(){return Jo})),n.d(o,"ceil",(function(){return ei})),n.d(o,"floor",(function(){return ti})),n.d(o,"min",(function(){return ni})),n.d(o,"max",(function(){return ri})),n.d(o,"round",(function(){return ai})),n.d(o,"scale",(function(){return oi})),n.d(o,"scaleAndAdd",(function(){return ii})),n.d(o,"distance",(function(){return li})),n.d(o,"squaredDistance",(function(){return ui})),n.d(o,"squaredLength",(function(){return si})),n.d(o,"negate",(function(){return ci})),n.d(o,"inverse",(function(){return fi})),n.d(o,"normalize",(function(){return pi})),n.d(o,"dot",(function(){return di})),n.d(o,"cross",(function(){return hi})),n.d(o,"lerp",(function(){return mi})),n.d(o,"hermite",(function(){return vi})),n.d(o,"bezier",(function(){return yi})),n.d(o,"random",(function(){return bi})),n.d(o,"transformMat4",(function(){return gi})),n.d(o,"transformMat3",(function(){return Ei})),n.d(o,"transformQuat",(function(){return xi})),n.d(o,"rotateX",(function(){return wi})),n.d(o,"rotateY",(function(){return Si})),n.d(o,"rotateZ",(function(){return Ti})),n.d(o,"angle",(function(){return Mi})),n.d(o,"zero",(function(){return ki})),n.d(o,"str",(function(){return _i})),n.d(o,"exactEquals",(function(){return Ci})),n.d(o,"equals",(function(){return Ai})),n.d(o,"sub",(function(){return Oi})),n.d(o,"mul",(function(){return Ri})),n.d(o,"div",(function(){return Li})),n.d(o,"dist",(function(){return Ni})),n.d(o,"sqrDist",(function(){return Fi})),n.d(o,"len",(function(){return Di})),n.d(o,"sqrLen",(function(){return Ui})),n.d(o,"forEach",(function(){return ji}));var i={};n.r(i),n.d(i,"create",(function(){return Ii})),n.d(i,"clone",(function(){return Bi})),n.d(i,"fromValues",(function(){return zi})),n.d(i,"copy",(function(){return Vi})),n.d(i,"set",(function(){return Wi})),n.d(i,"add",(function(){return Yi})),n.d(i,"subtract",(function(){return Hi})),n.d(i,"multiply",(function(){return Ki})),n.d(i,"divide",(function(){return Xi})),n.d(i,"ceil",(function(){return Gi})),n.d(i,"floor",(function(){return Zi})),n.d(i,"min",(function(){return qi})),n.d(i,"max",(function(){return $i})),n.d(i,"round",(function(){return Qi})),n.d(i,"scale",(function(){return Ji})),n.d(i,"scaleAndAdd",(function(){return el})),n.d(i,"distance",(function(){return tl})),n.d(i,"squaredDistance",(function(){return nl})),n.d(i,"length",(function(){return rl})),n.d(i,"squaredLength",(function(){return al})),n.d(i,"negate",(function(){return ol})),n.d(i,"inverse",(function(){return il})),n.d(i,"normalize",(function(){return ll})),n.d(i,"dot",(function(){return ul})),n.d(i,"cross",(function(){return sl})),n.d(i,"lerp",(function(){return cl})),n.d(i,"random",(function(){return fl})),n.d(i,"transformMat4",(function(){return pl})),n.d(i,"transformQuat",(function(){return dl})),n.d(i,"zero",(function(){return hl})),n.d(i,"str",(function(){return ml})),n.d(i,"exactEquals",(function(){return vl})),n.d(i,"equals",(function(){return yl})),n.d(i,"sub",(function(){return bl})),n.d(i,"mul",(function(){return gl})),n.d(i,"div",(function(){return El})),n.d(i,"dist",(function(){return xl})),n.d(i,"sqrDist",(function(){return wl})),n.d(i,"len",(function(){return Sl})),n.d(i,"sqrLen",(function(){return Tl})),n.d(i,"forEach",(function(){return Ml}));var l={};n.r(l),n.d(l,"createVertexData",(function(){return kl}));var u={};n.r(u),n.d(u,"createVertexData",(function(){return _l}));var s={};n.r(s),n.d(s,"createVertexData",(function(){return Vl}));var c={};n.r(c),n.d(c,"createVertexData",(function(){return Wl}));var f={};n.r(f),n.d(f,"createVertexData",(function(){return Yl}));var p={};n.r(p),n.d(p,"createVertexData",(function(){return uu}));var d={};n.r(d),n.d(d,"createVertexData",(function(){return su}));var h={};n.r(h),n.d(h,"createVertexData",(function(){return cu}));var m={};n.r(m),n.d(m,"createVertexData",(function(){return Ru}));var v={};n.r(v),n.d(v,"createVertexData",(function(){return Lu}));var y={};n.r(y),n.d(y,"createVertexData",(function(){return Nu}));var b={};n.r(b),n.d(b,"createVertexData",(function(){return os}));var g={};n.r(g),n.d(g,"createVertexData",(function(){return is}));var E={};n.r(E),n.d(E,"createVertexData",(function(){return Is}));var x=n(0),w=n.n(x),S=n(7),T=n.n(S),M=(n(94),n(96),function(e){return w.a.createElement(w.a.Fragment,null,w.a.createElement("p",null,"Einsendeaufgaben"," "),w.a.createElement("p",null,w.a.createElement("button",{value:11,onClick:e.clickBtn},"EA 10")," "),w.a.createElement("p",null,w.a.createElement("button",{value:10,onClick:e.clickBtn},"EA 9")," "),w.a.createElement("p",null,w.a.createElement("button",{value:9,onClick:e.clickBtn},"EA 8")," "),w.a.createElement("p",null,w.a.createElement("button",{value:8,onClick:e.clickBtn},"EA 7")," "),w.a.createElement("p",null,w.a.createElement("button",{value:7,onClick:e.clickBtn},"EA 6")," "),w.a.createElement("p",null,w.a.createElement("button",{value:6,onClick:e.clickBtn},"EA 5")," "),w.a.createElement("p",null,w.a.createElement("button",{value:5,onClick:e.clickBtn},"EA 4-2")," "),w.a.createElement("p",null,w.a.createElement("button",{value:4,onClick:e.clickBtn},"EA 4-1")," "),w.a.createElement("p",null,w.a.createElement("button",{value:3,onClick:e.clickBtn},"EA 3")," "),w.a.createElement("p",null,w.a.createElement("button",{value:2,onClick:e.clickBtn},"EA 2")," "),w.a.createElement("p",null,w.a.createElement("button",{value:1,onClick:e.clickBtn},"EA 1")," "))}),k=n(8),_=n.n(k);n(100);function C(e){return(C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function A(e){return(A="function"==typeof Symbol&&"symbol"===C(Symbol.iterator)?function(e){return C(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":C(e)})(e)}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function O(e){return(O=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function R(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function L(e,t){return(L=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function N(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var F=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==A(t)&&"function"!=typeof t?R(e):t}(this,O(t).call(this,e)),N(R(n),"handleKeyDown",(function(e,t){console.log(e+"is down");var r=e+" "+n.state.eventKey;n.setState({eventKey:r}),"l"===e?(console.log("L pressed ! "),n.state.yOffset>=512&&n.setState({yOffset:n.state.yOffset-512})):"r"===e&&(console.log("R pressed ! "),n.setState({yOffset:n.state.yOffset+512}));var a='url("https://i.ibb.co/b7HgSFy/Graph-Viz-Tech-EA1.png") 0px '.concat(n.state.yOffset,"px");n[t].style.background=a.toString()})),n.state={yOffset:0,eventKey:" "},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&L(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this;return w.a.createElement("div",null,w.a.createElement("div",null,w.a.createElement("h2",null,"EA1")),w.a.createElement("img",{ref:function(t){return e.clippingrect=t},style:{position:"relative",width:"512px",height:"512px",background:'url("https://i.ibb.co/b7HgSFy/Graph-Viz-Tech-EA1.png") 0 0'},src:"https://i.ibb.co/Yc3S8ZW/placeholder1x1.png",alt:"circle",width:"1",height:"1"}),w.a.createElement("div",null,"Input Key detected: ",this.state.eventKey),w.a.createElement(_.a,{handleKeys:["l","r"],onKeyEvent:function(t,n){return e.handleKeyDown(t,"clippingrect")}}),w.a.createElement("div",{style:{position:"relative",height:"30px"}}),w.a.createElement("a",{href:"https://www.searchpng.com/2019/01/07/blue-circle-glow-png-free-download/"},"Circle Image Reference"))}}])&&P(n.prototype,r),a&&P(n,a),t}(x.Component);N(F,"propTypes",{}),N(F,"defaultProps",{});n(102);function D(e){return(D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function U(e){return(U="function"==typeof Symbol&&"symbol"===D(Symbol.iterator)?function(e){return D(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":D(e)})(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function I(e){return(I=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function B(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function z(e,t){return(z=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function V(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var W=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==U(t)&&"function"!=typeof t?B(e):t}(this,I(t).call(this,e)),V(B(n),"shaderProgram",(function(e,t,n){var r=e.createProgram(),a=function(t,n){var a=e.createShader("vertex"==t?e.VERTEX_SHADER:e.FRAGMENT_SHADER);if(e.shaderSource(a,n),e.compileShader(a),!e.getShaderParameter(a,e.COMPILE_STATUS))throw"Could not compile "+t+" shader:\n\n"+e.getShaderInfoLog(a);e.attachShader(r,a)};if(a("vertex",t),a("fragment",n),e.linkProgram(r),!e.getProgramParameter(r,e.LINK_STATUS))throw"Could not link the shader program!";return r})),V(B(n),"attributeSetFloats",(function(e,t,n,r,a){e.bindBuffer(e.ARRAY_BUFFER,e.createBuffer()),e.bufferData(e.ARRAY_BUFFER,new Float32Array(a),e.STATIC_DRAW);var o=e.getAttribLocation(t,n);e.enableVertexAttribArray(o),e.vertexAttribPointer(o,r,e.FLOAT,!1,0,0)})),V(B(n),"draw",(function(){try{var e=n.webGLCanvas.getContext("webgl");if(!e)throw"x"}catch(e){throw"Your web browser does not support WebGL!"}e.clearColor(.8,.8,.8,1),e.clear(e.COLOR_BUFFER_BIT);var t=n.shaderProgram(e,"attribute vec3 pos;void main() {\tgl_Position = vec4(pos, 2.0);}","void main() {\tgl_FragColor = vec4(0.5, 0.5, 1.0, 1.0);}");e.useProgram(t),n.attributeSetFloats(e,t,"pos",2,[.1,-.1,-.1,.1,.1,.1,-.1,-.1,-.1,-.1,-.2,-.2,-.2,-.1,-.2,-.2,-.2,.2,.2,.2,.2,-.2,.1,-.1,0,0,0,-.5,-.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,-.5,-.5,-.5,1,-1,-1,1,1,1,-1,-1,-1,-1,-1.2,-1.2,-1.2,-1.1,-1.2,-1.2,-1.2,1.2,1.2,1.2,1.2,-1.2,1.2,-1.2,1.1,-1.1,1.1,-1.1,0,0,-1.5,-1.5,-1.5,1.5,1.5,1.5,1.5,-1.5,-1.5,-1.5,-1.5,-1.5]),e.drawArrays(e.LINE_STRIP,0,41)})),V(B(n),"init",(function(){try{n.draw()}catch(e){alert("Error: "+e)}})),V(B(n),"handleKeyDown",(function(e){n.setState({eventKey:e}),"?"===e&&console.log("? pressed ! ")})),n.state={eventKey:" "},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&z(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.init()}},{key:"render",value:function(){var e=this;return w.a.createElement("div",null,w.a.createElement("div",null,w.a.createElement("h2",null,"EA2")),w.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"}),w.a.createElement("div",null,this.state.eventKey),w.a.createElement(_.a,{handleKeys:["?"],onKeyEvent:function(t,n){return e.handleKeyDown(t)}}),w.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&j(n.prototype,r),a&&j(n,a),t}(x.Component);V(W,"propTypes",{}),V(W,"defaultProps",{});var Y=n(2),H=n.n(Y),K=n(5),X=n.n(K),G=n(9),Z=n.n(G),q=n(4),$=n.n(q),Q=n(6),J=n.n(Q),ee=n(1),te=n.n(ee),ne=n(23),re=n.n(ne),ae=n(3),oe=n.n(ae),ie=function(e){var t,n,r=e.className,a=e.included,o=e.vertical,i=e.offset,l=e.length,u=e.style,s=e.reverse,c=o?(t={},oe()(t,s?"top":"bottom",i+"%"),oe()(t,s?"bottom":"top","auto"),oe()(t,"height",l+"%"),t):(n={},oe()(n,s?"right":"left",i+"%"),oe()(n,s?"left":"right","auto"),oe()(n,"width",l+"%"),n),f=H()({},u,c);return a?w.a.createElement("div",{className:r,style:f}):null},le=n(14),ue=n.n(le),se=n(38),ce=n.n(se),fe=n(72),pe=n.n(fe);function de(e,t,n,r){var a=T.a.unstable_batchedUpdates?function(e){T.a.unstable_batchedUpdates(n,e)}:n;return pe()(e,t,a,r)}var he=n(11),me=n.n(he),ve=function(e){var t=e.prefixCls,n=e.vertical,r=e.reverse,a=e.marks,o=e.dots,i=e.step,l=e.included,u=e.lowerBound,s=e.upperBound,c=e.max,f=e.min,p=e.dotStyle,d=e.activeDotStyle,h=c-f,m=function(e,t,n,r,a,o){re()(!n||r>0,"`Slider[step]` should be a positive number in order to make Slider[dots] work.");var i=Object.keys(t).map(parseFloat).sort((function(e,t){return e-t}));if(n&&r)for(var l=a;l<=o;l+=r)-1===i.indexOf(l)&&i.push(l);return i}(0,a,o,i,f,c).map((function(e){var a,o=Math.abs(e-f)/h*100+"%",i=!l&&e===s||l&&e<=s&&e>=u,c=n?H()({},p,oe()({},r?"top":"bottom",o)):H()({},p,oe()({},r?"right":"left",o));i&&(c=H()({},c,d));var m=me()((a={},oe()(a,t+"-dot",!0),oe()(a,t+"-dot-active",i),oe()(a,t+"-dot-reverse",r),a));return w.a.createElement("span",{className:m,style:c,key:e})}));return w.a.createElement("div",{className:t+"-step"},m)};ve.propTypes={prefixCls:te.a.string,activeDotStyle:te.a.object,dotStyle:te.a.object,min:te.a.number,max:te.a.number,upperBound:te.a.number,lowerBound:te.a.number,included:te.a.bool,dots:te.a.bool,step:te.a.number,marks:te.a.object,vertical:te.a.bool,reverse:te.a.bool};var ye=ve,be=function(e){var t=e.className,n=e.vertical,r=e.reverse,a=e.marks,o=e.included,i=e.upperBound,l=e.lowerBound,u=e.max,s=e.min,c=e.onClickLabel,f=Object.keys(a),p=u-s,d=f.map(parseFloat).sort((function(e,t){return e-t})).map((function(e){var u,f=a[e],d="object"==typeof f&&!w.a.isValidElement(f),h=d?f.label:f;if(!h&&0!==h)return null;var m=!o&&e===i||o&&e<=i&&e>=l,v=me()((u={},oe()(u,t+"-text",!0),oe()(u,t+"-text-active",m),u)),y=oe()({marginBottom:"-50%"},r?"top":"bottom",(e-s)/p*100+"%"),b=oe()({transform:"translateX(-50%)",msTransform:"translateX(-50%)"},r?"right":"left",r?(e-s/4)/p*100+"%":(e-s)/p*100+"%"),g=n?y:b,E=d?H()({},g,f.style):g;return w.a.createElement("span",{className:v,style:E,key:e,onMouseDown:function(t){return c(t,e)},onTouchStart:function(t){return c(t,e)}},h)}));return w.a.createElement("div",{className:t},d)};be.propTypes={className:te.a.string,vertical:te.a.bool,reverse:te.a.bool,marks:te.a.object,included:te.a.bool,upperBound:te.a.number,lowerBound:te.a.number,max:te.a.number,min:te.a.number,onClickLabel:te.a.func};var ge=be,Ee=function(e){function t(){var e,n,r,a;X()(this,t);for(var o=arguments.length,i=Array(o),l=0;l<o;l++)i[l]=arguments[l];return n=r=$()(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r.state={clickFocused:!1},r.setHandleRef=function(e){r.handle=e},r.handleMouseUp=function(){document.activeElement===r.handle&&r.setClickFocus(!0)},r.handleMouseDown=function(){r.focus()},r.handleBlur=function(){r.setClickFocus(!1)},r.handleKeyDown=function(){r.setClickFocus(!1)},a=n,$()(r,a)}return J()(t,e),Z()(t,[{key:"componentDidMount",value:function(){this.onMouseUpListener=de(document,"mouseup",this.handleMouseUp)}},{key:"componentWillUnmount",value:function(){this.onMouseUpListener&&this.onMouseUpListener.remove()}},{key:"setClickFocus",value:function(e){this.setState({clickFocused:e})}},{key:"clickFocus",value:function(){this.setClickFocus(!0),this.focus()}},{key:"focus",value:function(){this.handle.focus()}},{key:"blur",value:function(){this.handle.blur()}},{key:"render",value:function(){var e,t,n=this.props,r=n.prefixCls,a=n.vertical,o=n.reverse,i=n.offset,l=n.style,u=n.disabled,s=n.min,c=n.max,f=n.value,p=n.tabIndex,d=ue()(n,["prefixCls","vertical","reverse","offset","style","disabled","min","max","value","tabIndex"]),h=me()(this.props.className,oe()({},r+"-handle-click-focused",this.state.clickFocused)),m=a?(e={},oe()(e,o?"top":"bottom",i+"%"),oe()(e,o?"bottom":"top","auto"),oe()(e,"transform","translateY(+50%)"),e):(t={},oe()(t,o?"right":"left",i+"%"),oe()(t,o?"left":"right","auto"),oe()(t,"transform","translateX("+(o?"+":"-")+"50%)"),t),v=H()({},l,m),y=p||0;return(u||null===p)&&(y=null),w.a.createElement("div",H()({ref:this.setHandleRef,tabIndex:y},d,{className:h,style:v,onBlur:this.handleBlur,onKeyDown:this.handleKeyDown,onMouseDown:this.handleMouseDown,role:"slider","aria-valuemin":s,"aria-valuemax":c,"aria-valuenow":f,"aria-disabled":!!u}))}}]),t}(w.a.Component),xe=Ee;Ee.propTypes={prefixCls:te.a.string,className:te.a.string,vertical:te.a.bool,offset:te.a.number,style:te.a.object,disabled:te.a.bool,min:te.a.number,max:te.a.number,value:te.a.number,tabIndex:te.a.number,reverse:te.a.bool};var we=n(28),Se=n.n(we),Te={MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,QUESTION_MARK:63,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,SLASH:191,APOSTROPHE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,WIN_IME:229,isTextModifyingKeyEvent:function(e){var t=e.keyCode;if(e.altKey&&!e.ctrlKey||e.metaKey||t>=Te.F1&&t<=Te.F12)return!1;switch(t){case Te.ALT:case Te.CAPS_LOCK:case Te.CONTEXT_MENU:case Te.CTRL:case Te.DOWN:case Te.END:case Te.ESC:case Te.HOME:case Te.INSERT:case Te.LEFT:case Te.MAC_FF_META:case Te.META:case Te.NUMLOCK:case Te.NUM_CENTER:case Te.PAGE_DOWN:case Te.PAGE_UP:case Te.PAUSE:case Te.PRINT_SCREEN:case Te.RIGHT:case Te.SHIFT:case Te.UP:case Te.WIN_KEY:case Te.WIN_KEY_RIGHT:return!1;default:return!0}},isCharacterKey:function(e){if(e>=Te.ZERO&&e<=Te.NINE)return!0;if(e>=Te.NUM_ZERO&&e<=Te.NUM_MULTIPLY)return!0;if(e>=Te.A&&e<=Te.Z)return!0;if(-1!==window.navigator.userAgent.indexOf("WebKit")&&0===e)return!0;switch(e){case Te.SPACE:case Te.QUESTION_MARK:case Te.NUM_PLUS:case Te.NUM_MINUS:case Te.NUM_PERIOD:case Te.NUM_DIVISION:case Te.SEMICOLON:case Te.DASH:case Te.EQUALS:case Te.COMMA:case Te.PERIOD:case Te.SLASH:case Te.APOSTROPHE:case Te.SINGLE_QUOTE:case Te.OPEN_SQUARE_BRACKET:case Te.BACKSLASH:case Te.CLOSE_SQUARE_BRACKET:return!0;default:return!1}}},Me=Te;function ke(e,t){try{return Object.keys(t).some((function(n){return e.target===Object(S.findDOMNode)(t[n])}))}catch(e){return!1}}function _e(e,t){var n=t.min,r=t.max;return e<n||e>r}function Ce(e){return e.touches.length>1||"touchend"===e.type.toLowerCase()&&e.touches.length>0}function Ae(e,t){var n=t.marks,r=t.step,a=t.min,o=t.max,i=Object.keys(n).map(parseFloat);if(null!==r){var l=Math.floor((o-a)/r),u=Math.min((e-a)/r,l),s=Math.round(u)*r+a;i.push(s)}var c=i.map((function(t){return Math.abs(e-t)}));return i[c.indexOf(Math.min.apply(Math,Se()(c)))]}function Pe(e,t){return e?t.clientY:t.pageX}function Oe(e,t){return e?t.touches[0].clientY:t.touches[0].pageX}function Re(e,t){var n=t.getBoundingClientRect();return e?n.top+.5*n.height:window.pageXOffset+n.left+.5*n.width}function Le(e,t){var n=t.max,r=t.min;return e<=r?r:e>=n?n:e}function Ne(e,t){var n=t.step,r=isFinite(Ae(e,t))?Ae(e,t):0;return null===n?r:parseFloat(r.toFixed(function(e){var t=e.toString(),n=0;return t.indexOf(".")>=0&&(n=t.length-t.indexOf(".")-1),n}(n)))}function Fe(e){e.stopPropagation(),e.preventDefault()}function De(e,t,n){var r="increase";switch(e.keyCode){case Me.UP:r=t&&n?"decrease":"increase";break;case Me.RIGHT:r=!t&&n?"decrease":"increase";break;case Me.DOWN:r=t&&n?"increase":"decrease";break;case Me.LEFT:r=!t&&n?"increase":"decrease";break;case Me.END:return function(e,t){return t.max};case Me.HOME:return function(e,t){return t.min};case Me.PAGE_UP:return function(e,t){return e+2*t.step};case Me.PAGE_DOWN:return function(e,t){return e-2*t.step};default:return}return function(e,t){return function(e,t,n){var r={increase:function(e,t){return e+t},decrease:function(e,t){return e-t}},a=r[e](Object.keys(n.marks).indexOf(JSON.stringify(t)),1),o=Object.keys(n.marks)[a];return n.step?r[e](t,n.step):Object.keys(n.marks).length&&n.marks[o]?n.marks[o]:t}(r,e,t)}}function Ue(){}function je(e){var t,n;return n=t=function(e){function t(e){X()(this,t);var n=$()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.onMouseDown=function(e){if(0===e.button){var t=n.props.vertical,r=Pe(t,e);if(ke(e,n.handlesRefs)){var a=Re(t,e.target);n.dragOffset=r-a,r=a}else n.dragOffset=0;n.removeDocumentEvents(),n.onStart(r),n.addDocumentMouseEvents()}},n.onTouchStart=function(e){if(!Ce(e)){var t=n.props.vertical,r=Oe(t,e);if(ke(e,n.handlesRefs)){var a=Re(t,e.target);n.dragOffset=r-a,r=a}else n.dragOffset=0;n.onStart(r),n.addDocumentTouchEvents(),Fe(e)}},n.onFocus=function(e){var t=n.props,r=t.onFocus,a=t.vertical;if(ke(e,n.handlesRefs)){var o=Re(a,e.target);n.dragOffset=0,n.onStart(o),Fe(e),r&&r(e)}},n.onBlur=function(e){var t=n.props.onBlur;n.onEnd(),t&&t(e)},n.onMouseUp=function(){n.handlesRefs[n.prevMovedHandleIndex]&&n.handlesRefs[n.prevMovedHandleIndex].clickFocus()},n.onMouseMove=function(e){if(n.sliderRef){var t=Pe(n.props.vertical,e);n.onMove(e,t-n.dragOffset)}else n.onEnd()},n.onTouchMove=function(e){if(!Ce(e)&&n.sliderRef){var t=Oe(n.props.vertical,e);n.onMove(e,t-n.dragOffset)}else n.onEnd()},n.onKeyDown=function(e){n.sliderRef&&ke(e,n.handlesRefs)&&n.onKeyboard(e)},n.onClickMarkLabel=function(e,t){e.stopPropagation(),n.onChange({value:t}),n.setState({value:t},(function(){return n.onEnd(!0)}))},n.saveSlider=function(e){n.sliderRef=e};var r=e.step,a=e.max,o=e.min,i=!isFinite(a-o)||(a-o)%r==0;return re()(!r||Math.floor(r)!==r||i,"Slider[max] - Slider[min] (%s) should be a multiple of Slider[step] (%s)",a-o,r),n.handlesRefs={},n}return J()(t,e),Z()(t,[{key:"componentDidMount",value:function(){this.document=this.sliderRef&&this.sliderRef.ownerDocument;var e=this.props,t=e.autoFocus,n=e.disabled;t&&!n&&this.focus()}},{key:"componentWillUnmount",value:function(){ce()(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentWillUnmount",this)&&ce()(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"componentWillUnmount",this).call(this),this.removeDocumentEvents()}},{key:"getSliderStart",value:function(){var e=this.sliderRef,t=this.props,n=t.vertical,r=t.reverse,a=e.getBoundingClientRect();return n?r?a.bottom:a.top:window.pageXOffset+(r?a.right:a.left)}},{key:"getSliderLength",value:function(){var e=this.sliderRef;if(!e)return 0;var t=e.getBoundingClientRect();return this.props.vertical?t.height:t.width}},{key:"addDocumentTouchEvents",value:function(){this.onTouchMoveListener=de(this.document,"touchmove",this.onTouchMove),this.onTouchUpListener=de(this.document,"touchend",this.onEnd)}},{key:"addDocumentMouseEvents",value:function(){this.onMouseMoveListener=de(this.document,"mousemove",this.onMouseMove),this.onMouseUpListener=de(this.document,"mouseup",this.onEnd)}},{key:"removeDocumentEvents",value:function(){this.onTouchMoveListener&&this.onTouchMoveListener.remove(),this.onTouchUpListener&&this.onTouchUpListener.remove(),this.onMouseMoveListener&&this.onMouseMoveListener.remove(),this.onMouseUpListener&&this.onMouseUpListener.remove()}},{key:"focus",value:function(){this.props.disabled||this.handlesRefs[0].focus()}},{key:"blur",value:function(){var e=this;this.props.disabled||Object.keys(this.handlesRefs).forEach((function(t){e.handlesRefs[t]&&e.handlesRefs[t].blur&&e.handlesRefs[t].blur()}))}},{key:"calcValue",value:function(e){var t=this.props,n=t.vertical,r=t.min,a=t.max,o=Math.abs(Math.max(e,0)/this.getSliderLength());return n?(1-o)*(a-r)+r:o*(a-r)+r}},{key:"calcValueByPos",value:function(e){var t=(this.props.reverse?-1:1)*(e-this.getSliderStart());return this.trimAlignValue(this.calcValue(t))}},{key:"calcOffset",value:function(e){var t=this.props,n=t.min;return 100*((e-n)/(t.max-n))}},{key:"saveHandle",value:function(e,t){this.handlesRefs[e]=t}},{key:"render",value:function(){var e,n=this.props,r=n.prefixCls,a=n.className,o=n.marks,i=n.dots,l=n.step,u=n.included,s=n.disabled,c=n.vertical,f=n.reverse,p=n.min,d=n.max,h=n.children,m=n.maximumTrackStyle,v=n.style,y=n.railStyle,b=n.dotStyle,g=n.activeDotStyle,E=ce()(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"render",this).call(this),x=E.tracks,S=E.handles,T=me()(r,(e={},oe()(e,r+"-with-marks",Object.keys(o).length),oe()(e,r+"-disabled",s),oe()(e,r+"-vertical",c),oe()(e,a,a),e));return w.a.createElement("div",{ref:this.saveSlider,className:T,onTouchStart:s?Ue:this.onTouchStart,onMouseDown:s?Ue:this.onMouseDown,onMouseUp:s?Ue:this.onMouseUp,onKeyDown:s?Ue:this.onKeyDown,onFocus:s?Ue:this.onFocus,onBlur:s?Ue:this.onBlur,style:v},w.a.createElement("div",{className:r+"-rail",style:H()({},m,y)}),x,w.a.createElement(ye,{prefixCls:r,vertical:c,reverse:f,marks:o,dots:i,step:l,included:u,lowerBound:this.getLowerBound(),upperBound:this.getUpperBound(),max:d,min:p,dotStyle:b,activeDotStyle:g}),S,w.a.createElement(ge,{className:r+"-mark",onClickLabel:s?Ue:this.onClickMarkLabel,vertical:c,marks:o,included:u,lowerBound:this.getLowerBound(),upperBound:this.getUpperBound(),max:d,min:p,reverse:f}),h)}}]),t}(e),t.displayName="ComponentEnhancer("+e.displayName+")",t.propTypes=H()({},e.propTypes,{min:te.a.number,max:te.a.number,step:te.a.number,marks:te.a.object,included:te.a.bool,className:te.a.string,prefixCls:te.a.string,disabled:te.a.bool,children:te.a.any,onBeforeChange:te.a.func,onChange:te.a.func,onAfterChange:te.a.func,handle:te.a.func,dots:te.a.bool,vertical:te.a.bool,style:te.a.object,reverse:te.a.bool,minimumTrackStyle:te.a.object,maximumTrackStyle:te.a.object,handleStyle:te.a.oneOfType([te.a.object,te.a.arrayOf(te.a.object)]),trackStyle:te.a.oneOfType([te.a.object,te.a.arrayOf(te.a.object)]),railStyle:te.a.object,dotStyle:te.a.object,activeDotStyle:te.a.object,autoFocus:te.a.bool,onFocus:te.a.func,onBlur:te.a.func}),t.defaultProps=H()({},e.defaultProps,{prefixCls:"rc-slider",className:"",min:0,max:100,step:1,marks:{},handle:function(e){var t=e.index,n=ue()(e,["index"]);return delete n.dragging,null===n.value?null:w.a.createElement(xe,H()({},n,{key:t}))},onBeforeChange:Ue,onChange:Ue,onAfterChange:Ue,included:!0,disabled:!1,dots:!1,vertical:!1,reverse:!1,trackStyle:[{}],handleStyle:[{}],railStyle:{},dotStyle:{},activeDotStyle:{}}),n}var Ie=function(e){function t(e){X()(this,t);var n=$()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.onEnd=function(e){var t=n.state.dragging;n.removeDocumentEvents(),(t||e)&&n.props.onAfterChange(n.getValue()),n.setState({dragging:!1})};var r=void 0!==e.defaultValue?e.defaultValue:e.min,a=void 0!==e.value?e.value:r;return n.state={value:n.trimAlignValue(a),dragging:!1},re()(!("minimumTrackStyle"in e),"minimumTrackStyle will be deprecated, please use trackStyle instead."),re()(!("maximumTrackStyle"in e),"maximumTrackStyle will be deprecated, please use railStyle instead."),n}return J()(t,e),Z()(t,[{key:"componentDidUpdate",value:function(e,t){if("value"in this.props||"min"in this.props||"max"in this.props){var n=this.props,r=n.value,a=n.onChange,o=void 0!==r?r:t.value,i=this.trimAlignValue(o,this.props);i!==t.value&&(this.setState({value:i}),_e(o,this.props)&&a(i))}}},{key:"onChange",value:function(e){var t=this.props,n=!("value"in t),r=e.value>this.props.max?H()({},e,{value:this.props.max}):e;n&&this.setState(r);var a=r.value;t.onChange(a)}},{key:"onStart",value:function(e){this.setState({dragging:!0});var t=this.props,n=this.getValue();t.onBeforeChange(n);var r=this.calcValueByPos(e);this.startValue=r,this.startPosition=e,r!==n&&(this.prevMovedHandleIndex=0,this.onChange({value:r}))}},{key:"onMove",value:function(e,t){Fe(e);var n=this.state.value,r=this.calcValueByPos(t);r!==n&&this.onChange({value:r})}},{key:"onKeyboard",value:function(e){var t=this.props,n=t.reverse,r=De(e,t.vertical,n);if(r){Fe(e);var a=this.state.value,o=r(a,this.props),i=this.trimAlignValue(o);if(i===a)return;this.onChange({value:i}),this.props.onAfterChange(i),this.onEnd()}}},{key:"getValue",value:function(){return this.state.value}},{key:"getLowerBound",value:function(){return this.props.min}},{key:"getUpperBound",value:function(){return this.state.value}},{key:"trimAlignValue",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(null===e)return null;var n=H()({},this.props,t),r=Le(e,n);return Ne(r,n)}},{key:"render",value:function(){var e=this,t=this.props,n=t.prefixCls,r=t.vertical,a=t.included,o=t.disabled,i=t.minimumTrackStyle,l=t.trackStyle,u=t.handleStyle,s=t.tabIndex,c=t.min,f=t.max,p=t.reverse,d=t.handle,h=this.state,m=h.value,v=h.dragging,y=this.calcOffset(m),b=d({className:n+"-handle",prefixCls:n,vertical:r,offset:y,value:m,dragging:v,disabled:o,min:c,max:f,reverse:p,index:0,tabIndex:s,style:u[0]||u,ref:function(t){return e.saveHandle(0,t)}}),g=l[0]||l;return{tracks:w.a.createElement(ie,{className:n+"-track",vertical:r,included:a,offset:0,reverse:p,length:y,style:H()({},i,g)}),handles:b}}}]),t}(w.a.Component);Ie.propTypes={defaultValue:te.a.number,value:te.a.number,disabled:te.a.bool,autoFocus:te.a.bool,tabIndex:te.a.number,reverse:te.a.bool,min:te.a.number,max:te.a.number};var Be=je(Ie);function ze(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function Ve(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function We(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function Ye(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,r=null,a=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?r="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(r="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?a="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(a="UNSAFE_componentWillUpdate"),null!==n||null!==r||null!==a){var o=e.displayName||e.name,i="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+o+" uses "+i+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==r?"\n  "+r:"")+(null!==a?"\n  "+a:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=ze,t.componentWillReceiveProps=Ve),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=We;var l=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;l.call(this,e,t,r)}}return e}ze.__suppressDeprecationWarning=!0,Ve.__suppressDeprecationWarning=!0,We.__suppressDeprecationWarning=!0;var He=n(73),Ke=n.n(He),Xe=function(e){var t=e.value,n=e.handle,r=e.bounds,a=e.props,o=a.allowCross,i=a.pushable,l=Number(i),u=Le(t,a),s=u;return o||null==n||void 0===r||(n>0&&u<=r[n-1]+l&&(s=r[n-1]+l),n<r.length-1&&u>=r[n+1]-l&&(s=r[n+1]-l)),Ne(s,a)},Ge=function(e){function t(e){X()(this,t);var n=$()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));n.onEnd=function(e){var t=n.state.handle;n.removeDocumentEvents(),(null!==t||e)&&n.props.onAfterChange(n.getValue()),n.setState({handle:null})};var r=e.count,a=e.min,o=e.max,i=Array.apply(void 0,Se()(Array(r+1))).map((function(){return a})),l="defaultValue"in e?e.defaultValue:i,u=(void 0!==e.value?e.value:l).map((function(t,n){return Xe({value:t,handle:n,props:e})})),s=u[0]===o?0:u.length-1;return n.state={handle:null,recent:s,bounds:u},n}return J()(t,e),Z()(t,[{key:"componentDidUpdate",value:function(e,t){var n=this;if(("value"in this.props||"min"in this.props||"max"in this.props)&&(this.props.min!==e.min||this.props.max!==e.max||!Ke()(this.props.value,e.value))){var r=this.props,a=r.onChange,o=r.value||t.bounds;if(o.some((function(e){return _e(e,n.props)})))a(o.map((function(e){return Le(e,n.props)})))}}},{key:"onChange",value:function(e){var t=this.props;if(!("value"in t))this.setState(e);else{var n={};["handle","recent"].forEach((function(t){void 0!==e[t]&&(n[t]=e[t])})),Object.keys(n).length&&this.setState(n)}var r=H()({},this.state,e).bounds;t.onChange(r)}},{key:"onStart",value:function(e){var t=this.props,n=this.state,r=this.getValue();t.onBeforeChange(r);var a=this.calcValueByPos(e);this.startValue=a,this.startPosition=e;var o=this.getClosestBound(a);if(this.prevMovedHandleIndex=this.getBoundNeedMoving(a,o),this.setState({handle:this.prevMovedHandleIndex,recent:this.prevMovedHandleIndex}),a!==r[this.prevMovedHandleIndex]){var i=[].concat(Se()(n.bounds));i[this.prevMovedHandleIndex]=a,this.onChange({bounds:i})}}},{key:"onMove",value:function(e,t){Fe(e);var n=this.state,r=this.calcValueByPos(t);r!==n.bounds[n.handle]&&this.moveTo(r)}},{key:"onKeyboard",value:function(e){var t=this.props,n=t.reverse,r=De(e,t.vertical,n);if(r){Fe(e);var a=this.state,o=this.props,i=a.bounds,l=a.handle,u=i[null===l?a.recent:l],s=r(u,o),c=Xe({value:s,handle:l,bounds:a.bounds,props:o});if(c===u)return;this.moveTo(c,!0)}}},{key:"getValue",value:function(){return this.state.bounds}},{key:"getClosestBound",value:function(e){for(var t=this.state.bounds,n=0,r=1;r<t.length-1;++r)e>=t[r]&&(n=r);return Math.abs(t[n+1]-e)<Math.abs(t[n]-e)&&(n+=1),n}},{key:"getBoundNeedMoving",value:function(e,t){var n=this.state,r=n.bounds,a=n.recent,o=t,i=r[t+1]===r[t];return i&&r[a]===r[t]&&(o=a),i&&e!==r[t+1]&&(o=e<r[t+1]?t:t+1),o}},{key:"getLowerBound",value:function(){return this.state.bounds[0]}},{key:"getUpperBound",value:function(){var e=this.state.bounds;return e[e.length-1]}},{key:"getPoints",value:function(){var e=this.props,t=e.marks,n=e.step,r=e.min,a=e.max,o=this._getPointsCache;if(!o||o.marks!==t||o.step!==n){var i=H()({},t);if(null!==n)for(var l=r;l<=a;l+=n)i[l]=l;var u=Object.keys(i).map(parseFloat);u.sort((function(e,t){return e-t})),this._getPointsCache={marks:t,step:n,points:u}}return this._getPointsCache.points}},{key:"moveTo",value:function(e,t){var n=this,r=this.state,a=this.props,o=[].concat(Se()(r.bounds)),i=null===r.handle?r.recent:r.handle;o[i]=e;var l=i;!1!==a.pushable?this.pushSurroundingHandles(o,l):a.allowCross&&(o.sort((function(e,t){return e-t})),l=o.indexOf(e)),this.onChange({recent:l,handle:l,bounds:o}),t&&(this.props.onAfterChange(o),this.setState({},(function(){n.handlesRefs[l].focus()})),this.onEnd())}},{key:"pushSurroundingHandles",value:function(e,t){var n=e[t],r=this.props.pushable;r=Number(r);var a=0;if(e[t+1]-n<r&&(a=1),n-e[t-1]<r&&(a=-1),0!==a){var o=t+a,i=a*(e[o]-n);this.pushHandle(e,o,a,r-i)||(e[t]=e[o]-a*r)}}},{key:"pushHandle",value:function(e,t,n,r){for(var a=e[t],o=e[t];n*(o-a)<r;){if(!this.pushHandleOnePoint(e,t,n))return e[t]=a,!1;o=e[t]}return!0}},{key:"pushHandleOnePoint",value:function(e,t,n){var r=this.getPoints(),a=r.indexOf(e[t])+n;if(a>=r.length||a<0)return!1;var o=t+n,i=r[a],l=this.props.pushable,u=n*(e[o]-i);return!!this.pushHandle(e,o,n,l-u)&&(e[t]=i,!0)}},{key:"trimAlignValue",value:function(e){var t=this.state,n=t.handle,r=t.bounds;return Xe({value:e,handle:n,bounds:r,props:this.props})}},{key:"render",value:function(){var e=this,t=this.state,n=t.handle,r=t.bounds,a=this.props,o=a.prefixCls,i=a.vertical,l=a.included,u=a.disabled,s=a.min,c=a.max,f=a.reverse,p=a.handle,d=a.trackStyle,h=a.handleStyle,m=a.tabIndex,v=r.map((function(t){return e.calcOffset(t)})),y=o+"-handle",b=r.map((function(t,r){var a,l=m[r]||0;return(u||null===m[r])&&(l=null),p({className:me()((a={},oe()(a,y,!0),oe()(a,y+"-"+(r+1),!0),a)),prefixCls:o,vertical:i,offset:v[r],value:t,dragging:n===r,index:r,tabIndex:l,min:s,max:c,reverse:f,disabled:u,style:h[r],ref:function(t){return e.saveHandle(r,t)}})}));return{tracks:r.slice(0,-1).map((function(e,t){var n,r=t+1,a=me()((n={},oe()(n,o+"-track",!0),oe()(n,o+"-track-"+r,!0),n));return w.a.createElement(ie,{className:a,vertical:i,reverse:f,included:l,offset:v[r-1],length:v[r]-v[r-1],style:d[t],key:r})})),handles:b}}}],[{key:"getDerivedStateFromProps",value:function(e,t){if("value"in e||"min"in e||"max"in e){var n=(e.value||t.bounds).map((function(n,r){return Xe({value:n,handle:r,bounds:t.bounds,props:e})}));return n.length===t.bounds.length&&n.every((function(e,n){return e===t.bounds[n]}))?null:H()({},t,{bounds:n})}return null}}]),t}(w.a.Component);Ge.displayName="Range",Ge.propTypes={autoFocus:te.a.bool,defaultValue:te.a.arrayOf(te.a.number),value:te.a.arrayOf(te.a.number),count:te.a.number,pushable:te.a.oneOfType([te.a.bool,te.a.number]),allowCross:te.a.bool,disabled:te.a.bool,reverse:te.a.bool,tabIndex:te.a.arrayOf(te.a.number),min:te.a.number,max:te.a.number},Ge.defaultProps={count:1,allowCross:!0,pushable:!1,tabIndex:[]},Ye(Ge);var Ze=je(Ge);function qe(e,t){for(var n=t;n;){if(n===e)return!0;n=n.parentNode}return!1}function $e(e){return($e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Qe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Je(e,t){return!t||"object"!==$e(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function et(e){return(et=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function tt(e,t){return(tt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var nt=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return(n=Je(this,(e=et(t)).call.apply(e,[this].concat(a)))).removeContainer=function(){n.container&&(T.a.unmountComponentAtNode(n.container),n.container.parentNode.removeChild(n.container),n.container=null)},n.renderComponent=function(e,t){var r=n.props,a=r.visible,o=r.getComponent,i=r.forceRender,l=r.getContainer,u=r.parent;(a||u._component||i)&&(n.container||(n.container=l()),T.a.unstable_renderSubtreeIntoContainer(u,o(e),n.container,(function(){t&&t.call(this)})))},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&tt(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.props.autoMount&&this.renderComponent()}},{key:"componentDidUpdate",value:function(){this.props.autoMount&&this.renderComponent()}},{key:"componentWillUnmount",value:function(){this.props.autoDestroy&&this.removeContainer()}},{key:"render",value:function(){return this.props.children({renderComponent:this.renderComponent,removeContainer:this.removeContainer})}}])&&Qe(n.prototype,r),a&&Qe(n,a),t}(w.a.Component);function rt(e){return(rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function at(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ot(e,t){return!t||"object"!==rt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function it(e){return(it=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function lt(e,t){return(lt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}nt.propTypes={autoMount:te.a.bool,autoDestroy:te.a.bool,visible:te.a.bool,forceRender:te.a.bool,parent:te.a.any,getComponent:te.a.func.isRequired,getContainer:te.a.func.isRequired,children:te.a.func.isRequired},nt.defaultProps={autoMount:!0,autoDestroy:!0,forceRender:!1};var ut,st=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ot(this,it(t).apply(this,arguments))}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&lt(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.createContainer()}},{key:"componentDidUpdate",value:function(e){var t=this.props.didUpdate;t&&t(e)}},{key:"componentWillUnmount",value:function(){this.removeContainer()}},{key:"createContainer",value:function(){this._container=this.props.getContainer(),this.forceUpdate()}},{key:"removeContainer",value:function(){this._container&&this._container.parentNode.removeChild(this._container)}},{key:"render",value:function(){return this._container?T.a.createPortal(this.props.children,this._container):null}}])&&at(n.prototype,r),a&&at(n,a),t}(w.a.Component);function ct(e,t,n){return n?e[0]===t[0]:e[0]===t[0]&&e[1]===t[1]}function ft(e,t){this[e]=t}function pt(e){return(pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function dt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ht(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}st.propTypes={getContainer:te.a.func.isRequired,children:te.a.node.isRequired,didUpdate:te.a.func};var mt={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-",O:"-o-"};function vt(){if(void 0!==ut)return ut;ut="";var e=document.createElement("p").style;for(var t in mt)t+"Transform"in e&&(ut=t);return ut}function yt(){return vt()?"".concat(vt(),"TransitionProperty"):"transitionProperty"}function bt(){return vt()?"".concat(vt(),"Transform"):"transform"}function gt(e,t){var n=yt();n&&(e.style[n]=t,"transitionProperty"!==n&&(e.style.transitionProperty=t))}function Et(e,t){var n=bt();n&&(e.style[n]=t,"transform"!==n&&(e.style.transform=t))}var xt,wt=/matrix\((.*)\)/,St=/matrix3d\((.*)\)/;function Tt(e){var t=e.style.display;e.style.display="none",e.offsetHeight,e.style.display=t}function Mt(e,t,n){var r=n;if("object"!==pt(t))return void 0!==r?("number"==typeof r&&(r="".concat(r,"px")),void(e.style[t]=r)):xt(e,t);for(var a in t)t.hasOwnProperty(a)&&Mt(e,a,t[a])}function kt(e,t){var n=e["page".concat(t?"Y":"X","Offset")],r="scroll".concat(t?"Top":"Left");if("number"!=typeof n){var a=e.document;"number"!=typeof(n=a.documentElement[r])&&(n=a.body[r])}return n}function _t(e){return kt(e)}function Ct(e){return kt(e,!0)}function At(e){var t=function(e){var t,n,r,a=e.ownerDocument,o=a.body,i=a&&a.documentElement;return n=(t=e.getBoundingClientRect()).left,r=t.top,{left:n-=i.clientLeft||o.clientLeft||0,top:r-=i.clientTop||o.clientTop||0}}(e),n=e.ownerDocument,r=n.defaultView||n.parentWindow;return t.left+=_t(r),t.top+=Ct(r),t}function Pt(e){return null!=e&&e==e.window}function Ot(e){return Pt(e)?e.document:9===e.nodeType?e:e.ownerDocument}var Rt=new RegExp("^(".concat(/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,")(?!px)[a-z%]+$"),"i"),Lt=/^(top|right|bottom|left)$/,Nt="currentStyle",Ft="runtimeStyle",Dt="left",Ut="px";function jt(e,t){return"left"===e?t.useCssRight?"right":e:t.useCssBottom?"bottom":e}function It(e){return"left"===e?"right":"right"===e?"left":"top"===e?"bottom":"bottom"===e?"top":void 0}function Bt(e,t,n){"static"===Mt(e,"position")&&(e.style.position="relative");var r=-999,a=-999,o=jt("left",n),i=jt("top",n),l=It(o),u=It(i);"left"!==o&&(r=999),"top"!==i&&(a=999);var s,c="",f=At(e);("left"in t||"top"in t)&&(c=(s=e).style.transitionProperty||s.style[yt()]||"",gt(e,"none")),"left"in t&&(e.style[l]="",e.style[o]="".concat(r,"px")),"top"in t&&(e.style[u]="",e.style[i]="".concat(a,"px")),Tt(e);var p=At(e),d={};for(var h in t)if(t.hasOwnProperty(h)){var m=jt(h,n),v="left"===h?r:a,y=f[h]-p[h];d[m]=m===h?v+y:v-y}Mt(e,d),Tt(e),("left"in t||"top"in t)&&gt(e,c);var b={};for(var g in t)if(t.hasOwnProperty(g)){var E=jt(g,n),x=t[g]-f[g];b[E]=g===E?d[E]+x:d[E]-x}Mt(e,b)}function zt(e,t){var n=At(e),r=function(e){var t=window.getComputedStyle(e,null),n=t.getPropertyValue("transform")||t.getPropertyValue(bt());if(n&&"none"!==n){var r=n.replace(/[^0-9\-.,]/g,"").split(",");return{x:parseFloat(r[12]||r[4],0),y:parseFloat(r[13]||r[5],0)}}return{x:0,y:0}}(e),a={x:r.x,y:r.y};"left"in t&&(a.x=r.x+t.left-n.left),"top"in t&&(a.y=r.y+t.top-n.top),function(e,t){var n=window.getComputedStyle(e,null),r=n.getPropertyValue("transform")||n.getPropertyValue(bt());if(r&&"none"!==r){var a,o=r.match(wt);if(o)(a=(o=o[1]).split(",").map((function(e){return parseFloat(e,10)})))[4]=t.x,a[5]=t.y,Et(e,"matrix(".concat(a.join(","),")"));else(a=r.match(St)[1].split(",").map((function(e){return parseFloat(e,10)})))[12]=t.x,a[13]=t.y,Et(e,"matrix3d(".concat(a.join(","),")"))}else Et(e,"translateX(".concat(t.x,"px) translateY(").concat(t.y,"px) translateZ(0)"))}(e,a)}function Vt(e,t){for(var n=0;n<e.length;n++)t(e[n])}function Wt(e){return"border-box"===xt(e,"boxSizing")}"undefined"!=typeof window&&(xt=window.getComputedStyle?function(e,t,n){var r=n,a="",o=Ot(e);return(r=r||o.defaultView.getComputedStyle(e,null))&&(a=r.getPropertyValue(t)||r[t]),a}:function(e,t){var n=e[Nt]&&e[Nt][t];if(Rt.test(n)&&!Lt.test(t)){var r=e.style,a=r[Dt],o=e[Ft][Dt];e[Ft][Dt]=e[Nt][Dt],r[Dt]="fontSize"===t?"1em":n||0,n=r.pixelLeft+Ut,r[Dt]=a,e[Ft][Dt]=o}return""===n?"auto":n});var Yt=["margin","border","padding"],Ht=-1,Kt=2,Xt=1;function Gt(e,t,n){var r,a,o,i=0;for(a=0;a<t.length;a++)if(r=t[a])for(o=0;o<n.length;o++){var l=void 0;l="border"===r?"".concat(r).concat(n[o],"Width"):r+n[o],i+=parseFloat(xt(e,l))||0}return i}var Zt={getParent:function(e){var t=e;do{t=11===t.nodeType&&t.host?t.host:t.parentNode}while(t&&1!==t.nodeType&&9!==t.nodeType);return t}};function qt(e,t,n){var r=n;if(Pt(e))return"width"===t?Zt.viewportWidth(e):Zt.viewportHeight(e);if(9===e.nodeType)return"width"===t?Zt.docWidth(e):Zt.docHeight(e);var a="width"===t?["Left","Right"]:["Top","Bottom"],o="width"===t?e.getBoundingClientRect().width:e.getBoundingClientRect().height,i=(xt(e),Wt(e)),l=0;(null==o||o<=0)&&(o=void 0,(null==(l=xt(e,t))||Number(l)<0)&&(l=e.style[t]||0),l=parseFloat(l)||0),void 0===r&&(r=i?Xt:Ht);var u=void 0!==o||i,s=o||l;return r===Ht?u?s-Gt(e,["border","padding"],a):l:u?r===Xt?s:s+(r===Kt?-Gt(e,["border"],a):Gt(e,["margin"],a)):l+Gt(e,Yt.slice(r),a)}Vt(["Width","Height"],(function(e){Zt["doc".concat(e)]=function(t){var n=t.document;return Math.max(n.documentElement["scroll".concat(e)],n.body["scroll".concat(e)],Zt["viewport".concat(e)](n))},Zt["viewport".concat(e)]=function(t){var n="client".concat(e),r=t.document,a=r.body,o=r.documentElement[n];return"CSS1Compat"===r.compatMode&&o||a&&a[n]||o}}));var $t={position:"absolute",visibility:"hidden",display:"block"};function Qt(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r,a=t[0];return 0!==a.offsetWidth?r=qt.apply(void 0,t):function(e,t,n){var r,a={},o=e.style;for(r in t)t.hasOwnProperty(r)&&(a[r]=o[r],o[r]=t[r]);for(r in n.call(e),t)t.hasOwnProperty(r)&&(o[r]=a[r])}(a,$t,(function(){r=qt.apply(void 0,t)})),r}function Jt(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}Vt(["width","height"],(function(e){var t=e.charAt(0).toUpperCase()+e.slice(1);Zt["outer".concat(t)]=function(t,n){return t&&Qt(t,e,n?0:Xt)};var n="width"===e?["Left","Right"]:["Top","Bottom"];Zt[e]=function(t,r){var a=r;if(void 0===a)return t&&Qt(t,e,Ht);if(t){xt(t);return Wt(t)&&(a+=Gt(t,["padding","border"],n)),Mt(t,e,a)}}}));var en={getWindow:function(e){if(e&&e.document&&e.setTimeout)return e;var t=e.ownerDocument||e;return t.defaultView||t.parentWindow},getDocument:Ot,offset:function(e,t,n){if(void 0===t)return At(e);!function(e,t,n){if(n.ignoreShake){var r=At(e),a=r.left.toFixed(0),o=r.top.toFixed(0),i=t.left.toFixed(0),l=t.top.toFixed(0);if(a===i&&o===l)return}n.useCssRight||n.useCssBottom?Bt(e,t,n):n.useCssTransform&&bt()in document.body.style?zt(e,t):Bt(e,t,n)}(e,t,n||{})},isWindow:Pt,each:Vt,css:Mt,clone:function(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);if(e.overflow)for(t in e)e.hasOwnProperty(t)&&(n.overflow[t]=e.overflow[t]);return n},mix:Jt,getWindowScrollLeft:function(e){return _t(e)},getWindowScrollTop:function(e){return Ct(e)},merge:function(){for(var e={},t=0;t<arguments.length;t++)en.mix(e,t<0||arguments.length<=t?void 0:arguments[t]);return e},viewportWidth:0,viewportHeight:0};Jt(en,Zt);var tn=en.getParent;function nn(e){if(en.isWindow(e)||9===e.nodeType)return null;var t,n=en.getDocument(e).body,r=en.css(e,"position");if(!("fixed"===r||"absolute"===r))return"html"===e.nodeName.toLowerCase()?null:tn(e);for(t=tn(e);t&&t!==n;t=tn(t))if("static"!==(r=en.css(t,"position")))return t;return null}var rn=en.getParent;function an(e){for(var t={left:0,right:1/0,top:0,bottom:1/0},n=nn(e),r=en.getDocument(e),a=r.defaultView||r.parentWindow,o=r.body,i=r.documentElement;n;){if(-1!==navigator.userAgent.indexOf("MSIE")&&0===n.clientWidth||n===o||n===i||"visible"===en.css(n,"overflow")){if(n===o||n===i)break}else{var l=en.offset(n);l.left+=n.clientLeft,l.top+=n.clientTop,t.top=Math.max(t.top,l.top),t.right=Math.min(t.right,l.left+n.clientWidth),t.bottom=Math.min(t.bottom,l.top+n.clientHeight),t.left=Math.max(t.left,l.left)}n=nn(n)}var u=null;en.isWindow(e)||9===e.nodeType||(u=e.style.position,"absolute"===en.css(e,"position")&&(e.style.position="fixed"));var s=en.getWindowScrollLeft(a),c=en.getWindowScrollTop(a),f=en.viewportWidth(a),p=en.viewportHeight(a),d=i.scrollWidth,h=i.scrollHeight,m=window.getComputedStyle(o);if("hidden"===m.overflowX&&(d=a.innerWidth),"hidden"===m.overflowY&&(h=a.innerHeight),e.style&&(e.style.position=u),function(e){if(en.isWindow(e)||9===e.nodeType)return!1;var t=en.getDocument(e).body,n=null;for(n=rn(e);n&&n!==t;n=rn(n)){if("fixed"===en.css(n,"position"))return!0}return!1}(e))t.left=Math.max(t.left,s),t.top=Math.max(t.top,c),t.right=Math.min(t.right,s+f),t.bottom=Math.min(t.bottom,c+p);else{var v=Math.max(d,s+f);t.right=Math.min(t.right,v);var y=Math.max(h,c+p);t.bottom=Math.min(t.bottom,y)}return t.top>=0&&t.left>=0&&t.bottom>t.top&&t.right>t.left?t:null}function on(e){var t,n,r;if(en.isWindow(e)||9===e.nodeType){var a=en.getWindow(e);t={left:en.getWindowScrollLeft(a),top:en.getWindowScrollTop(a)},n=en.viewportWidth(a),r=en.viewportHeight(a)}else t=en.offset(e),n=en.outerWidth(e),r=en.outerHeight(e);return t.width=n,t.height=r,t}function ln(e,t){var n=t.charAt(0),r=t.charAt(1),a=e.width,o=e.height,i=e.left,l=e.top;return"c"===n?l+=o/2:"b"===n&&(l+=o),"c"===r?i+=a/2:"r"===r&&(i+=a),{left:i,top:l}}function un(e,t,n,r,a){var o=ln(t,n[1]),i=ln(e,n[0]),l=[i.left-o.left,i.top-o.top];return{left:Math.round(e.left-l[0]+r[0]-a[0]),top:Math.round(e.top-l[1]+r[1]-a[1])}}function sn(e,t,n){return e.left<n.left||e.left+t.width>n.right}function cn(e,t,n){return e.top<n.top||e.top+t.height>n.bottom}function fn(e,t,n){var r=[];return en.each(e,(function(e){r.push(e.replace(t,(function(e){return n[e]})))})),r}function pn(e,t){return e[t]=-e[t],e}function dn(e,t){return(/%$/.test(e)?parseInt(e.substring(0,e.length-1),10)/100*t:parseInt(e,10))||0}function hn(e,t){e[0]=dn(e[0],t.width),e[1]=dn(e[1],t.height)}function mn(e,t,n,r){var a=n.points,o=n.offset||[0,0],i=n.targetOffset||[0,0],l=n.overflow,u=n.source||e;o=[].concat(o),i=[].concat(i),l=l||{};var s={},c=0,f=an(u),p=on(u);hn(o,p),hn(i,t);var d=un(p,t,a,o,i),h=en.merge(p,d);if(f&&(l.adjustX||l.adjustY)&&r){if(l.adjustX&&sn(d,p,f)){var m=fn(a,/[lr]/gi,{l:"r",r:"l"}),v=pn(o,0),y=pn(i,0);(function(e,t,n){return e.left>n.right||e.left+t.width<n.left})(un(p,t,m,v,y),p,f)||(c=1,a=m,o=v,i=y)}if(l.adjustY&&cn(d,p,f)){var b=fn(a,/[tb]/gi,{t:"b",b:"t"}),g=pn(o,1),E=pn(i,1);(function(e,t,n){return e.top>n.bottom||e.top+t.height<n.top})(un(p,t,b,g,E),p,f)||(c=1,a=b,o=g,i=E)}c&&(d=un(p,t,a,o,i),en.mix(h,d));var x=sn(d,p,f),w=cn(d,p,f);(x||w)&&(a=n.points,o=n.offset||[0,0],i=n.targetOffset||[0,0]),s.adjustX=l.adjustX&&x,s.adjustY=l.adjustY&&w,(s.adjustX||s.adjustY)&&(h=function(e,t,n,r){var a=en.clone(e),o={width:t.width,height:t.height};return r.adjustX&&a.left<n.left&&(a.left=n.left),r.resizeWidth&&a.left>=n.left&&a.left+o.width>n.right&&(o.width-=a.left+o.width-n.right),r.adjustX&&a.left+o.width>n.right&&(a.left=Math.max(n.right-o.width,n.left)),r.adjustY&&a.top<n.top&&(a.top=n.top),r.resizeHeight&&a.top>=n.top&&a.top+o.height>n.bottom&&(o.height-=a.top+o.height-n.bottom),r.adjustY&&a.top+o.height>n.bottom&&(a.top=Math.max(n.bottom-o.height,n.top)),en.mix(a,o)}(d,p,f,s))}return h.width!==p.width&&en.css(u,"width",en.width(u)+h.width-p.width),h.height!==p.height&&en.css(u,"height",en.height(u)+h.height-p.height),en.offset(u,{left:h.left,top:h.top},{useCssRight:n.useCssRight,useCssBottom:n.useCssBottom,useCssTransform:n.useCssTransform,ignoreShake:n.ignoreShake}),{points:a,offset:o,targetOffset:i,overflow:s}}function vn(e,t,n){var r=n.target||t;return mn(e,on(r),n,!function(e){var t=an(e),n=on(e);return!t||n.left+n.width<=t.left||n.top+n.height<=t.top||n.left>=t.right||n.top>=t.bottom}(r))}function yn(e,t,n){var r,a,o=en.getDocument(e),i=o.defaultView||o.parentWindow,l=en.getWindowScrollLeft(i),u=en.getWindowScrollTop(i),s=en.viewportWidth(i),c=en.viewportHeight(i);r="pageX"in t?t.pageX:l+t.clientX,a="pageY"in t?t.pageY:u+t.clientY;var f=r>=0&&r<=l+s&&a>=0&&a<=u+c;return mn(e,{left:r,top:a,width:0,height:0},function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ht(n,!0).forEach((function(t){dt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ht(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},n,{points:[n.points[0],"cc"]}),f)}vn.__getOffsetParent=nn,vn.__getVisibleRectForElement=an;function bn(e){return e&&"object"==typeof e&&e.window===e}function gn(e,t){var n=Math.floor(e),r=Math.floor(t);return Math.abs(n-r)<=1}function En(e){return"function"==typeof e&&e?e():null}function xn(e){return"object"==typeof e&&e?e:null}var wn=function(e){function t(){var e,n,r,a;X()(this,t);for(var o=arguments.length,i=Array(o),l=0;l<o;l++)i[l]=arguments[l];return n=r=$()(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r.forceAlign=function(){var e=r.props,t=e.disabled,n=e.target,a=e.align,o=e.onAlign;if(!t&&n){var i=T.a.findDOMNode(r),l=void 0,u=En(n),s=xn(n),c=document.activeElement;u?l=vn(i,u,a):s&&(l=yn(i,s,a)),function(e,t){e!==document.activeElement&&qe(t,e)&&e.focus()}(c,i),o&&o(i,l)}},a=n,$()(r,a)}return J()(t,e),Z()(t,[{key:"componentDidMount",value:function(){var e=this.props;this.forceAlign(),!e.disabled&&e.monitorWindowResize&&this.startMonitorWindowResize()}},{key:"componentDidUpdate",value:function(e){var t,n,r=!1,a=this.props;if(!a.disabled){var o=T.a.findDOMNode(this),i=o?o.getBoundingClientRect():null;if(e.disabled)r=!0;else{var l=En(e.target),u=En(a.target),s=xn(e.target),c=xn(a.target);bn(l)&&bn(u)?r=!1:(l!==u||l&&!u&&c||s&&c&&u||c&&!((t=s)===(n=c)||t&&n&&("pageX"in n&&"pageY"in n?t.pageX===n.pageX&&t.pageY===n.pageY:"clientX"in n&&"clientY"in n&&t.clientX===n.clientX&&t.clientY===n.clientY)))&&(r=!0);var f=this.sourceRect||{};r||!o||gn(f.width,i.width)&&gn(f.height,i.height)||(r=!0)}this.sourceRect=i}r&&this.forceAlign(),a.monitorWindowResize&&!a.disabled?this.startMonitorWindowResize():this.stopMonitorWindowResize()}},{key:"componentWillUnmount",value:function(){this.stopMonitorWindowResize()}},{key:"startMonitorWindowResize",value:function(){this.resizeHandler||(this.bufferMonitor=function(e,t){var n=void 0;function r(){n&&(clearTimeout(n),n=null)}function a(){r(),n=setTimeout(e,t)}return a.clear=r,a}(this.forceAlign,this.props.monitorBufferTime),this.resizeHandler=de(window,"resize",this.bufferMonitor))}},{key:"stopMonitorWindowResize",value:function(){this.resizeHandler&&(this.bufferMonitor.clear(),this.resizeHandler.remove(),this.resizeHandler=null)}},{key:"render",value:function(){var e=this,t=this.props,n=t.childrenProps,r=t.children,a=w.a.Children.only(r);if(n){var o={};return Object.keys(n).forEach((function(t){o[t]=e.props[n[t]]})),w.a.cloneElement(a,o)}return a}}]),t}(x.Component);wn.propTypes={childrenProps:te.a.object,align:te.a.object.isRequired,target:te.a.oneOfType([te.a.func,te.a.shape({clientX:te.a.number,clientY:te.a.number,pageX:te.a.number,pageY:te.a.number})]),onAlign:te.a.func,monitorBufferTime:te.a.number,monitorWindowResize:te.a.bool,disabled:te.a.bool,children:te.a.any},wn.defaultProps={target:function(){return window},monitorBufferTime:50,monitorWindowResize:!1,disabled:!1};var Sn=wn,Tn=function(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");return"function"!=typeof t.componentWillReceiveProps?e:w.a.Profiler?(t.UNSAFE_componentWillReceiveProps=t.componentWillReceiveProps,delete t.componentWillReceiveProps,e):e};function Mn(e){var t=[];return w.a.Children.forEach(e,(function(e){t.push(e)})),t}function kn(e,t){var n=null;return e&&e.forEach((function(e){n||e&&e.key===t&&(n=e)})),n}function _n(e,t,n){var r=null;return e&&e.forEach((function(e){if(e&&e.key===t&&e.props[n]){if(r)throw new Error("two child with same key for <rc-animate> children");r=e}})),r}var Cn=n(36),An=n.n(Cn),Pn={transitionstart:{transition:"transitionstart",WebkitTransition:"webkitTransitionStart",MozTransition:"mozTransitionStart",OTransition:"oTransitionStart",msTransition:"MSTransitionStart"},animationstart:{animation:"animationstart",WebkitAnimation:"webkitAnimationStart",MozAnimation:"mozAnimationStart",OAnimation:"oAnimationStart",msAnimation:"MSAnimationStart"}},On={transitionend:{transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"mozTransitionEnd",OTransition:"oTransitionEnd",msTransition:"MSTransitionEnd"},animationend:{animation:"animationend",WebkitAnimation:"webkitAnimationEnd",MozAnimation:"mozAnimationEnd",OAnimation:"oAnimationEnd",msAnimation:"MSAnimationEnd"}},Rn=[],Ln=[];function Nn(e,t,n){e.addEventListener(t,n,!1)}function Fn(e,t,n){e.removeEventListener(t,n,!1)}"undefined"!=typeof window&&"undefined"!=typeof document&&function(){var e=document.createElement("div").style;function t(t,n){for(var r in t)if(t.hasOwnProperty(r)){var a=t[r];for(var o in a)if(o in e){n.push(a[o]);break}}}"AnimationEvent"in window||(delete Pn.animationstart.animation,delete On.animationend.animation),"TransitionEvent"in window||(delete Pn.transitionstart.transition,delete On.transitionend.transition),t(Pn,Rn),t(On,Ln)}();var Dn={startEvents:Rn,addStartEventListener:function(e,t){0!==Rn.length?Rn.forEach((function(n){Nn(e,n,t)})):window.setTimeout(t,0)},removeStartEventListener:function(e,t){0!==Rn.length&&Rn.forEach((function(n){Fn(e,n,t)}))},endEvents:Ln,addEndEventListener:function(e,t){0!==Ln.length?Ln.forEach((function(n){Nn(e,n,t)})):window.setTimeout(t,0)},removeEndEventListener:function(e,t){0!==Ln.length&&Ln.forEach((function(n){Fn(e,n,t)}))}},Un=n(74),jn=n.n(Un),In=0!==Dn.endEvents.length,Bn=["Webkit","Moz","O","ms"],zn=["-webkit-","-moz-","-o-","ms-",""];function Vn(e,t){for(var n=window.getComputedStyle(e,null),r="",a=0;a<zn.length&&!(r=n.getPropertyValue(zn[a]+t));a++);return r}function Wn(e){if(In){var t=parseFloat(Vn(e,"transition-delay"))||0,n=parseFloat(Vn(e,"transition-duration"))||0,r=parseFloat(Vn(e,"animation-delay"))||0,a=parseFloat(Vn(e,"animation-duration"))||0,o=Math.max(n+t,a+r);e.rcEndAnimTimeout=setTimeout((function(){e.rcEndAnimTimeout=null,e.rcEndListener&&e.rcEndListener()}),1e3*o+200)}}function Yn(e){e.rcEndAnimTimeout&&(clearTimeout(e.rcEndAnimTimeout),e.rcEndAnimTimeout=null)}var Hn=function(e,t,n){var r="object"===(void 0===t?"undefined":An()(t)),a=r?t.name:t,o=r?t.active:t+"-active",i=n,l=void 0,u=void 0,s=jn()(e);return n&&"[object Object]"===Object.prototype.toString.call(n)&&(i=n.end,l=n.start,u=n.active),e.rcEndListener&&e.rcEndListener(),e.rcEndListener=function(t){t&&t.target!==e||(e.rcAnimTimeout&&(clearTimeout(e.rcAnimTimeout),e.rcAnimTimeout=null),Yn(e),s.remove(a),s.remove(o),Dn.removeEndEventListener(e,e.rcEndListener),e.rcEndListener=null,i&&i())},Dn.addEndEventListener(e,e.rcEndListener),l&&l(),s.add(a),e.rcAnimTimeout=setTimeout((function(){e.rcAnimTimeout=null,s.add(o),u&&setTimeout(u,0),Wn(e)}),30),{stop:function(){e.rcEndListener&&e.rcEndListener()}}};Hn.style=function(e,t,n){e.rcEndListener&&e.rcEndListener(),e.rcEndListener=function(t){t&&t.target!==e||(e.rcAnimTimeout&&(clearTimeout(e.rcAnimTimeout),e.rcAnimTimeout=null),Yn(e),Dn.removeEndEventListener(e,e.rcEndListener),e.rcEndListener=null,n&&n())},Dn.addEndEventListener(e,e.rcEndListener),e.rcAnimTimeout=setTimeout((function(){for(var n in t)t.hasOwnProperty(n)&&(e.style[n]=t[n]);e.rcAnimTimeout=null,Wn(e)}),0)},Hn.setTransition=function(e,t,n){var r=t,a=n;void 0===n&&(a=r,r=""),r=r||"",Bn.forEach((function(t){e.style[t+"Transition"+r]=a}))},Hn.isCssAnimationSupported=In;var Kn=Hn,Xn={isAppearSupported:function(e){return e.transitionName&&e.transitionAppear||e.animation.appear},isEnterSupported:function(e){return e.transitionName&&e.transitionEnter||e.animation.enter},isLeaveSupported:function(e){return e.transitionName&&e.transitionLeave||e.animation.leave},allowAppearCallback:function(e){return e.transitionAppear||e.animation.appear},allowEnterCallback:function(e){return e.transitionEnter||e.animation.enter},allowLeaveCallback:function(e){return e.transitionLeave||e.animation.leave}},Gn={enter:"transitionEnter",appear:"transitionAppear",leave:"transitionLeave"},Zn=function(e){function t(){return X()(this,t),$()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return J()(t,e),Z()(t,[{key:"componentWillUnmount",value:function(){this.stop()}},{key:"componentWillEnter",value:function(e){Xn.isEnterSupported(this.props)?this.transition("enter",e):e()}},{key:"componentWillAppear",value:function(e){Xn.isAppearSupported(this.props)?this.transition("appear",e):e()}},{key:"componentWillLeave",value:function(e){Xn.isLeaveSupported(this.props)?this.transition("leave",e):e()}},{key:"transition",value:function(e,t){var n=this,r=T.a.findDOMNode(this),a=this.props,o=a.transitionName,i="object"==typeof o;this.stop();var l=function(){n.stopper=null,t()};if((In||!a.animation[e])&&o&&a[Gn[e]]){var u=i?o[e]:o+"-"+e,s=u+"-active";i&&o[e+"Active"]&&(s=o[e+"Active"]),this.stopper=Kn(r,{name:u,active:s},l)}else this.stopper=a.animation[e](r,l)}},{key:"stop",value:function(){var e=this.stopper;e&&(this.stopper=null,e.stop())}},{key:"render",value:function(){return this.props.children}}]),t}(w.a.Component);Zn.propTypes={children:te.a.any,animation:te.a.any,transitionName:te.a.any};var qn=Zn,$n="rc_animate_"+Date.now();function Qn(e){var t=e.children;return w.a.isValidElement(t)&&!t.key?w.a.cloneElement(t,{key:$n}):t}function Jn(){}var er=function(e){function t(e){X()(this,t);var n=$()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return tr.call(n),n.currentlyAnimatingKeys={},n.keysToEnter=[],n.keysToLeave=[],n.state={children:Mn(Qn(e))},n.childrenRefs={},n}return J()(t,e),Z()(t,[{key:"componentDidMount",value:function(){var e=this,t=this.props.showProp,n=this.state.children;t&&(n=n.filter((function(e){return!!e.props[t]}))),n.forEach((function(t){t&&e.performAppear(t.key)}))}},{key:"componentWillReceiveProps",value:function(e){var t=this;this.nextProps=e;var n=Mn(Qn(e)),r=this.props;r.exclusive&&Object.keys(this.currentlyAnimatingKeys).forEach((function(e){t.stop(e)}));var a,o,i,l,u=r.showProp,s=this.currentlyAnimatingKeys,c=r.exclusive?Mn(Qn(r)):this.state.children,f=[];u?(c.forEach((function(e){var t=e&&kn(n,e.key),r=void 0;(r=t&&t.props[u]||!e.props[u]?t:w.a.cloneElement(t||e,oe()({},u,!0)))&&f.push(r)})),n.forEach((function(e){e&&kn(c,e.key)||f.push(e)}))):(a=n,o=[],i={},l=[],c.forEach((function(e){e&&kn(a,e.key)?l.length&&(i[e.key]=l,l=[]):l.push(e)})),a.forEach((function(e){e&&Object.prototype.hasOwnProperty.call(i,e.key)&&(o=o.concat(i[e.key])),o.push(e)})),f=o=o.concat(l)),this.setState({children:f}),n.forEach((function(e){var n=e&&e.key;if(!e||!s[n]){var r=e&&kn(c,n);if(u){var a=e.props[u];if(r)!_n(c,n,u)&&a&&t.keysToEnter.push(n);else a&&t.keysToEnter.push(n)}else r||t.keysToEnter.push(n)}})),c.forEach((function(e){var r=e&&e.key;if(!e||!s[r]){var a=e&&kn(n,r);if(u){var o=e.props[u];if(a)!_n(n,r,u)&&o&&t.keysToLeave.push(r);else o&&t.keysToLeave.push(r)}else a||t.keysToLeave.push(r)}}))}},{key:"componentDidUpdate",value:function(){var e=this.keysToEnter;this.keysToEnter=[],e.forEach(this.performEnter);var t=this.keysToLeave;this.keysToLeave=[],t.forEach(this.performLeave)}},{key:"isValidChildByKey",value:function(e,t){var n=this.props.showProp;return n?_n(e,t,n):kn(e,t)}},{key:"stop",value:function(e){delete this.currentlyAnimatingKeys[e];var t=this.childrenRefs[e];t&&t.stop()}},{key:"render",value:function(){var e=this,t=this.props;this.nextProps=t;var n=this.state.children,r=null;n&&(r=n.map((function(n){if(null==n)return n;if(!n.key)throw new Error("must set key for <rc-animate> children");return w.a.createElement(qn,{key:n.key,ref:function(t){e.childrenRefs[n.key]=t},animation:t.animation,transitionName:t.transitionName,transitionEnter:t.transitionEnter,transitionAppear:t.transitionAppear,transitionLeave:t.transitionLeave},n)})));var a=t.component;if(a){var o=t;return"string"==typeof a&&(o=H()({className:t.className,style:t.style},t.componentProps)),w.a.createElement(a,o,r)}return r[0]||null}}]),t}(w.a.Component);er.isAnimate=!0,er.propTypes={className:te.a.string,style:te.a.object,component:te.a.any,componentProps:te.a.object,animation:te.a.object,transitionName:te.a.oneOfType([te.a.string,te.a.object]),transitionEnter:te.a.bool,transitionAppear:te.a.bool,exclusive:te.a.bool,transitionLeave:te.a.bool,onEnd:te.a.func,onEnter:te.a.func,onLeave:te.a.func,onAppear:te.a.func,showProp:te.a.string,children:te.a.node},er.defaultProps={animation:{},component:"span",componentProps:{},transitionEnter:!0,transitionLeave:!0,transitionAppear:!1,onEnd:Jn,onEnter:Jn,onLeave:Jn,onAppear:Jn};var tr=function(){var e=this;this.performEnter=function(t){e.childrenRefs[t]&&(e.currentlyAnimatingKeys[t]=!0,e.childrenRefs[t].componentWillEnter(e.handleDoneAdding.bind(e,t,"enter")))},this.performAppear=function(t){e.childrenRefs[t]&&(e.currentlyAnimatingKeys[t]=!0,e.childrenRefs[t].componentWillAppear(e.handleDoneAdding.bind(e,t,"appear")))},this.handleDoneAdding=function(t,n){var r=e.props;if(delete e.currentlyAnimatingKeys[t],!r.exclusive||r===e.nextProps){var a=Mn(Qn(r));e.isValidChildByKey(a,t)?"appear"===n?Xn.allowAppearCallback(r)&&(r.onAppear(t),r.onEnd(t,!0)):Xn.allowEnterCallback(r)&&(r.onEnter(t),r.onEnd(t,!0)):e.performLeave(t)}},this.performLeave=function(t){e.childrenRefs[t]&&(e.currentlyAnimatingKeys[t]=!0,e.childrenRefs[t].componentWillLeave(e.handleDoneLeaving.bind(e,t)))},this.handleDoneLeaving=function(t){var n=e.props;if(delete e.currentlyAnimatingKeys[t],!n.exclusive||n===e.nextProps){var r,a,o,i,l=Mn(Qn(n));if(e.isValidChildByKey(l,t))e.performEnter(t);else{var u=function(){Xn.allowLeaveCallback(n)&&(n.onLeave(t),n.onEnd(t,!1))};r=e.state.children,a=l,o=n.showProp,(i=r.length===a.length)&&r.forEach((function(e,t){var n=a[t];e&&n&&(e&&!n||!e&&n?i=!1:e.key!==n.key?i=!1:o&&e.props[o]!==n.props[o]&&(i=!1))})),i?u():e.setState({children:l},u)}}}},nr=Tn(er),rr=function(e){function t(){return X()(this,t),$()(this,e.apply(this,arguments))}return J()(t,e),t.prototype.shouldComponentUpdate=function(e){return e.hiddenClassName||e.visible},t.prototype.render=function(){var e=this.props,t=e.hiddenClassName,n=e.visible,r=ue()(e,["hiddenClassName","visible"]);return t||w.a.Children.count(r.children)>1?(!n&&t&&(r.className+=" "+t),w.a.createElement("div",r)):w.a.Children.only(r.children)},t}(x.Component);rr.propTypes={children:te.a.any,className:te.a.string,visible:te.a.bool,hiddenClassName:te.a.string};var ar=rr,or=function(e){function t(){return X()(this,t),$()(this,e.apply(this,arguments))}return J()(t,e),t.prototype.render=function(){var e=this.props,t=e.className;return e.visible||(t+=" "+e.hiddenClassName),w.a.createElement("div",{className:t,onMouseEnter:e.onMouseEnter,onMouseLeave:e.onMouseLeave,onMouseDown:e.onMouseDown,onTouchStart:e.onTouchStart,style:e.style},w.a.createElement(ar,{className:e.prefixCls+"-content",visible:e.visible},e.children))},t}(x.Component);or.propTypes={hiddenClassName:te.a.string,className:te.a.string,prefixCls:te.a.string,onMouseEnter:te.a.func,onMouseLeave:te.a.func,onMouseDown:te.a.func,onTouchStart:te.a.func,children:te.a.any};var ir=or,lr=function(e){function t(n){X()(this,t);var r=$()(this,e.call(this,n));return ur.call(r),r.state={stretchChecked:!1,targetWidth:void 0,targetHeight:void 0},r.savePopupRef=ft.bind(r,"popupInstance"),r.saveAlignRef=ft.bind(r,"alignInstance"),r}return J()(t,e),t.prototype.componentDidMount=function(){this.rootNode=this.getPopupDomNode(),this.setStretchSize()},t.prototype.componentDidUpdate=function(){this.setStretchSize()},t.prototype.getPopupDomNode=function(){return T.a.findDOMNode(this.popupInstance)},t.prototype.getMaskTransitionName=function(){var e=this.props,t=e.maskTransitionName,n=e.maskAnimation;return!t&&n&&(t=e.prefixCls+"-"+n),t},t.prototype.getTransitionName=function(){var e=this.props,t=e.transitionName;return!t&&e.animation&&(t=e.prefixCls+"-"+e.animation),t},t.prototype.getClassName=function(e){return this.props.prefixCls+" "+this.props.className+" "+e},t.prototype.getPopupElement=function(){var e=this,t=this.savePopupRef,n=this.state,r=n.stretchChecked,a=n.targetHeight,o=n.targetWidth,i=this.props,l=i.align,u=i.visible,s=i.prefixCls,c=i.style,f=i.getClassNameFromAlign,p=i.destroyPopupOnHide,d=i.stretch,h=i.children,m=i.onMouseEnter,v=i.onMouseLeave,y=i.onMouseDown,b=i.onTouchStart,g=this.getClassName(this.currentAlignClassName||f(l)),E=s+"-hidden";u||(this.currentAlignClassName=null);var x={};d&&(-1!==d.indexOf("height")?x.height=a:-1!==d.indexOf("minHeight")&&(x.minHeight=a),-1!==d.indexOf("width")?x.width=o:-1!==d.indexOf("minWidth")&&(x.minWidth=o),r||(x.visibility="hidden",setTimeout((function(){e.alignInstance&&e.alignInstance.forceAlign()}),0)));var S={className:g,prefixCls:s,ref:t,onMouseEnter:m,onMouseLeave:v,onMouseDown:y,onTouchStart:b,style:H()({},x,c,this.getZIndexStyle())};return p?w.a.createElement(nr,{component:"",exclusive:!0,transitionAppear:!0,transitionName:this.getTransitionName()},u?w.a.createElement(Sn,{target:this.getAlignTarget(),key:"popup",ref:this.saveAlignRef,monitorWindowResize:!0,align:l,onAlign:this.onAlign},w.a.createElement(ir,H()({visible:!0},S),h)):null):w.a.createElement(nr,{component:"",exclusive:!0,transitionAppear:!0,transitionName:this.getTransitionName(),showProp:"xVisible"},w.a.createElement(Sn,{target:this.getAlignTarget(),key:"popup",ref:this.saveAlignRef,monitorWindowResize:!0,xVisible:u,childrenProps:{visible:"xVisible"},disabled:!u,align:l,onAlign:this.onAlign},w.a.createElement(ir,H()({hiddenClassName:E},S),h)))},t.prototype.getZIndexStyle=function(){var e={},t=this.props;return void 0!==t.zIndex&&(e.zIndex=t.zIndex),e},t.prototype.getMaskElement=function(){var e=this.props,t=void 0;if(e.mask){var n=this.getMaskTransitionName();t=w.a.createElement(ar,{style:this.getZIndexStyle(),key:"mask",className:e.prefixCls+"-mask",hiddenClassName:e.prefixCls+"-mask-hidden",visible:e.visible}),n&&(t=w.a.createElement(nr,{key:"mask",showProp:"visible",transitionAppear:!0,component:"",transitionName:n},t))}return t},t.prototype.render=function(){return w.a.createElement("div",null,this.getMaskElement(),this.getPopupElement())},t}(x.Component);lr.propTypes={visible:te.a.bool,style:te.a.object,getClassNameFromAlign:te.a.func,onAlign:te.a.func,getRootDomNode:te.a.func,align:te.a.any,destroyPopupOnHide:te.a.bool,className:te.a.string,prefixCls:te.a.string,onMouseEnter:te.a.func,onMouseLeave:te.a.func,onMouseDown:te.a.func,onTouchStart:te.a.func,stretch:te.a.string,children:te.a.node,point:te.a.shape({pageX:te.a.number,pageY:te.a.number})};var ur=function(){var e=this;this.onAlign=function(t,n){var r=e.props,a=r.getClassNameFromAlign(n);e.currentAlignClassName!==a&&(e.currentAlignClassName=a,t.className=e.getClassName(a)),r.onAlign(t,n)},this.setStretchSize=function(){var t=e.props,n=t.stretch,r=t.getRootDomNode,a=t.visible,o=e.state,i=o.stretchChecked,l=o.targetHeight,u=o.targetWidth;if(n&&a){var s=r();if(s){var c=s.offsetHeight,f=s.offsetWidth;l===c&&u===f&&i||e.setState({stretchChecked:!0,targetHeight:c,targetWidth:f})}}else i&&e.setState({stretchChecked:!1})},this.getTargetElement=function(){return e.props.getRootDomNode()},this.getAlignTarget=function(){var t=e.props.point;return t||e.getTargetElement}},sr=lr;function cr(){}var fr=["onClick","onMouseDown","onTouchStart","onMouseEnter","onMouseLeave","onFocus","onBlur","onContextMenu"],pr=!!S.createPortal,dr={rcTrigger:te.a.shape({onPopupMouseDown:te.a.func})},hr=function(e){function t(n){X()(this,t);var r=$()(this,e.call(this,n));mr.call(r);var a=void 0;return a="popupVisible"in n?!!n.popupVisible:!!n.defaultPopupVisible,r.state={prevPopupVisible:a,popupVisible:a},fr.forEach((function(e){r["fire"+e]=function(t){r.fireEvents(e,t)}})),r}return J()(t,e),t.prototype.getChildContext=function(){return{rcTrigger:{onPopupMouseDown:this.onPopupMouseDown}}},t.prototype.componentDidMount=function(){this.componentDidUpdate({},{popupVisible:this.state.popupVisible})},t.prototype.componentDidUpdate=function(e,t){var n=this.props,r=this.state;if(pr||this.renderComponent(null,(function(){t.popupVisible!==r.popupVisible&&n.afterPopupVisibleChange(r.popupVisible)})),r.popupVisible){var a=void 0;return this.clickOutsideHandler||!this.isClickToHide()&&!this.isContextMenuToShow()||(a=n.getDocument(),this.clickOutsideHandler=de(a,"mousedown",this.onDocumentClick)),this.touchOutsideHandler||(a=a||n.getDocument(),this.touchOutsideHandler=de(a,"touchstart",this.onDocumentClick)),!this.contextMenuOutsideHandler1&&this.isContextMenuToShow()&&(a=a||n.getDocument(),this.contextMenuOutsideHandler1=de(a,"scroll",this.onContextMenuClose)),void(!this.contextMenuOutsideHandler2&&this.isContextMenuToShow()&&(this.contextMenuOutsideHandler2=de(window,"blur",this.onContextMenuClose)))}this.clearOutsideHandler()},t.prototype.componentWillUnmount=function(){this.clearDelayTimer(),this.clearOutsideHandler(),clearTimeout(this.mouseDownTimeout)},t.getDerivedStateFromProps=function(e,t){var n=e.popupVisible,r={};return void 0!==n&&t.popupVisible!==n&&(r.popupVisible=n,r.prevPopupVisible=t.popupVisible),r},t.prototype.getPopupDomNode=function(){return this._component&&this._component.getPopupDomNode?this._component.getPopupDomNode():null},t.prototype.getPopupAlign=function(){var e=this.props,t=e.popupPlacement,n=e.popupAlign,r=e.builtinPlacements;return t&&r?function(e,t,n){var r=e[t]||{};return H()({},r,n)}(r,t,n):n},t.prototype.setPopupVisible=function(e,t){var n=this.props.alignPoint,r=this.state.popupVisible;this.clearDelayTimer(),r!==e&&("popupVisible"in this.props||this.setState({popupVisible:e,prevPopupVisible:r}),this.props.onPopupVisibleChange(e)),n&&t&&this.setPoint(t)},t.prototype.delaySetPopupVisible=function(e,t,n){var r=this,a=1e3*t;if(this.clearDelayTimer(),a){var o=n?{pageX:n.pageX,pageY:n.pageY}:null;this.delayTimer=setTimeout((function(){r.setPopupVisible(e,o),r.clearDelayTimer()}),a)}else this.setPopupVisible(e,n)},t.prototype.clearDelayTimer=function(){this.delayTimer&&(clearTimeout(this.delayTimer),this.delayTimer=null)},t.prototype.clearOutsideHandler=function(){this.clickOutsideHandler&&(this.clickOutsideHandler.remove(),this.clickOutsideHandler=null),this.contextMenuOutsideHandler1&&(this.contextMenuOutsideHandler1.remove(),this.contextMenuOutsideHandler1=null),this.contextMenuOutsideHandler2&&(this.contextMenuOutsideHandler2.remove(),this.contextMenuOutsideHandler2=null),this.touchOutsideHandler&&(this.touchOutsideHandler.remove(),this.touchOutsideHandler=null)},t.prototype.createTwoChains=function(e){var t=this.props.children.props,n=this.props;return t[e]&&n[e]?this["fire"+e]:t[e]||n[e]},t.prototype.isClickToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")},t.prototype.isContextMenuToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("contextMenu")||-1!==n.indexOf("contextMenu")},t.prototype.isClickToHide=function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")},t.prototype.isMouseEnterToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseEnter")},t.prototype.isMouseLeaveToHide=function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseLeave")},t.prototype.isFocusToShow=function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("focus")},t.prototype.isBlurToHide=function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("blur")},t.prototype.forcePopupAlign=function(){this.state.popupVisible&&this._component&&this._component.alignInstance&&this._component.alignInstance.forceAlign()},t.prototype.fireEvents=function(e,t){var n=this.props.children.props[e];n&&n(t);var r=this.props[e];r&&r(t)},t.prototype.close=function(){this.setPopupVisible(!1)},t.prototype.render=function(){var e=this,t=this.state.popupVisible,n=this.props,r=n.children,a=n.forceRender,o=n.alignPoint,i=n.className,l=w.a.Children.only(r),u={key:"trigger"};this.isContextMenuToShow()?u.onContextMenu=this.onContextMenu:u.onContextMenu=this.createTwoChains("onContextMenu"),this.isClickToHide()||this.isClickToShow()?(u.onClick=this.onClick,u.onMouseDown=this.onMouseDown,u.onTouchStart=this.onTouchStart):(u.onClick=this.createTwoChains("onClick"),u.onMouseDown=this.createTwoChains("onMouseDown"),u.onTouchStart=this.createTwoChains("onTouchStart")),this.isMouseEnterToShow()?(u.onMouseEnter=this.onMouseEnter,o&&(u.onMouseMove=this.onMouseMove)):u.onMouseEnter=this.createTwoChains("onMouseEnter"),this.isMouseLeaveToHide()?u.onMouseLeave=this.onMouseLeave:u.onMouseLeave=this.createTwoChains("onMouseLeave"),this.isFocusToShow()||this.isBlurToHide()?(u.onFocus=this.onFocus,u.onBlur=this.onBlur):(u.onFocus=this.createTwoChains("onFocus"),u.onBlur=this.createTwoChains("onBlur"));var s=me()(l&&l.props&&l.props.className,i);s&&(u.className=s);var c=w.a.cloneElement(l,u);if(!pr)return w.a.createElement(nt,{parent:this,visible:t,autoMount:!1,forceRender:a,getComponent:this.getComponent,getContainer:this.getContainer},(function(t){var n=t.renderComponent;return e.renderComponent=n,c}));var f=void 0;return(t||this._component||a)&&(f=w.a.createElement(st,{key:"portal",getContainer:this.getContainer,didUpdate:this.handlePortalUpdate},this.getComponent())),[c,f]},t}(w.a.Component);hr.propTypes={children:te.a.any,action:te.a.oneOfType([te.a.string,te.a.arrayOf(te.a.string)]),showAction:te.a.any,hideAction:te.a.any,getPopupClassNameFromAlign:te.a.any,onPopupVisibleChange:te.a.func,afterPopupVisibleChange:te.a.func,popup:te.a.oneOfType([te.a.node,te.a.func]).isRequired,popupStyle:te.a.object,prefixCls:te.a.string,popupClassName:te.a.string,className:te.a.string,popupPlacement:te.a.string,builtinPlacements:te.a.object,popupTransitionName:te.a.oneOfType([te.a.string,te.a.object]),popupAnimation:te.a.any,mouseEnterDelay:te.a.number,mouseLeaveDelay:te.a.number,zIndex:te.a.number,focusDelay:te.a.number,blurDelay:te.a.number,getPopupContainer:te.a.func,getDocument:te.a.func,forceRender:te.a.bool,destroyPopupOnHide:te.a.bool,mask:te.a.bool,maskClosable:te.a.bool,onPopupAlign:te.a.func,popupAlign:te.a.object,popupVisible:te.a.bool,defaultPopupVisible:te.a.bool,maskTransitionName:te.a.oneOfType([te.a.string,te.a.object]),maskAnimation:te.a.string,stretch:te.a.string,alignPoint:te.a.bool},hr.contextTypes=dr,hr.childContextTypes=dr,hr.defaultProps={prefixCls:"rc-trigger-popup",getPopupClassNameFromAlign:function(){return""},getDocument:function(){return window.document},onPopupVisibleChange:cr,afterPopupVisibleChange:cr,onPopupAlign:cr,popupClassName:"",mouseEnterDelay:0,mouseLeaveDelay:.1,focusDelay:0,blurDelay:.15,popupStyle:{},destroyPopupOnHide:!1,popupAlign:{},defaultPopupVisible:!1,mask:!1,maskClosable:!0,action:[],showAction:[],hideAction:[]};var mr=function(){var e=this;this.onMouseEnter=function(t){var n=e.props.mouseEnterDelay;e.fireEvents("onMouseEnter",t),e.delaySetPopupVisible(!0,n,n?null:t)},this.onMouseMove=function(t){e.fireEvents("onMouseMove",t),e.setPoint(t)},this.onMouseLeave=function(t){e.fireEvents("onMouseLeave",t),e.delaySetPopupVisible(!1,e.props.mouseLeaveDelay)},this.onPopupMouseEnter=function(){e.clearDelayTimer()},this.onPopupMouseLeave=function(t){t.relatedTarget&&!t.relatedTarget.setTimeout&&e._component&&e._component.getPopupDomNode&&qe(e._component.getPopupDomNode(),t.relatedTarget)||e.delaySetPopupVisible(!1,e.props.mouseLeaveDelay)},this.onFocus=function(t){e.fireEvents("onFocus",t),e.clearDelayTimer(),e.isFocusToShow()&&(e.focusTime=Date.now(),e.delaySetPopupVisible(!0,e.props.focusDelay))},this.onMouseDown=function(t){e.fireEvents("onMouseDown",t),e.preClickTime=Date.now()},this.onTouchStart=function(t){e.fireEvents("onTouchStart",t),e.preTouchTime=Date.now()},this.onBlur=function(t){e.fireEvents("onBlur",t),e.clearDelayTimer(),e.isBlurToHide()&&e.delaySetPopupVisible(!1,e.props.blurDelay)},this.onContextMenu=function(t){t.preventDefault(),e.fireEvents("onContextMenu",t),e.setPopupVisible(!0,t)},this.onContextMenuClose=function(){e.isContextMenuToShow()&&e.close()},this.onClick=function(t){if(e.fireEvents("onClick",t),e.focusTime){var n=void 0;if(e.preClickTime&&e.preTouchTime?n=Math.min(e.preClickTime,e.preTouchTime):e.preClickTime?n=e.preClickTime:e.preTouchTime&&(n=e.preTouchTime),Math.abs(n-e.focusTime)<20)return;e.focusTime=0}e.preClickTime=0,e.preTouchTime=0,e.isClickToShow()&&(e.isClickToHide()||e.isBlurToHide())&&t&&t.preventDefault&&t.preventDefault();var r=!e.state.popupVisible;(e.isClickToHide()&&!r||r&&e.isClickToShow())&&e.setPopupVisible(!e.state.popupVisible,t)},this.onPopupMouseDown=function(){var t=e.context.rcTrigger,n=void 0===t?{}:t;e.hasPopupMouseDown=!0,clearTimeout(e.mouseDownTimeout),e.mouseDownTimeout=setTimeout((function(){e.hasPopupMouseDown=!1}),0),n.onPopupMouseDown&&n.onPopupMouseDown.apply(n,arguments)},this.onDocumentClick=function(t){if(!e.props.mask||e.props.maskClosable){var n=t.target;qe(Object(S.findDOMNode)(e),n)||e.hasPopupMouseDown||e.close()}},this.getRootDomNode=function(){return Object(S.findDOMNode)(e)},this.getPopupClassNameFromAlign=function(t){var n=[],r=e.props,a=r.popupPlacement,o=r.builtinPlacements,i=r.prefixCls,l=r.alignPoint,u=r.getPopupClassNameFromAlign;return a&&o&&n.push(function(e,t,n,r){var a=n.points;for(var o in e)if(e.hasOwnProperty(o)&&ct(e[o].points,a,r))return t+"-placement-"+o;return""}(o,i,t,l)),u&&n.push(u(t)),n.join(" ")},this.getComponent=function(){var t=e.props,n=t.prefixCls,r=t.destroyPopupOnHide,a=t.popupClassName,o=t.action,i=t.onPopupAlign,l=t.popupAnimation,u=t.popupTransitionName,s=t.popupStyle,c=t.mask,f=t.maskAnimation,p=t.maskTransitionName,d=t.zIndex,h=t.popup,m=t.stretch,v=t.alignPoint,y=e.state,b=y.popupVisible,g=y.point,E=e.getPopupAlign(),x={};return e.isMouseEnterToShow()&&(x.onMouseEnter=e.onPopupMouseEnter),e.isMouseLeaveToHide()&&(x.onMouseLeave=e.onPopupMouseLeave),x.onMouseDown=e.onPopupMouseDown,x.onTouchStart=e.onPopupMouseDown,w.a.createElement(sr,H()({prefixCls:n,destroyPopupOnHide:r,visible:b,point:v&&g,className:a,action:o,align:E,onAlign:i,animation:l,getClassNameFromAlign:e.getPopupClassNameFromAlign},x,{stretch:m,getRootDomNode:e.getRootDomNode,style:s,mask:c,zIndex:d,transitionName:u,maskAnimation:f,maskTransitionName:p,ref:e.savePopup}),"function"==typeof h?h():h)},this.getContainer=function(){var t=e.props,n=document.createElement("div");return n.style.position="absolute",n.style.top="0",n.style.left="0",n.style.width="100%",(t.getPopupContainer?t.getPopupContainer(Object(S.findDOMNode)(e)):t.getDocument().body).appendChild(n),n},this.setPoint=function(t){e.props.alignPoint&&t&&e.setState({point:{pageX:t.pageX,pageY:t.pageY}})},this.handlePortalUpdate=function(){e.state.prevPopupVisible!==e.state.popupVisible&&e.props.afterPopupVisibleChange(e.state.popupVisible)},this.savePopup=function(t){e._component=t}};Ye(hr);var vr=hr,yr={adjustX:1,adjustY:1},br=[0,0],gr={left:{points:["cr","cl"],overflow:yr,offset:[-4,0],targetOffset:br},right:{points:["cl","cr"],overflow:yr,offset:[4,0],targetOffset:br},top:{points:["bc","tc"],overflow:yr,offset:[0,-4],targetOffset:br},bottom:{points:["tc","bc"],overflow:yr,offset:[0,4],targetOffset:br},topLeft:{points:["bl","tl"],overflow:yr,offset:[0,-4],targetOffset:br},leftTop:{points:["tr","tl"],overflow:yr,offset:[-4,0],targetOffset:br},topRight:{points:["br","tr"],overflow:yr,offset:[0,-4],targetOffset:br},rightTop:{points:["tl","tr"],overflow:yr,offset:[4,0],targetOffset:br},bottomRight:{points:["tr","br"],overflow:yr,offset:[0,4],targetOffset:br},rightBottom:{points:["bl","br"],overflow:yr,offset:[4,0],targetOffset:br},bottomLeft:{points:["tl","bl"],overflow:yr,offset:[0,4],targetOffset:br},leftBottom:{points:["br","bl"],overflow:yr,offset:[-4,0],targetOffset:br}},Er=function(e){function t(){return X()(this,t),$()(this,e.apply(this,arguments))}return J()(t,e),t.prototype.componentDidUpdate=function(){var e=this.props.trigger;e&&e.forcePopupAlign()},t.prototype.render=function(){var e=this.props,t=e.overlay,n=e.prefixCls,r=e.id;return w.a.createElement("div",{className:n+"-inner",id:r,role:"tooltip"},"function"==typeof t?t():t)},t}(w.a.Component);Er.propTypes={prefixCls:te.a.string,overlay:te.a.oneOfType([te.a.node,te.a.func]).isRequired,id:te.a.string,trigger:te.a.any};var xr=Er,wr=function(e){function t(){var n,r,a;X()(this,t);for(var o=arguments.length,i=Array(o),l=0;l<o;l++)i[l]=arguments[l];return n=r=$()(this,e.call.apply(e,[this].concat(i))),r.getPopupElement=function(){var e=r.props,t=e.arrowContent,n=e.overlay,a=e.prefixCls,o=e.id;return[w.a.createElement("div",{className:a+"-arrow",key:"arrow"},t),w.a.createElement(xr,{key:"content",trigger:r.trigger,prefixCls:a,id:o,overlay:n})]},r.saveTrigger=function(e){r.trigger=e},a=n,$()(r,a)}return J()(t,e),t.prototype.getPopupDomNode=function(){return this.trigger.getPopupDomNode()},t.prototype.render=function(){var e=this.props,t=e.overlayClassName,n=e.trigger,r=e.mouseEnterDelay,a=e.mouseLeaveDelay,o=e.overlayStyle,i=e.prefixCls,l=e.children,u=e.onVisibleChange,s=e.afterVisibleChange,c=e.transitionName,f=e.animation,p=e.placement,d=e.align,h=e.destroyTooltipOnHide,m=e.defaultVisible,v=e.getTooltipContainer,y=ue()(e,["overlayClassName","trigger","mouseEnterDelay","mouseLeaveDelay","overlayStyle","prefixCls","children","onVisibleChange","afterVisibleChange","transitionName","animation","placement","align","destroyTooltipOnHide","defaultVisible","getTooltipContainer"]),b=H()({},y);return"visible"in this.props&&(b.popupVisible=this.props.visible),w.a.createElement(vr,H()({popupClassName:t,ref:this.saveTrigger,prefixCls:i,popup:this.getPopupElement,action:n,builtinPlacements:gr,popupPlacement:p,popupAlign:d,getPopupContainer:v,onPopupVisibleChange:u,afterPopupVisibleChange:s,popupTransitionName:c,popupAnimation:f,defaultPopupVisible:m,destroyPopupOnHide:h,mouseLeaveDelay:a,popupStyle:o,mouseEnterDelay:r},b),l)},t}(x.Component);wr.propTypes={trigger:te.a.any,children:te.a.any,defaultVisible:te.a.bool,visible:te.a.bool,placement:te.a.string,transitionName:te.a.oneOfType([te.a.string,te.a.object]),animation:te.a.any,onVisibleChange:te.a.func,afterVisibleChange:te.a.func,overlay:te.a.oneOfType([te.a.node,te.a.func]).isRequired,overlayStyle:te.a.object,overlayClassName:te.a.string,prefixCls:te.a.string,mouseEnterDelay:te.a.number,mouseLeaveDelay:te.a.number,getTooltipContainer:te.a.func,destroyTooltipOnHide:te.a.bool,align:te.a.object,arrowContent:te.a.any,id:te.a.string},wr.defaultProps={prefixCls:"rc-tooltip",mouseEnterDelay:0,destroyTooltipOnHide:!1,mouseLeaveDelay:.1,align:{},placement:"right",trigger:["hover"],arrowContent:null};var Sr=wr;Be.Range=Ze,Be.Handle=xe,Be.createSliderWithTooltip=function(e){var t,n;return n=t=function(t){function n(){var e,t,r,a;X()(this,n);for(var o=arguments.length,i=Array(o),l=0;l<o;l++)i[l]=arguments[l];return t=r=$()(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),r.state={visibles:{}},r.handleTooltipVisibleChange=function(e,t){r.setState((function(n){return{visibles:H()({},n.visibles,oe()({},e,t))}}))},r.handleWithTooltip=function(e){var t=e.value,n=e.dragging,a=e.index,o=e.disabled,i=ue()(e,["value","dragging","index","disabled"]),l=r.props,u=l.tipFormatter,s=l.tipProps,c=l.handleStyle,f=s.prefixCls,p=void 0===f?"rc-slider-tooltip":f,d=s.overlay,h=void 0===d?u(t):d,m=s.placement,v=void 0===m?"top":m,y=s.visible,b=void 0!==y&&y,g=ue()(s,["prefixCls","overlay","placement","visible"]),E=void 0;return E=Array.isArray(c)?c[a]||c[0]:c,w.a.createElement(Sr,H()({},g,{prefixCls:p,overlay:h,placement:v,visible:!o&&(r.state.visibles[a]||n)||b,key:a}),w.a.createElement(xe,H()({},i,{style:H()({},E),value:t,onMouseEnter:function(){return r.handleTooltipVisibleChange(a,!0)},onMouseLeave:function(){return r.handleTooltipVisibleChange(a,!1)}})))},a=t,$()(r,a)}return J()(n,t),Z()(n,[{key:"render",value:function(){return w.a.createElement(e,H()({},this.props,{handle:this.handleWithTooltip}))}}]),n}(w.a.Component),t.propTypes={tipFormatter:te.a.func,handleStyle:te.a.oneOfType([te.a.object,te.a.arrayOf(te.a.object)]),tipProps:te.a.object},t.defaultProps={tipFormatter:function(e){return e},handleStyle:[{}],tipProps:{}},n};var Tr=Be,Mr=(n(22),n(75)),kr=n.n(Mr);n(158);function _r(e){return(_r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Cr(e){return(Cr="function"==typeof Symbol&&"symbol"===_r(Symbol.iterator)?function(e){return _r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_r(e)})(e)}function Ar(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Pr(e){return(Pr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Or(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Rr(e,t){return(Rr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Lr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Nr(){return(Nr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Fr(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var Dr=["precision mediump float;","","attribute vec2 vertPosition;","attribute vec3 vertColor;","varying vec3 fragColor;","","void main()","{","  fragColor = vertColor;","  gl_Position = vec4(vertPosition, 0.0, 1.0);","}"].join("\n"),Ur=["precision mediump float;","","varying vec3 fragColor;","void main()","{","  gl_FragColor = vec4(fragColor, 1.0);","}"].join("\n"),jr=((0,Tr.createSliderWithTooltip)(Tr.Range),Tr.Handle),Ir=function(e){var t=e.value,n=e.dragging,r=e.index,a=Fr(e,["value","dragging","index"]);return w.a.createElement(Sr,{prefixCls:"rc-slider-tooltip",overlay:t,visible:n,placement:"top",key:r},w.a.createElement(jr,Nr({value:t},a)))},Br=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==Cr(t)&&"function"!=typeof t?Or(e):t}(this,Pr(t).call(this,e)),Lr(Or(n),"shaderProgram",(function(e,t,n){var r=e.createProgram(),a=function(t,n){var a=e.createShader("vertex"===t?e.VERTEX_SHADER:e.FRAGMENT_SHADER);if(e.shaderSource(a,n),e.compileShader(a),!e.getShaderParameter(a,e.COMPILE_STATUS))throw"Could not compile "+t+" shader:\n\n"+e.getShaderInfoLog(a);e.attachShader(r,a)};if(a("vertex",t),a("fragment",n),e.linkProgram(r),!e.getProgramParameter(r,e.LINK_STATUS))throw"Could not link the shader program!";return r})),Lr(Or(n),"draw",(function(){try{var e=n.webGLCanvas.getContext("webgl");if(!e)throw"x"}catch(e){throw"Your web browser does not support WebGL!"}e.clearColor(.8,.8,.8,1),e.clear(e.COLOR_BUFFER_BIT);var t=n.shaderProgram(e,Dr,Ur),r=[n.state.vertexContainer1.vertex.x,n.state.vertexContainer1.vertex.y,n.state.vertexContainer1.vertex.r,n.state.vertexContainer1.vertex.g,n.state.vertexContainer1.vertex.b,n.state.vertexContainer2.vertex.x,n.state.vertexContainer2.vertex.y,n.state.vertexContainer2.vertex.r,n.state.vertexContainer2.vertex.g,n.state.vertexContainer2.vertex.b,n.state.vertexContainer3.vertex.x,n.state.vertexContainer3.vertex.y,n.state.vertexContainer3.vertex.r,n.state.vertexContainer3.vertex.g,n.state.vertexContainer3.vertex.b,n.state.vertexContainer4.vertex.x,n.state.vertexContainer4.vertex.y,n.state.vertexContainer4.vertex.r,n.state.vertexContainer4.vertex.g,n.state.vertexContainer4.vertex.b,n.state.vertexContainer5.vertex.x,n.state.vertexContainer5.vertex.y,n.state.vertexContainer5.vertex.r,n.state.vertexContainer5.vertex.g,n.state.vertexContainer5.vertex.b],a=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,a),e.bufferData(e.ARRAY_BUFFER,new Float32Array(r),e.STATIC_DRAW);var o=e.getAttribLocation(t,"vertPosition"),i=e.getAttribLocation(t,"vertColor");e.vertexAttribPointer(o,2,e.FLOAT,e.FALSE,5*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(i,3,e.FLOAT,e.FALSE,5*Float32Array.BYTES_PER_ELEMENT,2*Float32Array.BYTES_PER_ELEMENT),e.enableVertexAttribArray(o),e.enableVertexAttribArray(i),e.useProgram(t),e.drawArrays(e.TRIANGLE_STRIP,0,5)})),Lr(Or(n),"init",(function(){try{n.draw()}catch(e){alert("Error: "+e)}})),Lr(Or(n),"handleKeyDown",(function(e){n.setState({eventKey:e}),"?"===e&&console.log("? pressed ! ")})),Lr(Or(n),"changeXV1",(function(e){n.state.vertexContainer1.vertex.x=e,n.draw()})),Lr(Or(n),"changeYV1",(function(e){n.state.vertexContainer1.vertex.y=e,n.draw()})),Lr(Or(n),"changeXV2",(function(e){n.state.vertexContainer2.vertex.x=e,n.draw()})),Lr(Or(n),"changeYV2",(function(e){n.state.vertexContainer2.vertex.y=e,n.draw()})),Lr(Or(n),"changeXV3",(function(e){n.state.vertexContainer3.vertex.x=e,n.draw()})),Lr(Or(n),"changeYV3",(function(e){n.state.vertexContainer3.vertex.y=e,n.draw()})),Lr(Or(n),"changeXV4",(function(e){n.state.vertexContainer4.vertex.x=e,n.draw()})),Lr(Or(n),"changeYV4",(function(e){n.state.vertexContainer4.vertex.y=e,n.draw()})),Lr(Or(n),"changeXV5",(function(e){n.state.vertexContainer5.vertex.x=e,n.draw()})),Lr(Or(n),"changeYV5",(function(e){n.state.vertexContainer5.vertex.y=e,n.draw()})),Lr(Or(n),"changeColorV1",(function(e){n.state.vertexContainer1.colorManipulator=e,n.state.vertexContainer1.vertex.r=1-n.state.vertexContainer1.colorManipulator,n.state.vertexContainer1.vertex.g=1-n.state.vertexContainer1.colorManipulator,n.state.vertexContainer1.vertex.b=0+n.state.vertexContainer1.colorManipulator,n.draw()})),Lr(Or(n),"changeColorV2",(function(e){n.state.vertexContainer2.colorManipulator=e,n.state.vertexContainer2.vertex.r=1-n.state.vertexContainer2.colorManipulator,n.state.vertexContainer2.vertex.g=0+n.state.vertexContainer2.colorManipulator,n.state.vertexContainer2.vertex.b=0+n.state.vertexContainer2.colorManipulator,n.draw()})),Lr(Or(n),"changeColorV3",(function(e){n.state.vertexContainer3.colorManipulator=e,n.state.vertexContainer3.vertex.r=0+n.state.vertexContainer3.colorManipulator,n.state.vertexContainer3.vertex.g=1-n.state.vertexContainer3.colorManipulator,n.state.vertexContainer3.vertex.b=1-n.state.vertexContainer3.colorManipulator,n.draw()})),Lr(Or(n),"changeColorV4",(function(e){n.state.vertexContainer4.colorManipulator=e,n.state.vertexContainer4.vertex.r=1-n.state.vertexContainer4.colorManipulator,n.state.vertexContainer4.vertex.g=0-n.state.vertexContainer4.colorManipulator,n.state.vertexContainer4.vertex.b=1-n.state.vertexContainer4.colorManipulator,n.draw()})),Lr(Or(n),"changeColorV5",(function(e){n.state.vertexContainer5.colorManipulator=e,n.state.vertexContainer5.vertex.r=1-n.state.vertexContainer5.colorManipulator,n.state.vertexContainer5.vertex.g=0+n.state.vertexContainer5.colorManipulator,n.state.vertexContainer5.vertex.b=0+n.state.vertexContainer5.colorManipulator,n.draw()})),Lr(Or(n),"propsAsString",(function(e){return function e(t,n,r){return Object.keys(t).map((function(a){void 0===n.get(t[a])&&n.set(t[a],0);var o=n.get(t[a]);if("object"===Cr(t[a])&&null!==t[a]&&void 0!==t[a]&&o<r){var i=n.get(t[a]);return i++,n.set(t[a],i),e(t[a],n,r)}return a+" : "+t[a]})).join(" \n ")}(e,new kr.a,1)})),n.state={eventKey:" ",xMin:-1,xMax:1,yMin:-1,yMax:1,vertexContainer1:{vertex:{x:.56,y:.88,r:1,g:1,b:0},colorManipulator:-.5},vertexContainer2:{vertex:{x:-.6,y:.6,r:.5,g:0,b:1},colorManipulator:0},vertexContainer3:{vertex:{x:.6,y:-.6,r:.1,g:1,b:.8},colorManipulator:0},vertexContainer4:{vertex:{x:.6,y:.6,r:.3,g:.9,b:.8},colorManipulator:0},vertexContainer5:{vertex:{x:-.84,y:-.19,r:1,g:.2,b:0},colorManipulator:-.5}},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Rr(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.init()}},{key:"render",value:function(){var e=this,t={width:400,margin:10};return w.a.createElement("div",null,w.a.createElement("div",null,w.a.createElement("h2",null,"EA3")),w.a.createElement("div",{className:"rowC"},w.a.createElement("div",{className:"canvasBox"},w.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"})),w.a.createElement("div",{className:"sliderBox"},w.a.createElement("div",{style:t},"Vertex1 X Value:",w.a.createElement(Tr,{min:this.state.xMin,max:this.state.xMax,defaultValue:this.state.vertexContainer1.vertex.x,step:.01,handle:Ir,onChange:this.changeXV1})),w.a.createElement("div",{style:t},"Vertex1 Y Value:",w.a.createElement(Tr,{min:this.state.yMin,max:this.state.yMax,defaultValue:this.state.vertexContainer1.vertex.y,step:.01,handle:Ir,onChange:this.changeYV1})),w.a.createElement("div",{style:t},"Vertex1 Color",w.a.createElement(Tr,{min:-.5,max:.5,defaultValue:this.state.vertexContainer1.colorManipulator,step:.001,handle:Ir,onChange:this.changeColorV1})),w.a.createElement("div",{style:t},"Vertex2 X Value:",w.a.createElement(Tr,{min:this.state.xMin,max:this.state.xMax,defaultValue:this.state.vertexContainer2.vertex.x,step:.01,handle:Ir,onChange:this.changeXV2})),w.a.createElement("div",{style:t},"Vertex2 Y Value:",w.a.createElement(Tr,{min:this.state.yMin,max:this.state.yMax,defaultValue:this.state.vertexContainer2.vertex.y,step:.01,handle:Ir,onChange:this.changeYV2})),w.a.createElement("div",{style:t},"Vertex2 Color",w.a.createElement(Tr,{min:-.5,max:.5,defaultValue:this.state.vertexContainer2.colorManipulator,step:.001,handle:Ir,onChange:this.changeColorV2})),w.a.createElement("div",{style:t},"Vertex3 X Value:",w.a.createElement(Tr,{min:this.state.xMin,max:this.state.xMax,defaultValue:this.state.vertexContainer3.vertex.x,step:.01,handle:Ir,onChange:this.changeXV3})),w.a.createElement("div",{style:t},"Vertex3 Y Value:",w.a.createElement(Tr,{min:this.state.yMin,max:this.state.yMax,defaultValue:this.state.vertexContainer3.vertex.y,step:.01,handle:Ir,onChange:this.changeYV3})),w.a.createElement("div",{style:t},"Vertex3 Color",w.a.createElement(Tr,{min:-.5,max:.5,defaultValue:this.state.vertexContainer3.colorManipulator,step:.001,handle:Ir,onChange:this.changeColorV3})),w.a.createElement("div",{style:t},"Vertex4 X Value:",w.a.createElement(Tr,{min:this.state.xMin,max:this.state.xMax,defaultValue:this.state.vertexContainer4.vertex.x,step:.01,handle:Ir,onChange:this.changeXV4})),w.a.createElement("div",{style:t},"Vertex4 Y Value:",w.a.createElement(Tr,{min:this.state.yMin,max:this.state.yMax,defaultValue:this.state.vertexContainer4.vertex.y,step:.01,handle:Ir,onChange:this.changeYV4})),w.a.createElement("div",{style:t},"Vertex4 Color",w.a.createElement(Tr,{min:-.5,max:.5,defaultValue:this.state.vertexContainer4.colorManipulator,step:.001,handle:Ir,onChange:this.changeColorV4})),w.a.createElement("div",{style:t},"Vertex5 X Value:",w.a.createElement(Tr,{min:this.state.xMin,max:this.state.xMax,defaultValue:this.state.vertexContainer5.vertex.x,step:.01,handle:Ir,onChange:this.changeXV5})),w.a.createElement("div",{style:t},"Vertex5 Y Value:",w.a.createElement(Tr,{min:this.state.yMin,max:this.state.yMax,defaultValue:this.state.vertexContainer5.vertex.y,step:.01,handle:Ir,onChange:this.changeYV5})),w.a.createElement("div",{style:t},"Vertex5 Color",w.a.createElement(Tr,{min:-.5,max:.5,defaultValue:this.state.vertexContainer5.colorManipulator,step:.001,handle:Ir,onChange:this.changeColorV5})))),w.a.createElement("div",null,this.state.eventKey),w.a.createElement(_.a,{handleKeys:["?"],onKeyEvent:function(t,n){return e.handleKeyDown(t)}}),w.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&Ar(n.prototype,r),a&&Ar(n,a),t}(x.Component);Lr(Br,"propTypes",{}),Lr(Br,"defaultProps",{});var zr=n(37),Vr=n.n(zr);function Wr(e){return(Wr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Yr(e){return(Yr="function"==typeof Symbol&&"symbol"===Wr(Symbol.iterator)?function(e){return Wr(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":Wr(e)})(e)}function Hr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Kr(e){return(Kr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Xr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Gr(e,t){return(Gr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Zr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function qr(){return(qr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function $r(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var Qr=1,Jr=Tr.Handle,ea=function(e){var t=e.value,n=e.dragging,r=e.index,a=$r(e,["value","dragging","index"]);return w.a.createElement(Sr,{prefixCls:"rc-slider-tooltip",overlay:t,visible:n,placement:"top",key:r},w.a.createElement(Jr,qr({value:t},a)))},ta=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==Yr(t)&&"function"!=typeof t?Xr(e):t}(this,Kr(t).call(this,e)),Zr(Xr(n),"handleCheckboxChange",(function(e){n.setState({checked:e}),e?n.init():n.draw()})),Zr(Xr(n),"changeConstant",(function(e){n.setState({constant:e}),n.state.checked||n.draw()})),Zr(Xr(n),"draw",(function(){try{var e=n.webGLCanvas.getContext("webgl");if(!e)throw"x"}catch(e){throw"Your web browser does not support WebGL!"}e.clearColor(0,0,0,1),e.frontFace(e.CCW),e.enable(e.CULL_FACE),e.cullFace(e.BACK);var t=e.createShader(e.VERTEX_SHADER);e.shaderSource(t,"attribute vec3 pos;attribute vec4 col;attribute float c;varying vec4 color;void main(){color = col;gl_Position = vec4(c * pos, 1);}"),e.compileShader(t);var r=e.createShader(e.FRAGMENT_SHADER);e.shaderSource(r,"precision mediump float;varying vec4 color;void main() {gl_FragColor = color;}"),e.compileShader(r);var a,o,i,l=e.createProgram();e.attachShader(l,t),e.attachShader(l,r),e.bindAttribLocation(l,0,"pos"),e.linkProgram(l),e.useProgram(l),function(){var e=100,t=100;a=new Float32Array(30603),o=new Uint16Array(4e4),i=new Uint16Array(6e4);for(var n=0,r=0,l=0,u=-1;l<=e;l++,u+=1)for(var s=0,c=-1;s<=t;s++,c+=1){var f=101*l+s,p=c,d=u,h=p*Math.cos(Math.cos(p))*Math.cos(d),m=p*Math.cos(Math.cos(p))*Math.sin(d),v=p*Math.sin(Math.cos(p));a[3*f]=h,a[3*f+1]=m,a[3*f+2]=v,s>0&&l>0&&(o[n++]=f-1,o[n++]=f),s>0&&l>0&&(o[n++]=f-101,o[n++]=f),s>0&&l>0&&(i[r++]=f,i[r++]=f-1,i[r++]=f-101,i[r++]=f-1,i[r++]=f-101-1,i[r++]=f-101)}}();var u=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,u),e.bufferData(e.ARRAY_BUFFER,a,e.STATIC_DRAW);var s=e.getAttribLocation(l,"pos");e.vertexAttribPointer(s,3,e.FLOAT,!1,0,0),e.enableVertexAttribArray(s);var c=e.getAttribLocation(l,"col"),f=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,f),e.bufferData(e.ELEMENT_ARRAY_BUFFER,o,e.STATIC_DRAW),f.numberOfElements=o.length,e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null);var p=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,p),e.bufferData(e.ELEMENT_ARRAY_BUFFER,i,e.STATIC_DRAW),p.numberOfElements=i.length,e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),e.clear(e.COLOR_BUFFER_BIT);var d=e.getAttribLocation(l,"c");e.vertexAttrib1f(d,n.state.constant),e.vertexAttrib4f(c,n.state.checked?Math.random(.5):.6,n.state.checked?Math.random(.5):.6,n.state.checked?Math.random(.5):.6,.8),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,p),e.drawElements(e.TRIANGLES,p.numberOfElements,e.UNSIGNED_SHORT,0),e.vertexAttrib4f(c,n.state.checked?Math.random(.5):.6,n.state.checked?Math.random(.5):.6,n.state.checked?Math.random(.5):.6,.7),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,f),e.drawElements(e.LINES,f.numberOfElements,e.UNSIGNED_SHORT,0)})),Zr(Xr(n),"myLoop",(function(){setTimeout((function(){n.draw(),n.changeConstant(n.state.constant+1e-4),Qr++,n.state.checked?Qr<1e5&&n.myLoop():Qr=0}),100)})),Zr(Xr(n),"init",(function(){try{n.myLoop()}catch(e){alert("Error: "+e)}})),n.state={constant:0,checked:!0},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Gr(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.init(!0)}},{key:"render",value:function(){var e=this,t={width:400,margin:10};return w.a.createElement("div",null,w.a.createElement("div",null,w.a.createElement("h2",null,"EA4 1 - Wellenkugel")),w.a.createElement("div",{className:"rowC"},w.a.createElement("div",{className:"canvasBox"},w.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"}))),w.a.createElement("div",{style:t},"Zoom :",w.a.createElement(Tr,{min:1e-8,max:.9,defaultValue:0,step:1e-5,handle:ea,onChange:this.changeConstant})),w.a.createElement("div",{style:t},"Animation on?",w.a.createElement(Vr.a,{id:"Animation",color:"#884A88",size:"2",checked:this.state.checked,onChange:this.handleCheckboxChange})),w.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&Hr(n.prototype,r),a&&Hr(n,a),t}(x.Component);function na(e){return(na="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ra(e){return(ra="function"==typeof Symbol&&"symbol"===na(Symbol.iterator)?function(e){return na(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":na(e)})(e)}function aa(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function oa(e){return(oa=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ia(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function la(e,t){return(la=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ua(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function sa(){return(sa=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ca(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}Zr(ta,"propTypes",{}),Zr(ta,"defaultProps",{});var fa=1,pa=Tr.Handle,da=function(e){var t=e.value,n=e.dragging,r=e.index,a=ca(e,["value","dragging","index"]);return w.a.createElement(Sr,{prefixCls:"rc-slider-tooltip",overlay:t,visible:n,placement:"top",key:r},w.a.createElement(pa,sa({value:t},a)))},ha=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==ra(t)&&"function"!=typeof t?ia(e):t}(this,oa(t).call(this,e)),ua(ia(n),"handleCheckboxChange",(function(e){n.setState({checked:e}),e?n.init():n.draw()})),ua(ia(n),"changeConstant",(function(e){n.setState({constant:e}),n.state.checked||n.draw()})),ua(ia(n),"changeParameter",(function(e){n.setState({parameter:e}),n.state.checked||n.draw()})),ua(ia(n),"draw",(function(){try{var e=n.webGLCanvas.getContext("webgl");if(!e)throw"x"}catch(e){throw"Your web browser does not support WebGL!"}e.clearColor(Math.random(.2),Math.random(.2),Math.random(.2),.5),e.frontFace(e.CCW),e.enable(e.CULL_FACE),e.cullFace(e.BACK);var t=e.createShader(e.VERTEX_SHADER);e.shaderSource(t,"attribute vec3 pos;attribute vec4 col;attribute float c;varying vec4 color;void main(){color = col;gl_Position = vec4(c * pos, 1);}"),e.compileShader(t);var r=e.createShader(e.FRAGMENT_SHADER);e.shaderSource(r,"precision mediump float;varying vec4 color;void main() {gl_FragColor = color;}"),e.compileShader(r);var a,o,i,l=e.createProgram();e.attachShader(l,t),e.attachShader(l,r),e.bindAttribLocation(l,0,"pos"),e.linkProgram(l),e.useProgram(l);var u=n.createVertexData(a,o,i);a=u.vertices,o=u.indicesLines,i=u.indicesTris;var s=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,s),e.bufferData(e.ARRAY_BUFFER,a,e.STATIC_DRAW);var c=e.getAttribLocation(l,"pos");e.vertexAttribPointer(c,3,e.FLOAT,!1,0,0),e.enableVertexAttribArray(c);var f=e.getAttribLocation(l,"col"),p=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,p),e.bufferData(e.ELEMENT_ARRAY_BUFFER,o,e.STATIC_DRAW),p.numberOfElements=o.length,e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null);var d=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,d),e.bufferData(e.ELEMENT_ARRAY_BUFFER,i,e.STATIC_DRAW),d.numberOfElements=i.length,e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),e.clear(e.COLOR_BUFFER_BIT);var h=e.getAttribLocation(l,"c");e.vertexAttrib1f(h,n.state.constant),e.vertexAttrib4f(f,Math.random(.5),Math.random(.5),Math.random(.5),1),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,d),e.drawElements(e.TRIANGLES,d.numberOfElements,e.UNSIGNED_SHORT,0),e.vertexAttrib4f(f,Math.random(.5),Math.random(.5),Math.random(.5),1),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,p),e.drawElements(e.LINES,p.numberOfElements,e.UNSIGNED_SHORT,0)})),ua(ia(n),"createVertexData",(function(e,t,r){var a=100,o=100;e=new Float32Array(30603),t=new Uint16Array(4e4),r=new Uint16Array(6e4);for(var i=0,l=0,u=0,s=-Math.PI;u<=a;u++,s+=.1)for(var c=0,f=Math.PI;c<=o;c++,f+=.1){var p=s,d=f,h=101*u+c,m=2*Math.sin(3*p)/(2+Math.cos(d*n.state.parameter)),v=2*(Math.sin(p)+2*Math.sin(2*p*n.state.parameter))/(2+Math.cos(d*n.state.parameter+2*Math.PI/3)),y=(Math.cos(p)-2*Math.cos(2*p))*(2+Math.cos(d))*(2+Math.cos(d+2*Math.PI))/4;e[3*h]=m,e[3*h+1]=v,e[3*h+2]=y,c>0&&u>0&&(t[i++]=h-1,t[i++]=h),c>0&&u>0&&(t[i++]=h-101,t[i++]=h),c>0&&u>0&&(r[l++]=h,r[l++]=h-1,r[l++]=h-101,r[l++]=h-1,r[l++]=h-101-1,r[l++]=h-101)}return{vertices:e,indicesLines:t,indicesTris:r}})),ua(ia(n),"myLoop",(function(){setTimeout((function(){n.draw(),n.changeParameter(n.state.parameter+.001),n.changeConstant(n.state.constant-.01),fa++,n.state.checked?fa<1e5&&n.myLoop():fa=0}),100)})),ua(ia(n),"init",(function(){try{n.myLoop()}catch(e){alert("Error: "+e)}})),n.state={constant:1,parameter:0,checked:!0},n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&la(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.init()}},{key:"render",value:function(){var e=this,t={width:400,margin:10};return w.a.createElement("div",null,w.a.createElement("div",null,w.a.createElement("h2",null,"EA4 2 - Tranguloid Trefoil (with extra parameter)")),w.a.createElement("div",{className:"rowC"},w.a.createElement("div",{className:"canvasBox"},w.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"}))),w.a.createElement("div",{style:t},"Zoom :",w.a.createElement(Tr,{min:.001,max:2,defaultValue:1,step:.001,handle:da,onChange:this.changeConstant})),w.a.createElement("div",{style:t},"Parameter :",w.a.createElement(Tr,{min:1e-6,max:4,defaultValue:0,step:1e-6,handle:da,onChange:this.changeParameter})),w.a.createElement("div",{style:t},"Animation on?",w.a.createElement(Vr.a,{id:"Animation",color:"#884A88",size:"2",checked:this.state.checked,onChange:this.handleCheckboxChange})),w.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&aa(n.prototype,r),a&&aa(n,a),t}(x.Component);ua(ha,"propTypes",{}),ua(ha,"defaultProps",{});n(160);var ma=1e-6,va="undefined"!=typeof Float32Array?Float32Array:Array,ya=Math.random;Math.PI;function ba(){var e=new va(9);return va!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[5]=0,e[6]=0,e[7]=0),e[0]=1,e[4]=1,e[8]=1,e}function ga(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}function Ea(e){var t=new va(9);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function xa(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function wa(e,t,n,r,a,o,i,l,u){var s=new va(9);return s[0]=e,s[1]=t,s[2]=n,s[3]=r,s[4]=a,s[5]=o,s[6]=i,s[7]=l,s[8]=u,s}function Sa(e,t,n,r,a,o,i,l,u,s){return e[0]=t,e[1]=n,e[2]=r,e[3]=a,e[4]=o,e[5]=i,e[6]=l,e[7]=u,e[8]=s,e}function Ta(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function Ma(e,t){if(e===t){var n=t[1],r=t[2],a=t[5];e[1]=t[3],e[2]=t[6],e[3]=n,e[5]=t[7],e[6]=r,e[7]=a}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}function ka(e,t){var n=t[0],r=t[1],a=t[2],o=t[3],i=t[4],l=t[5],u=t[6],s=t[7],c=t[8],f=c*i-l*s,p=-c*o+l*u,d=s*o-i*u,h=n*f+r*p+a*d;return h?(h=1/h,e[0]=f*h,e[1]=(-c*r+a*s)*h,e[2]=(l*r-a*i)*h,e[3]=p*h,e[4]=(c*n-a*u)*h,e[5]=(-l*n+a*o)*h,e[6]=d*h,e[7]=(-s*n+r*u)*h,e[8]=(i*n-r*o)*h,e):null}function _a(e,t){var n=t[0],r=t[1],a=t[2],o=t[3],i=t[4],l=t[5],u=t[6],s=t[7],c=t[8];return e[0]=i*c-l*s,e[1]=a*s-r*c,e[2]=r*l-a*i,e[3]=l*u-o*c,e[4]=n*c-a*u,e[5]=a*o-n*l,e[6]=o*s-i*u,e[7]=r*u-n*s,e[8]=n*i-r*o,e}function Ca(e){var t=e[0],n=e[1],r=e[2],a=e[3],o=e[4],i=e[5],l=e[6],u=e[7],s=e[8];return t*(s*o-i*u)+n*(-s*a+i*l)+r*(u*a-o*l)}function Aa(e,t,n){var r=t[0],a=t[1],o=t[2],i=t[3],l=t[4],u=t[5],s=t[6],c=t[7],f=t[8],p=n[0],d=n[1],h=n[2],m=n[3],v=n[4],y=n[5],b=n[6],g=n[7],E=n[8];return e[0]=p*r+d*i+h*s,e[1]=p*a+d*l+h*c,e[2]=p*o+d*u+h*f,e[3]=m*r+v*i+y*s,e[4]=m*a+v*l+y*c,e[5]=m*o+v*u+y*f,e[6]=b*r+g*i+E*s,e[7]=b*a+g*l+E*c,e[8]=b*o+g*u+E*f,e}function Pa(e,t,n){var r=t[0],a=t[1],o=t[2],i=t[3],l=t[4],u=t[5],s=t[6],c=t[7],f=t[8],p=n[0],d=n[1];return e[0]=r,e[1]=a,e[2]=o,e[3]=i,e[4]=l,e[5]=u,e[6]=p*r+d*i+s,e[7]=p*a+d*l+c,e[8]=p*o+d*u+f,e}function Oa(e,t,n){var r=t[0],a=t[1],o=t[2],i=t[3],l=t[4],u=t[5],s=t[6],c=t[7],f=t[8],p=Math.sin(n),d=Math.cos(n);return e[0]=d*r+p*i,e[1]=d*a+p*l,e[2]=d*o+p*u,e[3]=d*i-p*r,e[4]=d*l-p*a,e[5]=d*u-p*o,e[6]=s,e[7]=c,e[8]=f,e}function Ra(e,t,n){var r=n[0],a=n[1];return e[0]=r*t[0],e[1]=r*t[1],e[2]=r*t[2],e[3]=a*t[3],e[4]=a*t[4],e[5]=a*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function La(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=t[0],e[7]=t[1],e[8]=1,e}function Na(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[2]=0,e[3]=-n,e[4]=r,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function Fa(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=t[1],e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function Da(e,t){return e[0]=t[0],e[1]=t[1],e[2]=0,e[3]=t[2],e[4]=t[3],e[5]=0,e[6]=t[4],e[7]=t[5],e[8]=1,e}function Ua(e,t){var n=t[0],r=t[1],a=t[2],o=t[3],i=n+n,l=r+r,u=a+a,s=n*i,c=r*i,f=r*l,p=a*i,d=a*l,h=a*u,m=o*i,v=o*l,y=o*u;return e[0]=1-f-h,e[3]=c-y,e[6]=p+v,e[1]=c+y,e[4]=1-s-h,e[7]=d-m,e[2]=p-v,e[5]=d+m,e[8]=1-s-f,e}function ja(e,t){var n=t[0],r=t[1],a=t[2],o=t[3],i=t[4],l=t[5],u=t[6],s=t[7],c=t[8],f=t[9],p=t[10],d=t[11],h=t[12],m=t[13],v=t[14],y=t[15],b=n*l-r*i,g=n*u-a*i,E=n*s-o*i,x=r*u-a*l,w=r*s-o*l,S=a*s-o*u,T=c*m-f*h,M=c*v-p*h,k=c*y-d*h,_=f*v-p*m,C=f*y-d*m,A=p*y-d*v,P=b*A-g*C+E*_+x*k-w*M+S*T;return P?(P=1/P,e[0]=(l*A-u*C+s*_)*P,e[1]=(u*k-i*A-s*M)*P,e[2]=(i*C-l*k+s*T)*P,e[3]=(a*C-r*A-o*_)*P,e[4]=(n*A-a*k+o*M)*P,e[5]=(r*k-n*C-o*T)*P,e[6]=(m*S-v*w+y*x)*P,e[7]=(v*E-h*S-y*g)*P,e[8]=(h*w-m*E+y*b)*P,e):null}function Ia(e,t,n){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/n,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}function Ba(e){return"mat3("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+", "+e[8]+")"}function za(e){return Math.hypot(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8])}function Va(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e}function Wa(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e}function Ya(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e}function Ha(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e[4]=t[4]+n[4]*r,e[5]=t[5]+n[5]*r,e[6]=t[6]+n[6]*r,e[7]=t[7]+n[7]*r,e[8]=t[8]+n[8]*r,e}function Ka(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]}function Xa(e,t){var n=e[0],r=e[1],a=e[2],o=e[3],i=e[4],l=e[5],u=e[6],s=e[7],c=e[8],f=t[0],p=t[1],d=t[2],h=t[3],m=t[4],v=t[5],y=t[6],b=t[7],g=t[8];return Math.abs(n-f)<=ma*Math.max(1,Math.abs(n),Math.abs(f))&&Math.abs(r-p)<=ma*Math.max(1,Math.abs(r),Math.abs(p))&&Math.abs(a-d)<=ma*Math.max(1,Math.abs(a),Math.abs(d))&&Math.abs(o-h)<=ma*Math.max(1,Math.abs(o),Math.abs(h))&&Math.abs(i-m)<=ma*Math.max(1,Math.abs(i),Math.abs(m))&&Math.abs(l-v)<=ma*Math.max(1,Math.abs(l),Math.abs(v))&&Math.abs(u-y)<=ma*Math.max(1,Math.abs(u),Math.abs(y))&&Math.abs(s-b)<=ma*Math.max(1,Math.abs(s),Math.abs(b))&&Math.abs(c-g)<=ma*Math.max(1,Math.abs(c),Math.abs(g))}Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)});var Ga=Aa,Za=Wa;function qa(){var e=new va(16);return va!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function $a(e){var t=new va(16);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function Qa(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function Ja(e,t,n,r,a,o,i,l,u,s,c,f,p,d,h,m){var v=new va(16);return v[0]=e,v[1]=t,v[2]=n,v[3]=r,v[4]=a,v[5]=o,v[6]=i,v[7]=l,v[8]=u,v[9]=s,v[10]=c,v[11]=f,v[12]=p,v[13]=d,v[14]=h,v[15]=m,v}function eo(e,t,n,r,a,o,i,l,u,s,c,f,p,d,h,m,v){return e[0]=t,e[1]=n,e[2]=r,e[3]=a,e[4]=o,e[5]=i,e[6]=l,e[7]=u,e[8]=s,e[9]=c,e[10]=f,e[11]=p,e[12]=d,e[13]=h,e[14]=m,e[15]=v,e}function to(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function no(e,t){if(e===t){var n=t[1],r=t[2],a=t[3],o=t[6],i=t[7],l=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=n,e[6]=t[9],e[7]=t[13],e[8]=r,e[9]=o,e[11]=t[14],e[12]=a,e[13]=i,e[14]=l}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function ro(e,t){var n=t[0],r=t[1],a=t[2],o=t[3],i=t[4],l=t[5],u=t[6],s=t[7],c=t[8],f=t[9],p=t[10],d=t[11],h=t[12],m=t[13],v=t[14],y=t[15],b=n*l-r*i,g=n*u-a*i,E=n*s-o*i,x=r*u-a*l,w=r*s-o*l,S=a*s-o*u,T=c*m-f*h,M=c*v-p*h,k=c*y-d*h,_=f*v-p*m,C=f*y-d*m,A=p*y-d*v,P=b*A-g*C+E*_+x*k-w*M+S*T;return P?(P=1/P,e[0]=(l*A-u*C+s*_)*P,e[1]=(a*C-r*A-o*_)*P,e[2]=(m*S-v*w+y*x)*P,e[3]=(p*w-f*S-d*x)*P,e[4]=(u*k-i*A-s*M)*P,e[5]=(n*A-a*k+o*M)*P,e[6]=(v*E-h*S-y*g)*P,e[7]=(c*S-p*E+d*g)*P,e[8]=(i*C-l*k+s*T)*P,e[9]=(r*k-n*C-o*T)*P,e[10]=(h*w-m*E+y*b)*P,e[11]=(f*E-c*w-d*b)*P,e[12]=(l*M-i*_-u*T)*P,e[13]=(n*_-r*M+a*T)*P,e[14]=(m*g-h*x-v*b)*P,e[15]=(c*x-f*g+p*b)*P,e):null}function ao(e,t){var n=t[0],r=t[1],a=t[2],o=t[3],i=t[4],l=t[5],u=t[6],s=t[7],c=t[8],f=t[9],p=t[10],d=t[11],h=t[12],m=t[13],v=t[14],y=t[15];return e[0]=l*(p*y-d*v)-f*(u*y-s*v)+m*(u*d-s*p),e[1]=-(r*(p*y-d*v)-f*(a*y-o*v)+m*(a*d-o*p)),e[2]=r*(u*y-s*v)-l*(a*y-o*v)+m*(a*s-o*u),e[3]=-(r*(u*d-s*p)-l*(a*d-o*p)+f*(a*s-o*u)),e[4]=-(i*(p*y-d*v)-c*(u*y-s*v)+h*(u*d-s*p)),e[5]=n*(p*y-d*v)-c*(a*y-o*v)+h*(a*d-o*p),e[6]=-(n*(u*y-s*v)-i*(a*y-o*v)+h*(a*s-o*u)),e[7]=n*(u*d-s*p)-i*(a*d-o*p)+c*(a*s-o*u),e[8]=i*(f*y-d*m)-c*(l*y-s*m)+h*(l*d-s*f),e[9]=-(n*(f*y-d*m)-c*(r*y-o*m)+h*(r*d-o*f)),e[10]=n*(l*y-s*m)-i*(r*y-o*m)+h*(r*s-o*l),e[11]=-(n*(l*d-s*f)-i*(r*d-o*f)+c*(r*s-o*l)),e[12]=-(i*(f*v-p*m)-c*(l*v-u*m)+h*(l*p-u*f)),e[13]=n*(f*v-p*m)-c*(r*v-a*m)+h*(r*p-a*f),e[14]=-(n*(l*v-u*m)-i*(r*v-a*m)+h*(r*u-a*l)),e[15]=n*(l*p-u*f)-i*(r*p-a*f)+c*(r*u-a*l),e}function oo(e){var t=e[0],n=e[1],r=e[2],a=e[3],o=e[4],i=e[5],l=e[6],u=e[7],s=e[8],c=e[9],f=e[10],p=e[11],d=e[12],h=e[13],m=e[14],v=e[15];return(t*i-n*o)*(f*v-p*m)-(t*l-r*o)*(c*v-p*h)+(t*u-a*o)*(c*m-f*h)+(n*l-r*i)*(s*v-p*d)-(n*u-a*i)*(s*m-f*d)+(r*u-a*l)*(s*h-c*d)}function io(e,t,n){var r=t[0],a=t[1],o=t[2],i=t[3],l=t[4],u=t[5],s=t[6],c=t[7],f=t[8],p=t[9],d=t[10],h=t[11],m=t[12],v=t[13],y=t[14],b=t[15],g=n[0],E=n[1],x=n[2],w=n[3];return e[0]=g*r+E*l+x*f+w*m,e[1]=g*a+E*u+x*p+w*v,e[2]=g*o+E*s+x*d+w*y,e[3]=g*i+E*c+x*h+w*b,g=n[4],E=n[5],x=n[6],w=n[7],e[4]=g*r+E*l+x*f+w*m,e[5]=g*a+E*u+x*p+w*v,e[6]=g*o+E*s+x*d+w*y,e[7]=g*i+E*c+x*h+w*b,g=n[8],E=n[9],x=n[10],w=n[11],e[8]=g*r+E*l+x*f+w*m,e[9]=g*a+E*u+x*p+w*v,e[10]=g*o+E*s+x*d+w*y,e[11]=g*i+E*c+x*h+w*b,g=n[12],E=n[13],x=n[14],w=n[15],e[12]=g*r+E*l+x*f+w*m,e[13]=g*a+E*u+x*p+w*v,e[14]=g*o+E*s+x*d+w*y,e[15]=g*i+E*c+x*h+w*b,e}function lo(e,t,n){var r,a,o,i,l,u,s,c,f,p,d,h,m=n[0],v=n[1],y=n[2];return t===e?(e[12]=t[0]*m+t[4]*v+t[8]*y+t[12],e[13]=t[1]*m+t[5]*v+t[9]*y+t[13],e[14]=t[2]*m+t[6]*v+t[10]*y+t[14],e[15]=t[3]*m+t[7]*v+t[11]*y+t[15]):(r=t[0],a=t[1],o=t[2],i=t[3],l=t[4],u=t[5],s=t[6],c=t[7],f=t[8],p=t[9],d=t[10],h=t[11],e[0]=r,e[1]=a,e[2]=o,e[3]=i,e[4]=l,e[5]=u,e[6]=s,e[7]=c,e[8]=f,e[9]=p,e[10]=d,e[11]=h,e[12]=r*m+l*v+f*y+t[12],e[13]=a*m+u*v+p*y+t[13],e[14]=o*m+s*v+d*y+t[14],e[15]=i*m+c*v+h*y+t[15]),e}function uo(e,t,n){var r=n[0],a=n[1],o=n[2];return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*a,e[5]=t[5]*a,e[6]=t[6]*a,e[7]=t[7]*a,e[8]=t[8]*o,e[9]=t[9]*o,e[10]=t[10]*o,e[11]=t[11]*o,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function so(e,t,n,r){var a,o,i,l,u,s,c,f,p,d,h,m,v,y,b,g,E,x,w,S,T,M,k,_,C=r[0],A=r[1],P=r[2],O=Math.hypot(C,A,P);return O<ma?null:(C*=O=1/O,A*=O,P*=O,a=Math.sin(n),i=1-(o=Math.cos(n)),l=t[0],u=t[1],s=t[2],c=t[3],f=t[4],p=t[5],d=t[6],h=t[7],m=t[8],v=t[9],y=t[10],b=t[11],g=C*C*i+o,E=A*C*i+P*a,x=P*C*i-A*a,w=C*A*i-P*a,S=A*A*i+o,T=P*A*i+C*a,M=C*P*i+A*a,k=A*P*i-C*a,_=P*P*i+o,e[0]=l*g+f*E+m*x,e[1]=u*g+p*E+v*x,e[2]=s*g+d*E+y*x,e[3]=c*g+h*E+b*x,e[4]=l*w+f*S+m*T,e[5]=u*w+p*S+v*T,e[6]=s*w+d*S+y*T,e[7]=c*w+h*S+b*T,e[8]=l*M+f*k+m*_,e[9]=u*M+p*k+v*_,e[10]=s*M+d*k+y*_,e[11]=c*M+h*k+b*_,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}function co(e,t,n){var r=Math.sin(n),a=Math.cos(n),o=t[4],i=t[5],l=t[6],u=t[7],s=t[8],c=t[9],f=t[10],p=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=o*a+s*r,e[5]=i*a+c*r,e[6]=l*a+f*r,e[7]=u*a+p*r,e[8]=s*a-o*r,e[9]=c*a-i*r,e[10]=f*a-l*r,e[11]=p*a-u*r,e}function fo(e,t,n){var r=Math.sin(n),a=Math.cos(n),o=t[0],i=t[1],l=t[2],u=t[3],s=t[8],c=t[9],f=t[10],p=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=o*a-s*r,e[1]=i*a-c*r,e[2]=l*a-f*r,e[3]=u*a-p*r,e[8]=o*r+s*a,e[9]=i*r+c*a,e[10]=l*r+f*a,e[11]=u*r+p*a,e}function po(e,t,n){var r=Math.sin(n),a=Math.cos(n),o=t[0],i=t[1],l=t[2],u=t[3],s=t[4],c=t[5],f=t[6],p=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=o*a+s*r,e[1]=i*a+c*r,e[2]=l*a+f*r,e[3]=u*a+p*r,e[4]=s*a-o*r,e[5]=c*a-i*r,e[6]=f*a-l*r,e[7]=p*a-u*r,e}function ho(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}function mo(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function vo(e,t,n){var r,a,o,i=n[0],l=n[1],u=n[2],s=Math.hypot(i,l,u);return s<ma?null:(i*=s=1/s,l*=s,u*=s,r=Math.sin(t),o=1-(a=Math.cos(t)),e[0]=i*i*o+a,e[1]=l*i*o+u*r,e[2]=u*i*o-l*r,e[3]=0,e[4]=i*l*o-u*r,e[5]=l*l*o+a,e[6]=u*l*o+i*r,e[7]=0,e[8]=i*u*o+l*r,e[9]=l*u*o-i*r,e[10]=u*u*o+a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e)}function yo(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=r,e[6]=n,e[7]=0,e[8]=0,e[9]=-n,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function bo(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=0,e[2]=-n,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=n,e[9]=0,e[10]=r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function go(e,t){var n=Math.sin(t),r=Math.cos(t);return e[0]=r,e[1]=n,e[2]=0,e[3]=0,e[4]=-n,e[5]=r,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function Eo(e,t,n){var r=t[0],a=t[1],o=t[2],i=t[3],l=r+r,u=a+a,s=o+o,c=r*l,f=r*u,p=r*s,d=a*u,h=a*s,m=o*s,v=i*l,y=i*u,b=i*s;return e[0]=1-(d+m),e[1]=f+b,e[2]=p-y,e[3]=0,e[4]=f-b,e[5]=1-(c+m),e[6]=h+v,e[7]=0,e[8]=p+y,e[9]=h-v,e[10]=1-(c+d),e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}function xo(e,t){var n=new va(3),r=-t[0],a=-t[1],o=-t[2],i=t[3],l=t[4],u=t[5],s=t[6],c=t[7],f=r*r+a*a+o*o+i*i;return f>0?(n[0]=2*(l*i+c*r+u*o-s*a)/f,n[1]=2*(u*i+c*a+s*r-l*o)/f,n[2]=2*(s*i+c*o+l*a-u*r)/f):(n[0]=2*(l*i+c*r+u*o-s*a),n[1]=2*(u*i+c*a+s*r-l*o),n[2]=2*(s*i+c*o+l*a-u*r)),Eo(e,t,n),e}function wo(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function So(e,t){var n=t[0],r=t[1],a=t[2],o=t[4],i=t[5],l=t[6],u=t[8],s=t[9],c=t[10];return e[0]=Math.hypot(n,r,a),e[1]=Math.hypot(o,i,l),e[2]=Math.hypot(u,s,c),e}function To(e,t){var n=new va(3);So(n,t);var r=1/n[0],a=1/n[1],o=1/n[2],i=t[0]*r,l=t[1]*a,u=t[2]*o,s=t[4]*r,c=t[5]*a,f=t[6]*o,p=t[8]*r,d=t[9]*a,h=t[10]*o,m=i+c+h,v=0;return m>0?(v=2*Math.sqrt(m+1),e[3]=.25*v,e[0]=(f-d)/v,e[1]=(p-u)/v,e[2]=(l-s)/v):i>c&&i>h?(v=2*Math.sqrt(1+i-c-h),e[3]=(f-d)/v,e[0]=.25*v,e[1]=(l+s)/v,e[2]=(p+u)/v):c>h?(v=2*Math.sqrt(1+c-i-h),e[3]=(p-u)/v,e[0]=(l+s)/v,e[1]=.25*v,e[2]=(f+d)/v):(v=2*Math.sqrt(1+h-i-c),e[3]=(l-s)/v,e[0]=(p+u)/v,e[1]=(f+d)/v,e[2]=.25*v),e}function Mo(e,t,n,r){var a=t[0],o=t[1],i=t[2],l=t[3],u=a+a,s=o+o,c=i+i,f=a*u,p=a*s,d=a*c,h=o*s,m=o*c,v=i*c,y=l*u,b=l*s,g=l*c,E=r[0],x=r[1],w=r[2];return e[0]=(1-(h+v))*E,e[1]=(p+g)*E,e[2]=(d-b)*E,e[3]=0,e[4]=(p-g)*x,e[5]=(1-(f+v))*x,e[6]=(m+y)*x,e[7]=0,e[8]=(d+b)*w,e[9]=(m-y)*w,e[10]=(1-(f+h))*w,e[11]=0,e[12]=n[0],e[13]=n[1],e[14]=n[2],e[15]=1,e}function ko(e,t,n,r,a){var o=t[0],i=t[1],l=t[2],u=t[3],s=o+o,c=i+i,f=l+l,p=o*s,d=o*c,h=o*f,m=i*c,v=i*f,y=l*f,b=u*s,g=u*c,E=u*f,x=r[0],w=r[1],S=r[2],T=a[0],M=a[1],k=a[2],_=(1-(m+y))*x,C=(d+E)*x,A=(h-g)*x,P=(d-E)*w,O=(1-(p+y))*w,R=(v+b)*w,L=(h+g)*S,N=(v-b)*S,F=(1-(p+m))*S;return e[0]=_,e[1]=C,e[2]=A,e[3]=0,e[4]=P,e[5]=O,e[6]=R,e[7]=0,e[8]=L,e[9]=N,e[10]=F,e[11]=0,e[12]=n[0]+T-(_*T+P*M+L*k),e[13]=n[1]+M-(C*T+O*M+N*k),e[14]=n[2]+k-(A*T+R*M+F*k),e[15]=1,e}function _o(e,t){var n=t[0],r=t[1],a=t[2],o=t[3],i=n+n,l=r+r,u=a+a,s=n*i,c=r*i,f=r*l,p=a*i,d=a*l,h=a*u,m=o*i,v=o*l,y=o*u;return e[0]=1-f-h,e[1]=c+y,e[2]=p-v,e[3]=0,e[4]=c-y,e[5]=1-s-h,e[6]=d+m,e[7]=0,e[8]=p+v,e[9]=d-m,e[10]=1-s-f,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function Co(e,t,n,r,a,o,i){var l=1/(n-t),u=1/(a-r),s=1/(o-i);return e[0]=2*o*l,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=2*o*u,e[6]=0,e[7]=0,e[8]=(n+t)*l,e[9]=(a+r)*u,e[10]=(i+o)*s,e[11]=-1,e[12]=0,e[13]=0,e[14]=i*o*2*s,e[15]=0,e}function Ao(e,t,n,r,a){var o,i=1/Math.tan(t/2);return e[0]=i/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=a&&a!==1/0?(o=1/(r-a),e[10]=(a+r)*o,e[14]=2*a*r*o):(e[10]=-1,e[14]=-2*r),e}function Po(e,t,n,r){var a=Math.tan(t.upDegrees*Math.PI/180),o=Math.tan(t.downDegrees*Math.PI/180),i=Math.tan(t.leftDegrees*Math.PI/180),l=Math.tan(t.rightDegrees*Math.PI/180),u=2/(i+l),s=2/(a+o);return e[0]=u,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=0,e[7]=0,e[8]=-(i-l)*u*.5,e[9]=(a-o)*s*.5,e[10]=r/(n-r),e[11]=-1,e[12]=0,e[13]=0,e[14]=r*n/(n-r),e[15]=0,e}function Oo(e,t,n,r,a,o,i){var l=1/(t-n),u=1/(r-a),s=1/(o-i);return e[0]=-2*l,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*u,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*s,e[11]=0,e[12]=(t+n)*l,e[13]=(a+r)*u,e[14]=(i+o)*s,e[15]=1,e}function Ro(e,t,n,r){var a,o,i,l,u,s,c,f,p,d,h=t[0],m=t[1],v=t[2],y=r[0],b=r[1],g=r[2],E=n[0],x=n[1],w=n[2];return Math.abs(h-E)<ma&&Math.abs(m-x)<ma&&Math.abs(v-w)<ma?to(e):(c=h-E,f=m-x,p=v-w,a=b*(p*=d=1/Math.hypot(c,f,p))-g*(f*=d),o=g*(c*=d)-y*p,i=y*f-b*c,(d=Math.hypot(a,o,i))?(a*=d=1/d,o*=d,i*=d):(a=0,o=0,i=0),l=f*i-p*o,u=p*a-c*i,s=c*o-f*a,(d=Math.hypot(l,u,s))?(l*=d=1/d,u*=d,s*=d):(l=0,u=0,s=0),e[0]=a,e[1]=l,e[2]=c,e[3]=0,e[4]=o,e[5]=u,e[6]=f,e[7]=0,e[8]=i,e[9]=s,e[10]=p,e[11]=0,e[12]=-(a*h+o*m+i*v),e[13]=-(l*h+u*m+s*v),e[14]=-(c*h+f*m+p*v),e[15]=1,e)}function Lo(e,t,n,r){var a=t[0],o=t[1],i=t[2],l=r[0],u=r[1],s=r[2],c=a-n[0],f=o-n[1],p=i-n[2],d=c*c+f*f+p*p;d>0&&(c*=d=1/Math.sqrt(d),f*=d,p*=d);var h=u*p-s*f,m=s*c-l*p,v=l*f-u*c;return(d=h*h+m*m+v*v)>0&&(h*=d=1/Math.sqrt(d),m*=d,v*=d),e[0]=h,e[1]=m,e[2]=v,e[3]=0,e[4]=f*v-p*m,e[5]=p*h-c*v,e[6]=c*m-f*h,e[7]=0,e[8]=c,e[9]=f,e[10]=p,e[11]=0,e[12]=a,e[13]=o,e[14]=i,e[15]=1,e}function No(e){return"mat4("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+", "+e[8]+", "+e[9]+", "+e[10]+", "+e[11]+", "+e[12]+", "+e[13]+", "+e[14]+", "+e[15]+")"}function Fo(e){return Math.hypot(e[0],e[1],e[3],e[4],e[5],e[6],e[7],e[8],e[9],e[10],e[11],e[12],e[13],e[14],e[15])}function Do(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e[4]=t[4]+n[4],e[5]=t[5]+n[5],e[6]=t[6]+n[6],e[7]=t[7]+n[7],e[8]=t[8]+n[8],e[9]=t[9]+n[9],e[10]=t[10]+n[10],e[11]=t[11]+n[11],e[12]=t[12]+n[12],e[13]=t[13]+n[13],e[14]=t[14]+n[14],e[15]=t[15]+n[15],e}function Uo(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e[4]=t[4]-n[4],e[5]=t[5]-n[5],e[6]=t[6]-n[6],e[7]=t[7]-n[7],e[8]=t[8]-n[8],e[9]=t[9]-n[9],e[10]=t[10]-n[10],e[11]=t[11]-n[11],e[12]=t[12]-n[12],e[13]=t[13]-n[13],e[14]=t[14]-n[14],e[15]=t[15]-n[15],e}function jo(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*n,e[9]=t[9]*n,e[10]=t[10]*n,e[11]=t[11]*n,e[12]=t[12]*n,e[13]=t[13]*n,e[14]=t[14]*n,e[15]=t[15]*n,e}function Io(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e[4]=t[4]+n[4]*r,e[5]=t[5]+n[5]*r,e[6]=t[6]+n[6]*r,e[7]=t[7]+n[7]*r,e[8]=t[8]+n[8]*r,e[9]=t[9]+n[9]*r,e[10]=t[10]+n[10]*r,e[11]=t[11]+n[11]*r,e[12]=t[12]+n[12]*r,e[13]=t[13]+n[13]*r,e[14]=t[14]+n[14]*r,e[15]=t[15]+n[15]*r,e}function Bo(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]}function zo(e,t){var n=e[0],r=e[1],a=e[2],o=e[3],i=e[4],l=e[5],u=e[6],s=e[7],c=e[8],f=e[9],p=e[10],d=e[11],h=e[12],m=e[13],v=e[14],y=e[15],b=t[0],g=t[1],E=t[2],x=t[3],w=t[4],S=t[5],T=t[6],M=t[7],k=t[8],_=t[9],C=t[10],A=t[11],P=t[12],O=t[13],R=t[14],L=t[15];return Math.abs(n-b)<=ma*Math.max(1,Math.abs(n),Math.abs(b))&&Math.abs(r-g)<=ma*Math.max(1,Math.abs(r),Math.abs(g))&&Math.abs(a-E)<=ma*Math.max(1,Math.abs(a),Math.abs(E))&&Math.abs(o-x)<=ma*Math.max(1,Math.abs(o),Math.abs(x))&&Math.abs(i-w)<=ma*Math.max(1,Math.abs(i),Math.abs(w))&&Math.abs(l-S)<=ma*Math.max(1,Math.abs(l),Math.abs(S))&&Math.abs(u-T)<=ma*Math.max(1,Math.abs(u),Math.abs(T))&&Math.abs(s-M)<=ma*Math.max(1,Math.abs(s),Math.abs(M))&&Math.abs(c-k)<=ma*Math.max(1,Math.abs(c),Math.abs(k))&&Math.abs(f-_)<=ma*Math.max(1,Math.abs(f),Math.abs(_))&&Math.abs(p-C)<=ma*Math.max(1,Math.abs(p),Math.abs(C))&&Math.abs(d-A)<=ma*Math.max(1,Math.abs(d),Math.abs(A))&&Math.abs(h-P)<=ma*Math.max(1,Math.abs(h),Math.abs(P))&&Math.abs(m-O)<=ma*Math.max(1,Math.abs(m),Math.abs(O))&&Math.abs(v-R)<=ma*Math.max(1,Math.abs(v),Math.abs(R))&&Math.abs(y-L)<=ma*Math.max(1,Math.abs(y),Math.abs(L))}var Vo=io,Wo=Uo;function Yo(){var e=new va(3);return va!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function Ho(e){var t=new va(3);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function Ko(e){var t=e[0],n=e[1],r=e[2];return Math.hypot(t,n,r)}function Xo(e,t,n){var r=new va(3);return r[0]=e,r[1]=t,r[2]=n,r}function Go(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function Zo(e,t,n,r){return e[0]=t,e[1]=n,e[2]=r,e}function qo(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e}function $o(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e}function Qo(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e}function Jo(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e}function ei(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e}function ti(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e}function ni(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e}function ri(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e}function ai(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e}function oi(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e}function ii(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e}function li(e,t){var n=t[0]-e[0],r=t[1]-e[1],a=t[2]-e[2];return Math.hypot(n,r,a)}function ui(e,t){var n=t[0]-e[0],r=t[1]-e[1],a=t[2]-e[2];return n*n+r*r+a*a}function si(e){var t=e[0],n=e[1],r=e[2];return t*t+n*n+r*r}function ci(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}function fi(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}function pi(e,t){var n=t[0],r=t[1],a=t[2],o=n*n+r*r+a*a;return o>0&&(o=1/Math.sqrt(o)),e[0]=t[0]*o,e[1]=t[1]*o,e[2]=t[2]*o,e}function di(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function hi(e,t,n){var r=t[0],a=t[1],o=t[2],i=n[0],l=n[1],u=n[2];return e[0]=a*u-o*l,e[1]=o*i-r*u,e[2]=r*l-a*i,e}function mi(e,t,n,r){var a=t[0],o=t[1],i=t[2];return e[0]=a+r*(n[0]-a),e[1]=o+r*(n[1]-o),e[2]=i+r*(n[2]-i),e}function vi(e,t,n,r,a,o){var i=o*o,l=i*(2*o-3)+1,u=i*(o-2)+o,s=i*(o-1),c=i*(3-2*o);return e[0]=t[0]*l+n[0]*u+r[0]*s+a[0]*c,e[1]=t[1]*l+n[1]*u+r[1]*s+a[1]*c,e[2]=t[2]*l+n[2]*u+r[2]*s+a[2]*c,e}function yi(e,t,n,r,a,o){var i=1-o,l=i*i,u=o*o,s=l*i,c=3*o*l,f=3*u*i,p=u*o;return e[0]=t[0]*s+n[0]*c+r[0]*f+a[0]*p,e[1]=t[1]*s+n[1]*c+r[1]*f+a[1]*p,e[2]=t[2]*s+n[2]*c+r[2]*f+a[2]*p,e}function bi(e,t){t=t||1;var n=2*ya()*Math.PI,r=2*ya()-1,a=Math.sqrt(1-r*r)*t;return e[0]=Math.cos(n)*a,e[1]=Math.sin(n)*a,e[2]=r*t,e}function gi(e,t,n){var r=t[0],a=t[1],o=t[2],i=n[3]*r+n[7]*a+n[11]*o+n[15];return i=i||1,e[0]=(n[0]*r+n[4]*a+n[8]*o+n[12])/i,e[1]=(n[1]*r+n[5]*a+n[9]*o+n[13])/i,e[2]=(n[2]*r+n[6]*a+n[10]*o+n[14])/i,e}function Ei(e,t,n){var r=t[0],a=t[1],o=t[2];return e[0]=r*n[0]+a*n[3]+o*n[6],e[1]=r*n[1]+a*n[4]+o*n[7],e[2]=r*n[2]+a*n[5]+o*n[8],e}function xi(e,t,n){var r=n[0],a=n[1],o=n[2],i=n[3],l=t[0],u=t[1],s=t[2],c=a*s-o*u,f=o*l-r*s,p=r*u-a*l,d=a*p-o*f,h=o*c-r*p,m=r*f-a*c,v=2*i;return c*=v,f*=v,p*=v,d*=2,h*=2,m*=2,e[0]=l+c+d,e[1]=u+f+h,e[2]=s+p+m,e}function wi(e,t,n,r){var a=[],o=[];return a[0]=t[0]-n[0],a[1]=t[1]-n[1],a[2]=t[2]-n[2],o[0]=a[0],o[1]=a[1]*Math.cos(r)-a[2]*Math.sin(r),o[2]=a[1]*Math.sin(r)+a[2]*Math.cos(r),e[0]=o[0]+n[0],e[1]=o[1]+n[1],e[2]=o[2]+n[2],e}function Si(e,t,n,r){var a=[],o=[];return a[0]=t[0]-n[0],a[1]=t[1]-n[1],a[2]=t[2]-n[2],o[0]=a[2]*Math.sin(r)+a[0]*Math.cos(r),o[1]=a[1],o[2]=a[2]*Math.cos(r)-a[0]*Math.sin(r),e[0]=o[0]+n[0],e[1]=o[1]+n[1],e[2]=o[2]+n[2],e}function Ti(e,t,n,r){var a=[],o=[];return a[0]=t[0]-n[0],a[1]=t[1]-n[1],a[2]=t[2]-n[2],o[0]=a[0]*Math.cos(r)-a[1]*Math.sin(r),o[1]=a[0]*Math.sin(r)+a[1]*Math.cos(r),o[2]=a[2],e[0]=o[0]+n[0],e[1]=o[1]+n[1],e[2]=o[2]+n[2],e}function Mi(e,t){var n=Xo(e[0],e[1],e[2]),r=Xo(t[0],t[1],t[2]);pi(n,n),pi(r,r);var a=di(n,r);return a>1?0:a<-1?Math.PI:Math.acos(a)}function ki(e){return e[0]=0,e[1]=0,e[2]=0,e}function _i(e){return"vec3("+e[0]+", "+e[1]+", "+e[2]+")"}function Ci(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}function Ai(e,t){var n=e[0],r=e[1],a=e[2],o=t[0],i=t[1],l=t[2];return Math.abs(n-o)<=ma*Math.max(1,Math.abs(n),Math.abs(o))&&Math.abs(r-i)<=ma*Math.max(1,Math.abs(r),Math.abs(i))&&Math.abs(a-l)<=ma*Math.max(1,Math.abs(a),Math.abs(l))}var Pi,Oi=$o,Ri=Qo,Li=Jo,Ni=li,Fi=ui,Di=Ko,Ui=si,ji=(Pi=Yo(),function(e,t,n,r,a,o){var i,l;for(t||(t=3),n||(n=0),l=r?Math.min(r*t+n,e.length):e.length,i=n;i<l;i+=t)Pi[0]=e[i],Pi[1]=e[i+1],Pi[2]=e[i+2],a(Pi,Pi,o),e[i]=Pi[0],e[i+1]=Pi[1],e[i+2]=Pi[2];return e});function Ii(){var e=new va(4);return va!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0,e[3]=0),e}function Bi(e){var t=new va(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function zi(e,t,n,r){var a=new va(4);return a[0]=e,a[1]=t,a[2]=n,a[3]=r,a}function Vi(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function Wi(e,t,n,r,a){return e[0]=t,e[1]=n,e[2]=r,e[3]=a,e}function Yi(e,t,n){return e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2],e[3]=t[3]+n[3],e}function Hi(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e[3]=t[3]-n[3],e}function Ki(e,t,n){return e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2],e[3]=t[3]*n[3],e}function Xi(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e[3]=t[3]/n[3],e}function Gi(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e}function Zi(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e}function qi(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e[3]=Math.min(t[3],n[3]),e}function $i(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e[3]=Math.max(t[3],n[3]),e}function Qi(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e}function Ji(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e}function el(e,t,n,r){return e[0]=t[0]+n[0]*r,e[1]=t[1]+n[1]*r,e[2]=t[2]+n[2]*r,e[3]=t[3]+n[3]*r,e}function tl(e,t){var n=t[0]-e[0],r=t[1]-e[1],a=t[2]-e[2],o=t[3]-e[3];return Math.hypot(n,r,a,o)}function nl(e,t){var n=t[0]-e[0],r=t[1]-e[1],a=t[2]-e[2],o=t[3]-e[3];return n*n+r*r+a*a+o*o}function rl(e){var t=e[0],n=e[1],r=e[2],a=e[3];return Math.hypot(t,n,r,a)}function al(e){var t=e[0],n=e[1],r=e[2],a=e[3];return t*t+n*n+r*r+a*a}function ol(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e}function il(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}function ll(e,t){var n=t[0],r=t[1],a=t[2],o=t[3],i=n*n+r*r+a*a+o*o;return i>0&&(i=1/Math.sqrt(i)),e[0]=n*i,e[1]=r*i,e[2]=a*i,e[3]=o*i,e}function ul(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function sl(e,t,n,r){var a=n[0]*r[1]-n[1]*r[0],o=n[0]*r[2]-n[2]*r[0],i=n[0]*r[3]-n[3]*r[0],l=n[1]*r[2]-n[2]*r[1],u=n[1]*r[3]-n[3]*r[1],s=n[2]*r[3]-n[3]*r[2],c=t[0],f=t[1],p=t[2],d=t[3];return e[0]=f*s-p*u+d*l,e[1]=-c*s+p*i-d*o,e[2]=c*u-f*i+d*a,e[3]=-c*l+f*o-p*a,e}function cl(e,t,n,r){var a=t[0],o=t[1],i=t[2],l=t[3];return e[0]=a+r*(n[0]-a),e[1]=o+r*(n[1]-o),e[2]=i+r*(n[2]-i),e[3]=l+r*(n[3]-l),e}function fl(e,t){var n,r,a,o,i,l;t=t||1;do{i=(n=2*ya()-1)*n+(r=2*ya()-1)*r}while(i>=1);do{l=(a=2*ya()-1)*a+(o=2*ya()-1)*o}while(l>=1);var u=Math.sqrt((1-i)/l);return e[0]=t*n,e[1]=t*r,e[2]=t*a*u,e[3]=t*o*u,e}function pl(e,t,n){var r=t[0],a=t[1],o=t[2],i=t[3];return e[0]=n[0]*r+n[4]*a+n[8]*o+n[12]*i,e[1]=n[1]*r+n[5]*a+n[9]*o+n[13]*i,e[2]=n[2]*r+n[6]*a+n[10]*o+n[14]*i,e[3]=n[3]*r+n[7]*a+n[11]*o+n[15]*i,e}function dl(e,t,n){var r=t[0],a=t[1],o=t[2],i=n[0],l=n[1],u=n[2],s=n[3],c=s*r+l*o-u*a,f=s*a+u*r-i*o,p=s*o+i*a-l*r,d=-i*r-l*a-u*o;return e[0]=c*s+d*-i+f*-u-p*-l,e[1]=f*s+d*-l+p*-i-c*-u,e[2]=p*s+d*-u+c*-l-f*-i,e[3]=t[3],e}function hl(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e}function ml(e){return"vec4("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"}function vl(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}function yl(e,t){var n=e[0],r=e[1],a=e[2],o=e[3],i=t[0],l=t[1],u=t[2],s=t[3];return Math.abs(n-i)<=ma*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(r-l)<=ma*Math.max(1,Math.abs(r),Math.abs(l))&&Math.abs(a-u)<=ma*Math.max(1,Math.abs(a),Math.abs(u))&&Math.abs(o-s)<=ma*Math.max(1,Math.abs(o),Math.abs(s))}var bl=Hi,gl=Ki,El=Xi,xl=tl,wl=nl,Sl=rl,Tl=al,Ml=function(){var e=Ii();return function(t,n,r,a,o,i){var l,u;for(n||(n=4),r||(r=0),u=a?Math.min(a*n+r,t.length):t.length,l=r;l<u;l+=n)e[0]=t[l],e[1]=t[l+1],e[2]=t[l+2],e[3]=t[l+3],o(e,e,i),t[l]=e[0],t[l+1]=e[1],t[l+2]=e[2],t[l+3]=e[3];return t}}();function kl(){var e=100,t=100;this.vertices=new Float32Array(30603);var n=this.vertices;this.normals=new Float32Array(30603);var r=this.normals;this.indicesLines=new Uint16Array(4e4);var a=this.indicesLines;this.indicesTris=new Uint16Array(6e4);for(var o=this.indicesTris,i=0,l=0,u=0,s=0;u<=e;u++,s+=.1)for(var c=0,f=0;c<=t;c++,f+=.1){var p=101*u+c,d=s*Math.cos(Math.cos(s))*Math.cos(f),h=s*Math.cos(Math.cos(s))*Math.sin(f),m=s*Math.sin(Math.cos(s));n[3*p]=d,n[3*p+1]=h,n[3*p+2]=m;var v=Math.cos(s)*Math.cos(f),y=Math.cos(s)*Math.sin(f),b=Math.sin(s);r[3*p]=v,r[3*p+1]=y,r[3*p+2]=b,c>0&&u>0&&(a[i++]=p-1,a[i++]=p),c>0&&u>0&&(a[i++]=p-101,a[i++]=p),c>0&&u>0&&(o[l++]=p,o[l++]=p-1,o[l++]=p-101,o[l++]=p-1,o[l++]=p-101-1,o[l++]=p-101)}}function _l(){var e=100,t=100;this.vertices=new Float32Array(30603);var n=this.vertices;this.normals=new Float32Array(30603);var r=this.normals;this.indicesLines=new Uint16Array(4e4);var a=this.indicesLines;this.indicesTris=new Uint16Array(6e4);for(var o=this.indicesTris,i=0,l=0,u=0,s=0;u<=e;u++,s+=.1)for(var c=0,f=0;c<=t;c++,f+=.1){var p=101*u+c,d=2*Math.sin(3*s)/(2+Math.cos(f)),h=2*(Math.sin(s)+2*Math.sin(2*s))/(2+Math.cos(f+2*Math.PI/3)),m=(Math.cos(s)-2*Math.cos(2*s))*(2+Math.cos(f))*(2+Math.cos(f+2*Math.PI))/4;n[3*p]=d,n[3*p+1]=h,n[3*p+2]=m;var v=Math.cos(s)*Math.cos(f),y=Math.cos(s)*Math.sin(f),b=Math.sin(s);r[3*p]=v,r[3*p+1]=y,r[3*p+2]=b,c>0&&u>0&&(a[i++]=p-1,a[i++]=p),c>0&&u>0&&(a[i++]=p-101,a[i++]=p),c>0&&u>0&&(o[l++]=p,o[l++]=p-1,o[l++]=p-101,o[l++]=p-1,o[l++]=p-101-1,o[l++]=p-101)}}function Cl(e){return(Cl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Al(e){return(Al="function"==typeof Symbol&&"symbol"===Cl(Symbol.iterator)?function(e){return Cl(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":Cl(e)})(e)}function Pl(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ol(e){return(Ol=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Rl(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ll(e,t){return(Ll=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Nl(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}(0,Tr.createSliderWithTooltip)(Tr.Range),Tr.Handle,Math.PI;var Fl,Dl,Ul=["attribute vec3 aPosition;","attribute vec3 aNormal;","uniform mat4 uPMatrix;","uniform mat4 uMVMatrix;","varying vec4 vColor;","void main()","{","gl_Position = uPMatrix * uMVMatrix * vec4(aPosition, 1.0);","vColor = vec4(aNormal.x, aNormal.y, aNormal.z, 1.0);","vColor = (vColor + 1.0) / 2.0;","}"].join("\n"),jl=["precision mediump float;","varying vec4 vColor;","void main()","{","  gl_FragColor = vColor;","}"].join("\n"),Il=[],Bl={eye:[0,1,4],center:[0,0,0],up:[1,0,0],fovy:60*Math.PI/180,lrtb:4,vMatrix:a.create(),pMatrix:a.create(),projectionType:"ortho",zAngle:0,distance:8},zl=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==Al(t)&&"function"!=typeof t?Rl(e):t}(this,Ol(t).call(this,e)),Nl(Rl(n),"handleKeyDown",(function(e){if(console.log(e+"is down"),"w"===e){console.log("w pressed ! ");var t=n.state.rotationX+.01;t=n.state.cameraEyeX+.1;n.setState({rotationX:t,cameraEyeX:t})}else if("s"===e){console.log("s pressed ! ");t=n.state.rotationX-.01,t=n.state.cameraEyeX-.1;n.setState({rotationX:t,cameraEyeX:t})}else if("a"===e){console.log("a pressed ! ");t=n.state.rotationY-.01,t=n.state.cameraEyeY-.1;n.setState({rotationY:t,cameraEyeY:t})}else if("d"===e){console.log("d pressed ! ");t=n.state.rotationY+.01,t=n.state.cameraEyeY+.1;n.setState({rotationY:t,cameraEyeY:t})}else if("q"===e){console.log("q pressed ! ");t=n.state.rotationZ-.1,t=n.state.cameraEyeZ-.1;n.setState({rotationZ:t,cameraEyeZ:t})}else if("e"===e){console.log("e pressed ! ");t=n.state.rotationZ+.1,t=n.state.cameraEyeZ+.1;n.setState({rotationZ:t,cameraEyeZ:t})}else if("o"===e){console.log("i pressed ! ");t=n.state.zoom+.1;n.setState({zoom:t})}else if("i"===e){console.log("o pressed ! ");t=n.state.zoom-.1;n.setState({zoom:t})}n.renderWegGL()})),Nl(Rl(n),"init",(function(){try{n.initWebGL()}catch(e){alert("Error: "+e)}n.initShaderProgram(),n.initUniforms(),n.initModels(),n.initEventHandler(),n.initPipline(),n.renderWegGL()})),Nl(Rl(n),"initWebGL",(function(){try{if(!(Fl=n.webGLCanvas.getContext("webgl")))throw"x"}catch(e){throw"Your web browser does not support WebGL!"}Fl.viewportWidth=n.webGLCanvas.width,Fl.viewportHeight=n.webGLCanvas.height})),Nl(Rl(n),"initPipline",(function(){Fl.clearColor(.95,.95,.95,1),Fl.frontFace(Fl.CCW),Fl.enable(Fl.CULL_FACE),Fl.cullFace(Fl.BACK),Fl.enable(Fl.DEPTH_TEST),Fl.enable(Fl.POLYGON_OFFSET_FILL),Fl.polygonOffset(.5,0),Fl.viewport(0,0,Fl.viewportWidth,Fl.viewportHeight),Bl.aspect=Fl.viewportWidth/Fl.viewportHeight})),Nl(Rl(n),"initShaderProgram",(function(){var e=n.initShader(Fl.VERTEX_SHADER,"vertexshader"),t=n.initShader(Fl.FRAGMENT_SHADER,"fragmentshader");Dl=Fl.createProgram(),Fl.attachShader(Dl,e),Fl.attachShader(Dl,t),Fl.bindAttribLocation(Dl,0,"aPosition"),Fl.linkProgram(Dl),Fl.useProgram(Dl)})),Nl(Rl(n),"initShader",(function(e,t){var n,r=Fl.createShader(e);return n="vertexshader"==t?Ul:jl,Fl.shaderSource(r,n),Fl.compileShader(r),Fl.getShaderParameter(r,Fl.COMPILE_STATUS)?r:(console.log(t+": "+Fl.getShaderInfoLog(r)),null)})),Nl(Rl(n),"initUniforms",(function(){Dl.pMatrixUniform=Fl.getUniformLocation(Dl,"uPMatrix"),Dl.mvMatrixUniform=Fl.getUniformLocation(Dl,"uMVMatrix")})),Nl(Rl(n),"initModels",(function(){var e="fillwireframe";n.createModel(l,e),n.createModel(u,e)})),Nl(Rl(n),"createModel",(function(e,t){var r={};r.fillstyle=t,n.initDataAndBuffers(r,e),r.mvMatrix=a.create(),Il.push(r)})),Nl(Rl(n),"initDataAndBuffers",(function(e,t){t.createVertexData.apply(e),e.vboPos=Fl.createBuffer(),Fl.bindBuffer(Fl.ARRAY_BUFFER,e.vboPos),Fl.bufferData(Fl.ARRAY_BUFFER,e.vertices,Fl.STATIC_DRAW),Dl.positionAttrib=Fl.getAttribLocation(Dl,"aPosition"),Fl.enableVertexAttribArray(Dl.positionAttrib),e.vboNormal=Fl.createBuffer(),Fl.bindBuffer(Fl.ARRAY_BUFFER,e.vboNormal),Fl.bufferData(Fl.ARRAY_BUFFER,e.normals,Fl.STATIC_DRAW),Dl.normalAttrib=Fl.getAttribLocation(Dl,"aNormal"),Fl.enableVertexAttribArray(Dl.normalAttrib),e.iboLines=Fl.createBuffer(),Fl.bindBuffer(Fl.ELEMENT_ARRAY_BUFFER,e.iboLines),Fl.bufferData(Fl.ELEMENT_ARRAY_BUFFER,e.indicesLines,Fl.STATIC_DRAW),e.iboLines.numberOfElements=e.indicesLines.length,Fl.bindBuffer(Fl.ELEMENT_ARRAY_BUFFER,null),e.iboTris=Fl.createBuffer(),Fl.bindBuffer(Fl.ELEMENT_ARRAY_BUFFER,e.iboTris),Fl.bufferData(Fl.ELEMENT_ARRAY_BUFFER,e.indicesTris,Fl.STATIC_DRAW),e.iboTris.numberOfElements=e.indicesTris.length,Fl.bindBuffer(Fl.ELEMENT_ARRAY_BUFFER,null)})),Nl(Rl(n),"initEventHandler",(function(){window.onkeydown=function(e){var t=e.which?e.which:e.keyCode;switch(String.fromCharCode(t)){case"O":Bl.projectionType="ortho",Bl.lrtb=4}n.renderWegGL()}})),Nl(Rl(n),"calculateCameraOrbit",(function(){Bl.eye[0]=Bl.center[0],Bl.eye[2]=Bl.center[2],Bl.eye[0]+=Bl.distance*Math.sin(Bl.zAngle),Bl.eye[2]+=Bl.distance*Math.cos(Bl.zAngle)})),Nl(Rl(n),"renderWegGL",(function(){Bl.eye=[n.state.cameraEyeX,n.state.cameraEyeY,n.state.cameraEyeZ],Bl.lrtb=n.state.zoom,Fl.clear(Fl.COLOR_BUFFER_BIT|Fl.DEPTH_BUFFER_BIT),n.setProjection(),a.lookAt(Bl.vMatrix,Bl.eye,Bl.center,Bl.up);for(var e=0;e<Il.length;e++)a.copy(Il[e].mvMatrix,Bl.vMatrix),Fl.uniformMatrix4fv(Dl.mvMatrixUniform,!1,Il[e].mvMatrix),n.draw(Il[e])})),Nl(Rl(n),"setProjection",(function(){switch(Bl.projectionType){case"ortho":var e=Bl.lrtb;a.ortho(Bl.pMatrix,-e,e,-e,e,-10,10)}Fl.uniformMatrix4fv(Dl.pMatrixUniform,!1,Bl.pMatrix)})),Nl(Rl(n),"draw",(function(e){Fl.bindBuffer(Fl.ARRAY_BUFFER,e.vboPos),Fl.vertexAttribPointer(Dl.positionAttrib,3,Fl.FLOAT,!1,0,0),Fl.bindBuffer(Fl.ARRAY_BUFFER,e.vboNormal),Fl.vertexAttribPointer(Dl.normalAttrib,3,Fl.FLOAT,!1,0,0),-1!=e.fillstyle.search(/fill/)&&(Fl.enableVertexAttribArray(Dl.normalAttrib),Fl.bindBuffer(Fl.ELEMENT_ARRAY_BUFFER,e.iboTris),Fl.drawElements(Fl.TRIANGLES,e.iboTris.numberOfElements,Fl.UNSIGNED_SHORT,0)),-1!=e.fillstyle.search(/wireframe/)&&(Fl.disableVertexAttribArray(Dl.normalAttrib),Fl.vertexAttrib3f(Dl.normalAttrib,0,0,0),Fl.bindBuffer(Fl.ELEMENT_ARRAY_BUFFER,e.iboLines),Fl.drawElements(Fl.LINES,e.iboLines.numberOfElements,Fl.UNSIGNED_SHORT,0))})),n.state={eventKey:" ",zoom:2,xMin:-3,xMax:3,yMin:-3,yMax:3,rotationX:0,rotationY:0,rotationZ:0,cameraEyeX:0,cameraEyeY:1,cameraEyeZ:4,cameraCenterX:0,cameraCenterY:0,cameraCenterZ:0,cameraUpX:0,cameraUpY:0,cameraUpZ:0},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ll(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.init()}},{key:"render",value:function(){var e=this,t={width:400,margin:10};return w.a.createElement("div",null,w.a.createElement("div",null,w.a.createElement("h2",null,"EA5")),w.a.createElement("div",{className:"rowCEA5"},w.a.createElement("div",{className:"canvasBoxEA5"},w.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"})),w.a.createElement(_.a,{handleKeys:["w","a","s","d","q","e","i","o"],onKeyEvent:function(t,n){return e.handleKeyDown(t)}}),w.a.createElement("div",{className:"sliderBoxEA5"},w.a.createElement("div",{style:t},"Move Camera with W,A,S,D on X and Y axis and with Q,E around Z. Zoom with I,O. The Look At Center is 0,0,0"),w.a.createElement("div",{style:t},"rotationX: ",this.state.rotationX," , cameraEyeX: ",this.state.cameraEyeX),w.a.createElement("div",{style:t},"rotationY: ",this.state.rotationY," , cameraEyeY: ",this.state.cameraEyeY),w.a.createElement("div",{style:t},"rotationZ: ",this.state.rotationZ,", cameraEyeZ: ",this.state.cameraEyeZ),w.a.createElement("div",{style:t},"camera Zoom: ",w.a.createElement("p",null,this.state.zoom)))),w.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&Pl(n.prototype,r),o&&Pl(n,o),t}(x.Component);Nl(zl,"propTypes",{}),Nl(zl,"defaultProps",{});n(162);function Vl(){var e=100,t=100;this.vertices=new Float32Array(30603);var n=this.vertices;this.normals=new Float32Array(30603);var r=this.normals;this.indicesLines=new Uint16Array(4e4);var a=this.indicesLines;this.indicesTris=new Uint16Array(6e4);for(var o=this.indicesTris,i=0,l=0,u=0,s=-10;u<=e;u++,s+=.2)for(var c=0,f=-10;c<=t;c++,f+=.2){var p=101*u+c,d=s,h=f;n[3*p]=d,n[3*p+1]=0,n[3*p+2]=h,r[3*p]=0,r[3*p+1]=1,r[3*p+2]=0,c>0&&u>0&&(a[i++]=p-1,a[i++]=p),c>0&&u>0&&(a[i++]=p-101,a[i++]=p),c>0&&u>0&&(o[l++]=p,o[l++]=p-1,o[l++]=p-101,o[l++]=p-1,o[l++]=p-101-1,o[l++]=p-101)}}function Wl(){var e=32,t=32;this.vertices=new Float32Array(3267);var n=this.vertices;this.normals=new Float32Array(3267);var r=this.normals;this.indicesLines=new Uint16Array(4096);var a=this.indicesLines;this.indicesTris=new Uint16Array(6144);for(var o=this.indicesTris,i=2*Math.PI/e,l=Math.PI/t,u=0,s=0,c=0,f=0;c<=e;c++,f+=i)for(var p=0,d=0;p<=t;p++,d+=l){var h=33*c+p,m=1*Math.sin(d)*Math.cos(f),v=1*Math.sin(d)*Math.sin(f),y=1*Math.cos(d);n[3*h]=m,n[3*h+1]=v,n[3*h+2]=y;var b=Math.sqrt(m*m+v*v+y*y);r[3*h]=m/b,r[3*h+1]=v/b,r[3*h+2]=y/b,p>0&&c>0&&(a[u++]=h-1,a[u++]=h),p>0&&c>0&&(a[u++]=h-33,a[u++]=h),p>0&&c>0&&(o[s++]=h,o[s++]=h-1,o[s++]=h-33,o[s++]=h-1,o[s++]=h-33-1,o[s++]=h-33)}}function Yl(){var e=16,t=32;this.vertices=new Float32Array(1683);var n=this.vertices;this.normals=new Float32Array(1683);var r=this.normals;this.indicesLines=new Uint16Array(2048);var a=this.indicesLines;this.indicesTris=new Uint16Array(3072);for(var o=this.indicesTris,i=2*Math.PI/e,l=2*Math.PI/t,u=0,s=0,c=0,f=0;c<=e;c++,f+=i)for(var p=0,d=0;p<=t;p++,d+=l){var h=33*c+p,m=(.5+.3*Math.cos(f))*Math.cos(d),v=(.5+.3*Math.cos(f))*Math.sin(d),y=.3*Math.sin(f);n[3*h]=m,n[3*h+1]=v,n[3*h+2]=y;var b=Math.cos(f)*Math.cos(d),g=Math.cos(f)*Math.sin(d),E=Math.sin(f);r[3*h]=b,r[3*h+1]=g,r[3*h+2]=E,p>0&&c>0&&(a[u++]=h-1,a[u++]=h),p>0&&c>0&&(a[u++]=h-33,a[u++]=h),p>0&&c>0&&(o[s++]=h,o[s++]=h-1,o[s++]=h-33,o[s++]=h-1,o[s++]=h-33-1,o[s++]=h-33)}}function Hl(e){return(Hl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Kl(e){return(Kl="function"==typeof Symbol&&"symbol"===Hl(Symbol.iterator)?function(e){return Hl(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":Hl(e)})(e)}function Xl(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Gl(e){return(Gl=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Zl(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ql(e,t){return(ql=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function $l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}(0,Tr.createSliderWithTooltip)(Tr.Range),Tr.Handle;var Ql,Jl,eu=1,tu="wireframe",nu="fill",ru=["attribute vec3 aPosition;","attribute vec3 aNormal;","uniform mat4 uPMatrix;","uniform mat4 uMVMatrix;","varying vec4 vColor;","void main()","{","gl_Position = uPMatrix * uMVMatrix * vec4(aPosition, 1.0);","vColor = vec4(aNormal.x, aNormal.y, aNormal.z, 1.0);","vColor = (vColor + 1.0) / 2.0;","}"].join("\n"),au=["precision mediump float;","varying vec4 vColor;","void main()","{","  gl_FragColor = vColor;","}"].join("\n"),ou=[],iu={eye:[.7,.6,1.2],center:[0,0,0],up:[0,1,0],fovy:60*Math.PI/180,lrtb:4,vMatrix:a.create(),pMatrix:a.create(),projectionType:"ortho",zAngle:0,distance:8},lu=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==Kl(t)&&"function"!=typeof t?Zl(e):t}(this,Gl(t).call(this,e)),$l(Zl(n),"myLoop",(function(){setTimeout((function(){n.animateModels(),n.renderWegGL();var e=n.state.angle+n.state.deltaTime;n.setState({angle:e}),++eu<1e5&&n.state.isLoop&&n.myLoop()}),25)})),$l(Zl(n),"handleKeyDown",(function(e){if(n.setState({commandNote:e+" pressed! "+n.state.commandNote}),"w"===e){var t=n.state.cameraEyeX+.1;n.setState({rotationX:t,cameraEyeX:t})}else if("s"===e){t=n.state.cameraEyeX-.1;n.setState({rotationX:t,cameraEyeX:t})}else if("a"===e){t=n.state.cameraEyeY-.1;n.setState({rotationY:t,cameraEyeY:t})}else if("d"===e){t=n.state.cameraEyeY+.1;n.setState({rotationY:t,cameraEyeY:t})}else if("q"===e){t=n.state.rotationZ-.1,t=n.state.cameraEyeZ-.1;n.setState({rotationZ:t,cameraEyeZ:t})}else if("e"===e){t=n.state.rotationZ+.1,t=n.state.cameraEyeZ+.1;n.setState({rotationZ:t,cameraEyeZ:t})}else if("o"===e){t=n.state.zoom+.1;n.setState({zoom:t})}else if("i"===e){t=n.state.zoom-.1;n.setState({zoom:t})}if("1"===e&&null!==n.state.interactiveTorus&&(n.state.interactiveTorus.rotate[0]+=n.state.deltaTime,console.log(n.state.interactiveTorus.rotate[0])),"2"===e&&null!==n.state.interactiveTorus&&(n.state.interactiveTorus.rotate[1]+=n.state.deltaTime),"3"===e&&null!==n.state.interactiveTorus&&(n.state.interactiveTorus.rotate[2]+=n.state.deltaTime),"k"===e){n.setState({isLoop:!1}),n.animateModels();var r=n.state.angle+n.state.deltaTime;n.setState({angle:r})}if("l"===e&&(n.setState({isLoop:!0}),n.myLoop()),"p"===e){var a=!n.state.drawOrbit;n.setState({drawOrbit:a})}n.renderWegGL()})),$l(Zl(n),"init",(function(){try{n.initWebGL(),n.initShaderProgram(),n.initUniforms(),n.initModels(),n.initPipline(),n.myLoop()}catch(e){alert("Error: "+e)}})),$l(Zl(n),"initWebGL",(function(){try{if(!(Ql=n.webGLCanvas.getContext("webgl")))throw"x"}catch(e){throw"Your web browser does not support WebGL!"}Ql.viewportWidth=n.webGLCanvas.width,Ql.viewportHeight=n.webGLCanvas.height})),$l(Zl(n),"animateModels",(function(){var e=Math.cos(n.state.angle)*n.state.radius,t=Math.sin(n.state.angle)*n.state.radius;n.state.interactiveTorus.rotate[0]+=.5*n.state.deltaTime,n.state.interactiveSphere1.translate=[n.state.interactiveSphere1.translate[0]+t,n.state.interactiveSphere1.translate[1]+e,n.state.interactiveSphere1.translate[2]],n.state.angle>6.499&&(n.state.interactiveSphere2.translate=[n.state.interactiveSphere2.translate[0]-t,n.state.interactiveSphere2.translate[1]-e,n.state.interactiveSphere2.translate[2]]),n.state.angle>3.1&&(n.state.interactiveSphere3.translate=[n.state.interactiveSphere3.translate[0],n.state.interactiveSphere3.translate[1]+t,n.state.interactiveSphere3.translate[2]+e]),n.state.angle>9.14&&(n.state.interactiveSphere4.translate=[n.state.interactiveSphere4.translate[0]+t,n.state.interactiveSphere4.translate[1],n.state.interactiveSphere4.translate[2]-e]),n.setState({interactiveSphere1Translate:n.state.interactiveSphere1.translate}),n.setState({interactiveSphere2Translate:n.state.interactiveSphere2.translate}),n.setState({interactiveSphere3Translate:n.state.interactiveSphere3.translate}),n.setState({interactiveSphere4Translate:n.state.interactiveSphere4.translate}),n.state.angle%8&&n.state.drawOrbit&&(n.createModel("sphere",c,tu,n.state.interactiveSphere1.translate,[0,0,0],[.1,.1,.1]),n.createModel("sphere",c,tu,n.state.interactiveSphere2.translate,[0,0,0],[.1,.1,.1]),n.createModel("sphere",c,tu,n.state.interactiveSphere3.translate,[0,0,0],[.1,.1,.1]),n.createModel("sphere",c,tu,n.state.interactiveSphere4.translate,[0,0,0],[.1,.1,.1]))})),$l(Zl(n),"initPipline",(function(){Ql.clearColor(.95,.95,.95,1),Ql.frontFace(Ql.CCW),Ql.enable(Ql.CULL_FACE),Ql.cullFace(Ql.BACK),Ql.enable(Ql.DEPTH_TEST),Ql.enable(Ql.POLYGON_OFFSET_FILL),Ql.polygonOffset(.5,0),Ql.viewport(0,0,Ql.viewportWidth,Ql.viewportHeight),iu.aspect=Ql.viewportWidth/Ql.viewportHeight})),$l(Zl(n),"initShaderProgram",(function(){var e=n.initShader(Ql.VERTEX_SHADER,"vertexshader"),t=n.initShader(Ql.FRAGMENT_SHADER,"fragmentshader");Jl=Ql.createProgram(),Ql.attachShader(Jl,e),Ql.attachShader(Jl,t),Ql.bindAttribLocation(Jl,0,"aPosition"),Ql.linkProgram(Jl),Ql.useProgram(Jl)})),$l(Zl(n),"initShader",(function(e,t){var n,r=Ql.createShader(e);return n="vertexshader"==t?ru:au,Ql.shaderSource(r,n),Ql.compileShader(r),Ql.getShaderParameter(r,Ql.COMPILE_STATUS)?r:(console.log(t+": "+Ql.getShaderInfoLog(r)),null)})),$l(Zl(n),"initUniforms",(function(){Jl.pMatrixUniform=Ql.getUniformLocation(Jl,"uPMatrix"),Jl.mvMatrixUniform=Ql.getUniformLocation(Jl,"uMVMatrix")})),$l(Zl(n),"initModels",(function(){n.createModel("torus",f,nu,[0,0,0],[1.535,0,0],[4,4,4]),n.createModel("plane",s,tu,[0,-.8,0],[0,0,0],[.3,.3,.3]),n.createModel("sphere",c,nu,[.2,-.2,0],[0,0,0],[.15,.15,.15]),n.createModel("sphere",c,nu,[-.2,.2,0],[0,0,0],[.15,.15,.15]),n.createModel("sphere",c,nu,[-.2,-.2,0],[0,0,0],[.15,.15,.15]),n.createModel("sphere",c,nu,[.2,.2,0],[0,0,0],[.15,.15,.15]),n.setState({interactiveTorus:ou[0]}),n.setState({interactiveSphere1:ou[2]}),n.setState({interactiveSphere2:ou[3]}),n.setState({interactiveSphere3:ou[4]}),n.setState({interactiveSphere4:ou[5]})})),$l(Zl(n),"createModel",(function(e,t,r,a,o,i){var l={};l.name=e,l.fillstyle=r,n.initDataAndBuffers(l,t),n.initTransformations(l,a,o,i),ou.push(l)})),$l(Zl(n),"initTransformations",(function(e,t,n,r){e.translate=t,e.rotate=n,e.scale=r,e.mMatrix=a.create(),e.mvMatrix=a.create()})),$l(Zl(n),"initDataAndBuffers",(function(e,t){t.createVertexData.apply(e),e.vboPos=Ql.createBuffer(),Ql.bindBuffer(Ql.ARRAY_BUFFER,e.vboPos),Ql.bufferData(Ql.ARRAY_BUFFER,e.vertices,Ql.STATIC_DRAW),Jl.positionAttrib=Ql.getAttribLocation(Jl,"aPosition"),Ql.enableVertexAttribArray(Jl.positionAttrib),e.vboNormal=Ql.createBuffer(),Ql.bindBuffer(Ql.ARRAY_BUFFER,e.vboNormal),Ql.bufferData(Ql.ARRAY_BUFFER,e.normals,Ql.STATIC_DRAW),Jl.normalAttrib=Ql.getAttribLocation(Jl,"aNormal"),Ql.enableVertexAttribArray(Jl.normalAttrib),e.iboLines=Ql.createBuffer(),Ql.bindBuffer(Ql.ELEMENT_ARRAY_BUFFER,e.iboLines),Ql.bufferData(Ql.ELEMENT_ARRAY_BUFFER,e.indicesLines,Ql.STATIC_DRAW),e.iboLines.numberOfElements=e.indicesLines.length,Ql.bindBuffer(Ql.ELEMENT_ARRAY_BUFFER,null),e.iboTris=Ql.createBuffer(),Ql.bindBuffer(Ql.ELEMENT_ARRAY_BUFFER,e.iboTris),Ql.bufferData(Ql.ELEMENT_ARRAY_BUFFER,e.indicesTris,Ql.STATIC_DRAW),e.iboTris.numberOfElements=e.indicesTris.length,Ql.bindBuffer(Ql.ELEMENT_ARRAY_BUFFER,null)})),$l(Zl(n),"calculateCameraOrbit",(function(){iu.eye[0]=iu.center[0],iu.eye[2]=iu.center[2],iu.eye[0]+=iu.distance*Math.sin(iu.zAngle),iu.eye[2]+=iu.distance*Math.cos(iu.zAngle)})),$l(Zl(n),"renderWegGL",(function(){iu.eye=[n.state.cameraEyeY,n.state.cameraEyeX,n.state.cameraEyeZ],iu.lrtb=n.state.zoom,Ql.clear(Ql.COLOR_BUFFER_BIT|Ql.DEPTH_BUFFER_BIT),n.setProjection(),a.lookAt(iu.vMatrix,iu.eye,iu.center,iu.up);for(var e=0;e<ou.length;e++)n.updateTransformations(ou[e]),Ql.uniformMatrix4fv(Jl.mvMatrixUniform,!1,ou[e].mvMatrix),n.draw(ou[e])})),$l(Zl(n),"updateTransformations",(function(e){var t=e.mMatrix,n=e.mvMatrix;a.identity(t),a.identity(n),a.translate(t,t,e.translate),a.rotateX(t,t,e.rotate[0]),a.rotateY(t,t,e.rotate[1]),a.rotateZ(t,t,e.rotate[2]),a.scale(t,t,e.scale),a.multiply(n,iu.vMatrix,t)})),$l(Zl(n),"setProjection",(function(){switch(iu.projectionType){case"ortho":var e=iu.lrtb;a.ortho(iu.pMatrix,-e,e,-e,e,-20,20)}Ql.uniformMatrix4fv(Jl.pMatrixUniform,!1,iu.pMatrix)})),$l(Zl(n),"draw",(function(e){Ql.bindBuffer(Ql.ARRAY_BUFFER,e.vboPos),Ql.vertexAttribPointer(Jl.positionAttrib,3,Ql.FLOAT,!1,0,0),Ql.bindBuffer(Ql.ARRAY_BUFFER,e.vboNormal),Ql.vertexAttribPointer(Jl.normalAttrib,3,Ql.FLOAT,!1,0,0),-1!=e.fillstyle.search(/fill/)&&(Ql.enableVertexAttribArray(Jl.normalAttrib),Ql.bindBuffer(Ql.ELEMENT_ARRAY_BUFFER,e.iboTris),Ql.drawElements(Ql.TRIANGLES,e.iboTris.numberOfElements,Ql.UNSIGNED_SHORT,0)),-1!=e.fillstyle.search(/wireframe/)&&(Ql.disableVertexAttribArray(Jl.normalAttrib),Ql.vertexAttrib3f(Jl.normalAttrib,0,0,0),Ql.bindBuffer(Ql.ELEMENT_ARRAY_BUFFER,e.iboLines),Ql.drawElements(Ql.LINES,e.iboLines.numberOfElements,Ql.UNSIGNED_SHORT,0))})),n.state={eventKey:" ",zoom:3.6,xMin:-3,xMax:3,yMin:-3,yMax:3,rotationX:0,rotationY:0,rotationZ:0,cameraEyeX:.7,cameraEyeY:.6,cameraEyeZ:1.2,cameraCenterX:0,cameraCenterY:0,cameraCenterZ:0,cameraUpX:0,cameraUpY:0,cameraUpZ:0,angle:0,interactiveSphere1:null,interactiveSphere2:null,interactiveSphere3:null,interactiveSphere4:null,interactiveTorus:null,interactiveSphere1Translate:null,interactiveSphere2Translate:null,interactiveSphere3Translate:null,interactiveSphere4Translate:null,deltaTime:.05,isLoop:!1,radius:.2,commandNote:"",drawOrbit:!1},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ql(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.init()}},{key:"render",value:function(){var e=this,t={width:400,margin:10};return w.a.createElement("div",null,w.a.createElement("div",null,w.a.createElement("h2",null,"EA6")),w.a.createElement("div",{className:"rowCEA5"},w.a.createElement("div",{className:"canvasBoxEA5"},w.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"})),w.a.createElement(_.a,{handleKeys:["w","a","s","d","q","e","i","o","1","2","3","k","l","p"],onKeyEvent:function(t,n){return e.handleKeyDown(t)}}),w.a.createElement("div",{className:"sliderBoxEA5"},w.a.createElement("div",{style:t},w.a.createElement("h2",null,"Note:"),w.a.createElement("p",null,"The spheres will start on by one with a little delay."),w.a.createElement("h2",null,"Controls:"),w.a.createElement("p",null,"Use P to toggle draw the Orbit"),w.a.createElement("p",null,"Start the Animated Loop with L or skip keyframe by keyframe with K. (Note: K will stop the loop.)"),w.a.createElement("p",null,"Move Camera with W,A,S,D on X and Y axis and with Q,E around Z. Zoom with I,O."),w.a.createElement("p",null,"The Look At Center is 0,0,0")),w.a.createElement("div",{style:t},"rotationX: ",this.state.rotationX," , cameraEyeX: ",this.state.cameraEyeX),w.a.createElement("div",{style:t},"rotationY: ",this.state.rotationY," , cameraEyeY: ",this.state.cameraEyeY),w.a.createElement("div",{style:t},"rotationZ: ",this.state.rotationZ,", cameraEyeZ: ",this.state.cameraEyeZ),w.a.createElement("div",{style:t},"camera Zoom: ",w.a.createElement("p",null,this.state.zoom)),w.a.createElement("div",{style:t},"function angle : ",w.a.createElement("p",null,this.state.angle)),w.a.createElement("div",{style:t},w.a.createElement("p",null,"postiton sphere1:  ",null===this.state.interactiveSphere1Translate?"null":this.state.interactiveSphere1Translate[0]+", "+this.state.interactiveSphere1Translate[1]+", "+this.state.interactiveSphere1Translate[2]),w.a.createElement("p",null,"postiton sphere2:  ",null===this.state.interactiveSphere2Translate?"null":this.state.interactiveSphere2Translate[0]+", "+this.state.interactiveSphere2Translate[1]+", "+this.state.interactiveSphere2Translate[2]),w.a.createElement("p",null,"postiton sphere3:  ",null===this.state.interactiveSphere3Translate?"null":this.state.interactiveSphere3Translate[0]+", "+this.state.interactiveSphere3Translate[1]+", "+this.state.interactiveSphere3Translate[2]),w.a.createElement("p",null,"postiton sphere4:  ",null===this.state.interactiveSphere4Translate?"null":this.state.interactiveSphere4Translate[0]+", "+this.state.interactiveSphere4Translate[1]+", "+this.state.interactiveSphere4Translate[2])),w.a.createElement("div",{style:t},"last Commands:  ",this.state.commandNote))),w.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&Xl(n.prototype,r),o&&Xl(n,o),t}(x.Component);$l(lu,"propTypes",{}),$l(lu,"defaultProps",{});n(164);function uu(){var e=100,t=100;this.vertices=new Float32Array(30603);var n=this.vertices;this.normals=new Float32Array(30603);var r=this.normals;this.indicesLines=new Uint16Array(4e4);var a=this.indicesLines;this.indicesTris=new Uint16Array(6e4);for(var o=this.indicesTris,i=0,l=0,u=0,s=-10;u<=e;u++,s+=.2)for(var c=0,f=-10;c<=t;c++,f+=.2){var p=101*u+c,d=s,h=Math.random()*Math.sin(Math.random())*Math.cos(s*s*Math.random())*Math.cos(f*Math.random()),m=f;n[3*p]=d,n[3*p+1]=h,n[3*p+2]=m,r[3*p]=0,r[3*p+1]=1,r[3*p+2]=0,c>0&&u>0&&(a[i++]=p-1,a[i++]=p),c>0&&u>0&&(a[i++]=p-101,a[i++]=p),c>0&&u>0&&(o[l++]=p,o[l++]=p-1,o[l++]=p-101,o[l++]=p-1,o[l++]=p-101-1,o[l++]=p-101)}}function su(){var e=32,t=32;this.vertices=new Float32Array(3267);var n=this.vertices;this.normals=new Float32Array(3267);var r=this.normals;this.indicesLines=new Uint16Array(4096);var a=this.indicesLines;this.indicesTris=new Uint16Array(6144);for(var o=this.indicesTris,i=2*Math.PI/e,l=Math.PI/t,u=0,s=0,c=0,f=0;c<=e;c++,f+=i)for(var p=0,d=0;p<=t;p++,d+=l){var h=33*c+p,m=1*Math.random()*Math.sin(d)*Math.cos(f),v=1*Math.random()*Math.sin(d)*Math.sin(f),y=1*Math.random()*Math.cos(d);n[3*h]=m,n[3*h+1]=v,n[3*h+2]=y;var b=Math.sqrt(m*m+v*v+y*y);r[3*h]=m/b,r[3*h+1]=v/b,r[3*h+2]=y/b,p>0&&c>0&&(a[u++]=h-1,a[u++]=h),p>0&&c>0&&(a[u++]=h-33,a[u++]=h),p>0&&c>0&&(o[s++]=h,o[s++]=h-1,o[s++]=h-33,o[s++]=h-1,o[s++]=h-33-1,o[s++]=h-33)}}function cu(){var e=16,t=32;this.vertices=new Float32Array(1683);var n=this.vertices;this.normals=new Float32Array(1683);var r=this.normals;this.indicesLines=new Uint16Array(2048);var a=this.indicesLines;this.indicesTris=new Uint16Array(3072);for(var o=this.indicesTris,i=2*Math.PI/e,l=2*Math.PI/t,u=0,s=0,c=0,f=0;c<=e;c++,f+=i)for(var p=0,d=0;p<=t;p++,d+=l){var h=33*c+p,m=(.5+.3*Math.random()*Math.cos(f))*Math.cos(d),v=(.5+.3*Math.random()*Math.cos(f))*Math.sin(d),y=.3*Math.random()*Math.sin(f);n[3*h]=m,n[3*h+1]=v,n[3*h+2]=y;var b=Math.cos(f)*Math.cos(d),g=Math.cos(f)*Math.sin(d),E=Math.sin(f);r[3*h]=b,r[3*h+1]=g,r[3*h+2]=E,p>0&&c>0&&(a[u++]=h-1,a[u++]=h),p>0&&c>0&&(a[u++]=h-33,a[u++]=h),p>0&&c>0&&(o[s++]=h,o[s++]=h-1,o[s++]=h-33,o[s++]=h-1,o[s++]=h-33-1,o[s++]=h-33)}}var fu=n(76),pu=n.n(fu),du=n(77),hu=n.n(du);function mu(e){return(mu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function vu(e){return(vu="function"==typeof Symbol&&"symbol"===mu(Symbol.iterator)?function(e){return mu(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":mu(e)})(e)}function yu(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function bu(e){return(bu=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function gu(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Eu(e,t){return(Eu=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function xu(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}(0,Tr.createSliderWithTooltip)(Tr.Range),Tr.Handle;var wu,Su,Tu=1,Mu="fillwireframe",ku="wireframe",_u="fill",Cu=[],Au=1,Pu={eye:[0,-5,0],center:[0,0,0],up:[0,1,0],fovy:140*Math.PI/180,lrtb:100,vMatrix:a.create(),pMatrix:a.create(),projectionType:"perspective",zAngle:0,distance:8},Ou=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==vu(t)&&"function"!=typeof t?gu(e):t}(this,bu(t).call(this,e)),xu(gu(n),"myLoop",(function(){setTimeout((function(){n.animateModels(),n.renderWegGL();var e=n.state.angle+n.state.deltaTime;n.setState({angle:e}),++Tu<1e5&&n.state.isLoop&&n.myLoop()}),25)})),xu(gu(n),"handleKeyDown",(function(e){if(n.setState({commandNote:e+" pressed! "+n.state.commandNote}),"w"===e){var t=n.state.cameraEyeX+.1;n.setState({rotationX:t,cameraEyeX:t})}else if("s"===e){t=n.state.cameraEyeX-.1;n.setState({rotationX:t,cameraEyeX:t})}else if("q"===e){t=n.state.cameraEyeY-.1;n.setState({rotationY:t,cameraEyeY:t})}else if("e"===e){t=n.state.cameraEyeY+.1;n.setState({rotationY:t,cameraEyeY:t})}else if("a"===e){t=n.state.rotationZ-.1,t=n.state.cameraEyeZ-.1;n.setState({rotationZ:t,cameraEyeZ:t})}else if("d"===e){t=n.state.rotationZ+.1,t=n.state.cameraEyeZ+.1;n.setState({rotationZ:t,cameraEyeZ:t})}else if("o"===e){t=n.state.zoom+Au;n.setState({zoom:t})}else if("i"===e){t=n.state.zoom-Au;n.setState({zoom:t})}if("1"===e&&(Au=.1,Pu.up=[0,1,0],n.setState({zoom:6}),Pu.projectionType="ortho"),"2"===e&&(Au=.1,Pu.up=[0,1,0],n.setState({zoom:6}),Pu.projectionType="frustum"),"3"===e&&(Au=.1,Pu.lrtb=11,Pu.fovy=120*Math.PI/180,Pu.up=[0,1,0],n.setState({zoom:120}),Pu.projectionType="perspective"),"k"===e){n.setState({isLoop:!1}),n.animateModels();var r=n.state.angle+n.state.deltaTime;n.setState({angle:r})}if("l"===e&&(n.setState({isLoop:!0}),n.myLoop()),"p"===e){var a=!n.state.drawOrbit;n.setState({drawOrbit:a})}n.renderWegGL()})),xu(gu(n),"init",(function(){try{n.initWebGL(),n.initShaderProgram(),n.initUniforms(),n.initModels(),n.initPipline(),n.myLoop()}catch(e){alert("Error: "+e)}})),xu(gu(n),"initWebGL",(function(){try{if(!(wu=n.webGLCanvas.getContext("webgl")))throw"x"}catch(e){throw"Your web browser does not support WebGL!"}wu.viewportWidth=n.webGLCanvas.width,wu.viewportHeight=n.webGLCanvas.height})),xu(gu(n),"animateModels",(function(){var e=Math.cos(n.state.angle)*n.state.radius,t=Math.sin(n.state.angle)*n.state.radius;null!==n.state.interactiveTorus&&(n.state.interactiveTorus.rotate[0]+=.5*n.state.deltaTime),null!==n.state.interactiveSphere1&&(n.state.interactiveSphere1.translate=[n.state.interactiveSphere1.translate[0]+t,n.state.interactiveSphere1.translate[1]+e,n.state.interactiveSphere1.translate[2]]),null!==n.state.interactiveSphere2&&n.state.angle>6.499&&(n.state.interactiveSphere2.translate=[n.state.interactiveSphere2.translate[0]-t,n.state.interactiveSphere2.translate[1]-e,n.state.interactiveSphere2.translate[2]]),null!==n.state.interactiveSphere3&&n.state.angle>3.1&&(n.state.interactiveSphere3.translate=[n.state.interactiveSphere3.translate[0],n.state.interactiveSphere3.translate[1]+t,n.state.interactiveSphere3.translate[2]+e]),null!==n.state.interactiveSphere4&&n.state.angle>9.14&&(n.state.interactiveSphere4.translate=[n.state.interactiveSphere4.translate[0]+t,n.state.interactiveSphere4.translate[1],n.state.interactiveSphere4.translate[2]-e]),null!==n.state.interactiveSphere1&&null!==n.state.interactiveSphere2&&null!==n.state.interactiveSphere3&&null!==n.state.interactiveSphere4&&(n.setState({interactiveSphere1Translate:n.state.interactiveSphere1.translate}),n.setState({interactiveSphere2Translate:n.state.interactiveSphere2.translate}),n.setState({interactiveSphere3Translate:n.state.interactiveSphere3.translate}),n.setState({interactiveSphere4Translate:n.state.interactiveSphere4.translate}),n.state.angle%8&&n.state.drawOrbit&&(n.createModel("sphere",d,ku,n.state.interactiveSphere1.translate,[0,0,0],[.1,.1,.1]),n.createModel("sphere",d,ku,n.state.interactiveSphere2.translate,[0,0,0],[.1,.1,.1]),n.createModel("sphere",d,ku,n.state.interactiveSphere3.translate,[0,0,0],[.1,.1,.1]),n.createModel("sphere",d,ku,n.state.interactiveSphere4.translate,[0,0,0],[.1,.1,.1])))})),xu(gu(n),"initPipline",(function(){wu.clearColor(.95,.95,.95,1),wu.frontFace(wu.CCW),wu.enable(wu.CULL_FACE),wu.cullFace(wu.BACK),wu.enable(wu.DEPTH_TEST),wu.enable(wu.POLYGON_OFFSET_FILL),wu.polygonOffset(.5,0),wu.viewport(0,0,wu.viewportWidth,wu.viewportHeight),Pu.aspect=wu.viewportWidth/wu.viewportHeight})),xu(gu(n),"initShaderProgram",(function(){var e=n.initShader(wu.VERTEX_SHADER,"vertexshader"),t=n.initShader(wu.FRAGMENT_SHADER,"fragmentshader");Su=wu.createProgram(),wu.attachShader(Su,e),wu.attachShader(Su,t),wu.bindAttribLocation(Su,0,"aPosition"),wu.linkProgram(Su),wu.useProgram(Su)})),xu(gu(n),"initShader",(function(e,t){var n,r=wu.createShader(e);return n="vertexshader"==t?pu.a:hu.a,wu.shaderSource(r,n),wu.compileShader(r),wu.getShaderParameter(r,wu.COMPILE_STATUS)?r:(console.log(t+": "+wu.getShaderInfoLog(r)),null)})),xu(gu(n),"initUniforms",(function(){Su.pMatrixUniform=wu.getUniformLocation(Su,"uPMatrix"),Su.mvMatrixUniform=wu.getUniformLocation(Su,"uMVMatrix")})),xu(gu(n),"initModels",(function(){n.createModel("torus",h,_u,[0,0,0],[1.535,0,0],[4,4,4]),n.createModel("plane",p,Mu,[0,-.8,0],[0,0,0],[2,2,2]),n.createModel("sphere",d,_u,[.2,-.2,0],[0,0,0],[1.5,1.5,1.5]),n.createModel("sphere",d,_u,[-.2,.2,0],[0,0,0],[1.5,1.5,1.5]),n.createModel("sphere",d,_u,[-.2,-.2,0],[0,0,0],[1.5,1.5,1.5]),n.createModel("sphere",d,_u,[.2,.2,0],[0,0,0],[1.5,1.5,1.5]),n.setState({interactiveTorus:Cu[0]}),n.setState({interactivePlane:Cu[1]}),n.setState({interactiveSphere1:Cu[2]}),n.setState({interactiveSphere2:Cu[3]}),n.setState({interactiveSphere3:Cu[4]}),n.setState({interactiveSphere4:Cu[5]})})),xu(gu(n),"createModel",(function(e,t,r,a,o,i){var l={};l.name=e,l.fillstyle=r,n.initDataAndBuffers(l,t),n.initTransformations(l,a,o,i),Cu.push(l)})),xu(gu(n),"initTransformations",(function(e,t,n,r){e.translate=t,e.rotate=n,e.scale=r,e.mMatrix=a.create(),e.mvMatrix=a.create()})),xu(gu(n),"initDataAndBuffers",(function(e,t){t.createVertexData.apply(e),e.vboPos=wu.createBuffer(),wu.bindBuffer(wu.ARRAY_BUFFER,e.vboPos),wu.bufferData(wu.ARRAY_BUFFER,e.vertices,wu.STATIC_DRAW),Su.positionAttrib=wu.getAttribLocation(Su,"aPosition"),wu.enableVertexAttribArray(Su.positionAttrib),e.vboNormal=wu.createBuffer(),wu.bindBuffer(wu.ARRAY_BUFFER,e.vboNormal),wu.bufferData(wu.ARRAY_BUFFER,e.normals,wu.STATIC_DRAW),Su.normalAttrib=wu.getAttribLocation(Su,"aNormal"),wu.enableVertexAttribArray(Su.normalAttrib),e.iboLines=wu.createBuffer(),wu.bindBuffer(wu.ELEMENT_ARRAY_BUFFER,e.iboLines),wu.bufferData(wu.ELEMENT_ARRAY_BUFFER,e.indicesLines,wu.STATIC_DRAW),e.iboLines.numberOfElements=e.indicesLines.length,wu.bindBuffer(wu.ELEMENT_ARRAY_BUFFER,null),e.iboTris=wu.createBuffer(),wu.bindBuffer(wu.ELEMENT_ARRAY_BUFFER,e.iboTris),wu.bufferData(wu.ELEMENT_ARRAY_BUFFER,e.indicesTris,wu.STATIC_DRAW),e.iboTris.numberOfElements=e.indicesTris.length,wu.bindBuffer(wu.ELEMENT_ARRAY_BUFFER,null)})),xu(gu(n),"calculateCameraOrbit",(function(){Pu.eye[0]=Pu.center[0],Pu.eye[2]=Pu.center[2],Pu.eye[0]+=Pu.distance*Math.sin(Pu.zAngle),Pu.eye[2]+=Pu.distance*Math.cos(Pu.zAngle)})),xu(gu(n),"renderWegGL",(function(){Pu.eye=[n.state.cameraEyeY,n.state.cameraEyeX,n.state.cameraEyeZ],"frustum"===Pu.projectionType?Pu.lrtb=n.state.zoom:"perspective"===Pu.projectionType?(Pu.lrtb=n.state.zoom,Pu.fovy=n.state.zoom*Math.PI/180):Pu.lrtb=n.state.zoom,wu.clear(wu.COLOR_BUFFER_BIT|wu.DEPTH_BUFFER_BIT),n.setProjection(),a.lookAt(Pu.vMatrix,Pu.eye,Pu.center,Pu.up);for(var e=0;e<Cu.length;e++)n.updateTransformations(Cu[e]),wu.uniformMatrix4fv(Su.mvMatrixUniform,!1,Cu[e].mvMatrix),n.draw(Cu[e])})),xu(gu(n),"updateTransformations",(function(e){var t=e.mMatrix,n=e.mvMatrix;a.identity(t),a.identity(n),a.translate(t,t,e.translate),a.rotateX(t,t,e.rotate[0]),a.rotateY(t,t,e.rotate[1]),a.rotateZ(t,t,e.rotate[2]),a.scale(t,t,e.scale),a.multiply(n,Pu.vMatrix,t)})),xu(gu(n),"setProjection",(function(){switch(Pu.projectionType){case"ortho":var e=Pu.lrtb;a.ortho(Pu.pMatrix,-e,e,-e,e,-20,20);break;case"frustum":e=Pu.lrtb;a.frustum(Pu.pMatrix,-e/2,e/2,-e/2,e/2,1,10);break;case"perspective":a.perspective(Pu.pMatrix,Pu.fovy,Pu.aspect,1,10)}wu.uniformMatrix4fv(Su.pMatrixUniform,!1,Pu.pMatrix)})),xu(gu(n),"draw",(function(e){wu.bindBuffer(wu.ARRAY_BUFFER,e.vboPos),wu.vertexAttribPointer(Su.positionAttrib,3,wu.FLOAT,!1,0,0),wu.bindBuffer(wu.ARRAY_BUFFER,e.vboNormal),wu.vertexAttribPointer(Su.normalAttrib,3,wu.FLOAT,!1,0,0),-1!=e.fillstyle.search(/fill/)&&(wu.enableVertexAttribArray(Su.normalAttrib),wu.bindBuffer(wu.ELEMENT_ARRAY_BUFFER,e.iboTris),wu.drawElements(wu.TRIANGLES,e.iboTris.numberOfElements,wu.UNSIGNED_SHORT,0)),-1!=e.fillstyle.search(/wireframe/)&&(wu.disableVertexAttribArray(Su.normalAttrib),wu.vertexAttrib3f(Su.normalAttrib,0,0,0),wu.bindBuffer(wu.ELEMENT_ARRAY_BUFFER,e.iboLines),wu.drawElements(wu.LINES,e.iboLines.numberOfElements,wu.UNSIGNED_SHORT,0))})),n.state={eventKey:" ",zoom:120,xMin:-3,xMax:3,yMin:-3,yMax:3,rotationX:0,rotationY:0,rotationZ:0,cameraEyeX:0,cameraEyeY:-5,cameraEyeZ:0,cameraCenterX:0,cameraCenterY:0,cameraCenterZ:0,cameraUpX:0,cameraUpY:0,cameraUpZ:0,angle:0,interactiveSphere1:null,interactiveSphere2:null,interactiveSphere3:null,interactiveSphere4:null,interactiveTorus:null,interactivePlane:null,interactiveSphere1Translate:null,interactiveSphere2Translate:null,interactiveSphere3Translate:null,interactiveSphere4Translate:null,deltaTime:.05,isLoop:!1,radius:.2,commandNote:"",drawOrbit:!1},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Eu(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.init()}},{key:"render",value:function(){var e=this,t={width:400,margin:10};return w.a.createElement("div",null,w.a.createElement("div",null,w.a.createElement("h2",null,"EA7")),w.a.createElement("div",{className:"rowCEA5"},w.a.createElement("div",{className:"canvasBoxEA5"},w.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"})),w.a.createElement(_.a,{handleKeys:["w","a","s","d","q","e","i","o","1","2","3","k","l","p"],onKeyEvent:function(t,n){return e.handleKeyDown(t)}}),w.a.createElement("div",{className:"sliderBoxEA5"},w.a.createElement("div",{style:t},w.a.createElement("h2",null,"Note:"),w.a.createElement("p",null,"Switch with 1, 2, 3 between ortho, frustum or perspective camera"),w.a.createElement("h2",null,"Controls:"),w.a.createElement("p",null,"Use P to toggle draw the Orbit"),w.a.createElement("p",null,"Start the Animated Loop with L or skip keyframe by keyframe with K. (Note: K will stop the loop.)"),w.a.createElement("p",null,"Move Camera with W,A,S,D on X and Y axis and with Q,E around Z. Zoom with I,O."),w.a.createElement("p",null,"The Look At Center is 0,0,0")),w.a.createElement("div",{style:t},"rotationX: ",this.state.rotationX," , cameraEyeX: ",this.state.cameraEyeX),w.a.createElement("div",{style:t},"rotationY: ",this.state.rotationY," , cameraEyeY: ",this.state.cameraEyeY),w.a.createElement("div",{style:t},"rotationZ: ",this.state.rotationZ,", cameraEyeZ: ",this.state.cameraEyeZ),w.a.createElement("div",{style:t},"camera Zoom: ",w.a.createElement("p",null,this.state.zoom)),w.a.createElement("div",{style:t},"function angle : ",w.a.createElement("p",null,this.state.angle)),w.a.createElement("div",{style:t},w.a.createElement("p",null,"postiton sphere1:  ",null===this.state.interactiveSphere1Translate?"null":this.state.interactiveSphere1Translate[0]+", "+this.state.interactiveSphere1Translate[1]+", "+this.state.interactiveSphere1Translate[2]),w.a.createElement("p",null,"postiton sphere2:  ",null===this.state.interactiveSphere2Translate?"null":this.state.interactiveSphere2Translate[0]+", "+this.state.interactiveSphere2Translate[1]+", "+this.state.interactiveSphere2Translate[2]),w.a.createElement("p",null,"postiton sphere3:  ",null===this.state.interactiveSphere3Translate?"null":this.state.interactiveSphere3Translate[0]+", "+this.state.interactiveSphere3Translate[1]+", "+this.state.interactiveSphere3Translate[2]),w.a.createElement("p",null,"postiton sphere4:  ",null===this.state.interactiveSphere4Translate?"null":this.state.interactiveSphere4Translate[0]+", "+this.state.interactiveSphere4Translate[1]+", "+this.state.interactiveSphere4Translate[2])),w.a.createElement("div",{style:t},"last Commands:  ",this.state.commandNote))),w.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&yu(n.prototype,r),o&&yu(n,o),t}(x.Component);xu(Ou,"propTypes",{}),xu(Ou,"defaultProps",{});n(166);function Ru(){var e=100,t=100;this.vertices=new Float32Array(30603);var n=this.vertices;this.normals=new Float32Array(30603);var r=this.normals;this.indicesLines=new Uint16Array(4e4);var a=this.indicesLines;this.indicesTris=new Uint16Array(6e4);for(var o=this.indicesTris,i=0,l=0,u=0,s=-10;u<=e;u++,s+=.2)for(var c=0,f=-10;c<=t;c++,f+=.2){var p=101*u+c,d=s,h=Math.cos(s)*Math.cos(f),m=f;n[3*p]=d,n[3*p+1]=h,n[3*p+2]=m,r[3*p]=0,r[3*p+1]=1,r[3*p+2]=0,c>0&&u>0&&(a[i++]=p-1,a[i++]=p),c>0&&u>0&&(a[i++]=p-101,a[i++]=p),c>0&&u>0&&(o[l++]=p,o[l++]=p-1,o[l++]=p-101,o[l++]=p-1,o[l++]=p-101-1,o[l++]=p-101)}}function Lu(){var e=32,t=32;this.vertices=new Float32Array(3267);var n=this.vertices;this.normals=new Float32Array(3267);var r=this.normals;this.indicesLines=new Uint16Array(4096);var a=this.indicesLines;this.indicesTris=new Uint16Array(6144);for(var o=this.indicesTris,i=2*Math.PI/e,l=Math.PI/t,u=0,s=0,c=0,f=0;c<=e;c++,f+=i)for(var p=0,d=0;p<=t;p++,d+=l){var h=33*c+p,m=1*Math.sin(d)*Math.cos(f),v=1*Math.sin(d)*Math.sin(f),y=1*Math.cos(d);n[3*h]=m,n[3*h+1]=v,n[3*h+2]=y;var b=Math.sqrt(m*m+v*v+y*y);r[3*h]=m/b,r[3*h+1]=v/b,r[3*h+2]=y/b,p>0&&c>0&&(a[u++]=h-1,a[u++]=h),p>0&&c>0&&(a[u++]=h-33,a[u++]=h),p>0&&c>0&&(o[s++]=h,o[s++]=h-1,o[s++]=h-33,o[s++]=h-1,o[s++]=h-33-1,o[s++]=h-33)}}function Nu(){var e=16,t=32;this.vertices=new Float32Array(1683);var n=this.vertices;this.normals=new Float32Array(1683);var r=this.normals;this.indicesLines=new Uint16Array(2048);var a=this.indicesLines;this.indicesTris=new Uint16Array(3072);for(var o=this.indicesTris,i=2*Math.PI/e,l=2*Math.PI/t,u=0,s=0,c=0,f=0;c<=e;c++,f+=i)for(var p=0,d=0;p<=t;p++,d+=l){var h=33*c+p,m=(.5+.3*Math.cos(f))*Math.cos(d),v=(.5+.3*Math.cos(f))*Math.sin(d),y=.3*Math.sin(f);n[3*h]=m,n[3*h+1]=v,n[3*h+2]=y;var b=Math.cos(f)*Math.cos(d),g=Math.cos(f)*Math.sin(d),E=Math.sin(f);r[3*h]=b,r[3*h+1]=g,r[3*h+2]=E,p>0&&c>0&&(a[u++]=h-1,a[u++]=h),p>0&&c>0&&(a[u++]=h-33,a[u++]=h),p>0&&c>0&&(o[s++]=h,o[s++]=h-1,o[s++]=h-33,o[s++]=h-1,o[s++]=h-33-1,o[s++]=h-33)}}var Fu=n(78),Du=n.n(Fu),Uu=n(79),ju=n.n(Uu);function Iu(e){return(Iu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Bu(e){return(Bu="function"==typeof Symbol&&"symbol"===Iu(Symbol.iterator)?function(e){return Iu(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":Iu(e)})(e)}function zu(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Vu(e){return(Vu=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Wu(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Yu(e,t){return(Yu=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Hu(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}(0,Tr.createSliderWithTooltip)(Tr.Range),Tr.Handle;var Ku,Xu,Gu=[0,5,0],Zu=[1,3,0],qu={ambientLight:[.5,.5,.5],light:[{isOn:!0,position:Gu,color:[1,1,1]},{isOn:!0,position:Zu,color:[1,1,1]}]},$u=1,Qu="wireframe",Ju="fill",es=[],ts=1,ns={eye:[0,5,0],center:[0,0,0],up:[0,1,0],fovy:140*Math.PI/180,lrtb:100,vMatrix:a.create(),pMatrix:a.create(),projectionType:"perspective",zAngle:0,distance:8},rs=.1,as=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==Bu(t)&&"function"!=typeof t?Wu(e):t}(this,Vu(t).call(this,e)),Hu(Wu(n),"myLoop",(function(){setTimeout((function(){n.animateModels(),n.renderWegGL();var e=n.state.angle+n.state.deltaTime;n.setState({angle:e}),++$u<1e5&&n.state.isLoop&&n.myLoop()}),25)})),Hu(Wu(n),"handleKeyDown",(function(e){if(n.setState({commandNote:e+" pressed! "+n.state.commandNote}),"w"===e)ns.eye[1]+=rs;else if("s"===e)ns.eye[1]-=rs;else if("q"===e)ns.distance+=rs;else if("e"===e)ns.distance-=rs;else if("a"===e)ns.zAngle-=rs;else if("d"===e)ns.zAngle+=rs;else if("o"===e){var t=n.state.zoom+ts;n.setState({zoom:t})}else if("i"===e){t=n.state.zoom-ts;n.setState({zoom:t})}if("1"===e&&(ts=.1,ns.up=[0,1,0],n.setState({zoom:6}),ns.projectionType="ortho"),"2"===e&&(ts=.1,ns.up=[0,1,0],n.setState({zoom:6}),ns.projectionType="frustum"),"3"===e&&(ts=.1,ns.lrtb=11,ns.fovy=120*Math.PI/180,ns.up=[0,1,0],n.setState({zoom:120}),ns.projectionType="perspective"),"k"===e){n.setState({isLoop:!1}),n.animateModels();var r=n.state.angle+n.state.deltaTime;n.setState({angle:r})}if("l"===e&&(n.setState({isLoop:!0}),n.myLoop()),"p"===e){var a=!n.state.drawOrbit;n.setState({drawOrbit:a})}n.renderWegGL()})),Hu(Wu(n),"init",(function(){try{n.initWebGL(),n.initShaderProgram(),n.initUniforms(),n.initModels(),n.initPipline(),n.setState({isLoop:!0}),n.myLoop()}catch(e){alert("Error: "+e)}})),Hu(Wu(n),"initWebGL",(function(){try{if(!(Ku=n.webGLCanvas.getContext("webgl")))throw"x"}catch(e){throw"Your web browser does not support WebGL!"}Ku.viewportWidth=n.webGLCanvas.width,Ku.viewportHeight=n.webGLCanvas.height})),Hu(Wu(n),"initPipline",(function(){Ku.clearColor(.95,.95,.95,1),Ku.frontFace(Ku.CCW),Ku.enable(Ku.CULL_FACE),Ku.cullFace(Ku.BACK),Ku.enable(Ku.DEPTH_TEST),Ku.enable(Ku.POLYGON_OFFSET_FILL),Ku.polygonOffset(.5,0),Ku.viewport(0,0,Ku.viewportWidth,Ku.viewportHeight),ns.aspect=Ku.viewportWidth/Ku.viewportHeight})),Hu(Wu(n),"initShaderProgram",(function(){var e=n.initShader(Ku.VERTEX_SHADER,"vertexshader"),t=n.initShader(Ku.FRAGMENT_SHADER,"fragmentshader");Xu=Ku.createProgram(),Ku.attachShader(Xu,e),Ku.attachShader(Xu,t),Ku.bindAttribLocation(Xu,0,"aPosition"),Ku.linkProgram(Xu),Ku.useProgram(Xu)})),Hu(Wu(n),"initShader",(function(e,t){var n,r=Ku.createShader(e);return n="vertexshader"==t?Du.a:ju.a,Ku.shaderSource(r,n),Ku.compileShader(r),Ku.getShaderParameter(r,Ku.COMPILE_STATUS)?r:(console.log(t+": "+Ku.getShaderInfoLog(r)),null)})),Hu(Wu(n),"initUniforms",(function(){Xu.pMatrixUniform=Ku.getUniformLocation(Xu,"uPMatrix"),Xu.mvMatrixUniform=Ku.getUniformLocation(Xu,"uMVMatrix"),Xu.nMatrixUniform=Ku.getUniformLocation(Xu,"uNMatrix"),Xu.colorUniform=Ku.getUniformLocation(Xu,"uColor"),Xu.ambientLightUniform=Ku.getUniformLocation(Xu,"ambientLight"),Xu.lightUniform=[];for(var e=0;e<qu.light.length;e++){var t="light["+e+"]",n={};n.isOn=Ku.getUniformLocation(Xu,t+".isOn"),n.position=Ku.getUniformLocation(Xu,t+".position"),n.color=Ku.getUniformLocation(Xu,t+".color"),Xu.lightUniform[e]=n}Xu.materialKaUniform=Ku.getUniformLocation(Xu,"material.ka"),Xu.materialKdUniform=Ku.getUniformLocation(Xu,"material.kd"),Xu.materialKsUniform=Ku.getUniformLocation(Xu,"material.ks"),Xu.materialKeUniform=Ku.getUniformLocation(Xu,"material.ke")})),Hu(Wu(n),"createPhongMaterial",(function(e){return(e=e||{}).ka=e.ka||[.3,.3,.3],e.kd=e.kd||[.6,.6,.6],e.ks=e.ks||[.8,.8,.8],e.ke=e.ke||10,e})),Hu(Wu(n),"initModels",(function(){var e=n.createPhongMaterial(),t=n.createPhongMaterial({kd:[1,0,0]}),r=n.createPhongMaterial({kd:[0,1,0]}),a=n.createPhongMaterial({kd:[0,0,1]}),o=n.createPhongMaterial({ka:[1,1,1],kd:[.5,.5,.5],ks:[0,0,0]});n.createModel("torus",y,Ju,[1,1,1,1],[0,0,0],[1.535,0,0,0],[4,4,4,4],t),n.createModel("plane",m,Ju,[1,1,1,1],[0,-3.8,0],[0,0,0,0],[2,2,2,2],e),n.createModel("sphere",v,Ju,[1,1,1,1],[.2,-.2,0],[0,0,0,0],[.1,.1,.1,.1],r),n.createModel("sphere",v,Ju,[1,1,1,1],[-.2,.2,0],[0,0,0,0],[.1,.1,.1,.1],a),n.createModel("sphere",v,Ju,[1,1,1,1],[-.2,-.2,0],[0,0,0,0],[.1,.1,.1,.1],o),n.createModel("sphere",v,Ju,[1,1,1,1],[.2,.2,0],[0,0,0,0],[.1,.1,.1,.1],a),n.createModel("sphere",v,Qu,[1,0,0,1],Gu,[0,0,0,0],[.5,.5,.5,.5],e),n.createModel("sphere",v,Qu,[1,0,0,1],Zu,[0,0,0,0],[.5,.5,.5,.5],e),n.setState({interactiveTorus:es[0]}),n.setState({interactivePlane:es[1]}),n.setState({interactiveSphere1:es[2]}),n.setState({interactiveSphere2:es[3]}),n.setState({interactiveSphere3:es[4]}),n.setState({interactiveSphere4:es[5]}),n.setState({lightPosition1Marker:es[6]}),n.setState({lightPosition2Marker:es[7]})})),Hu(Wu(n),"createModel",(function(e,t,r,a,o,i,l,u){var s={};s.name=e,s.fillstyle=r,s.color=a,n.initDataAndBuffers(s,t),n.initTransformations(s,o,i,l),s.material=u,es.push(s)})),Hu(Wu(n),"initTransformations",(function(e,t,n,o){e.translate=t,e.rotate=n,e.scale=o,e.mMatrix=a.create(),e.mvMatrix=a.create(),e.nMatrix=r.create()})),Hu(Wu(n),"initDataAndBuffers",(function(e,t){t.createVertexData.apply(e),e.vboPos=Ku.createBuffer(),Ku.bindBuffer(Ku.ARRAY_BUFFER,e.vboPos),Ku.bufferData(Ku.ARRAY_BUFFER,e.vertices,Ku.STATIC_DRAW),Xu.positionAttrib=Ku.getAttribLocation(Xu,"aPosition"),Ku.enableVertexAttribArray(Xu.positionAttrib),e.vboNormal=Ku.createBuffer(),Ku.bindBuffer(Ku.ARRAY_BUFFER,e.vboNormal),Ku.bufferData(Ku.ARRAY_BUFFER,e.normals,Ku.STATIC_DRAW),Xu.normalAttrib=Ku.getAttribLocation(Xu,"aNormal"),Ku.enableVertexAttribArray(Xu.normalAttrib),e.iboLines=Ku.createBuffer(),Ku.bindBuffer(Ku.ELEMENT_ARRAY_BUFFER,e.iboLines),Ku.bufferData(Ku.ELEMENT_ARRAY_BUFFER,e.indicesLines,Ku.STATIC_DRAW),e.iboLines.numberOfElements=e.indicesLines.length,Ku.bindBuffer(Ku.ELEMENT_ARRAY_BUFFER,null),e.iboTris=Ku.createBuffer(),Ku.bindBuffer(Ku.ELEMENT_ARRAY_BUFFER,e.iboTris),Ku.bufferData(Ku.ELEMENT_ARRAY_BUFFER,e.indicesTris,Ku.STATIC_DRAW),e.iboTris.numberOfElements=e.indicesTris.length,Ku.bindBuffer(Ku.ELEMENT_ARRAY_BUFFER,null)})),Hu(Wu(n),"calculateCameraOrbit",(function(){ns.eye[0]=ns.center[0],ns.eye[2]=ns.center[2],ns.eye[0]+=ns.distance*Math.sin(ns.zAngle),ns.eye[2]+=ns.distance*Math.cos(ns.zAngle)})),Hu(Wu(n),"animateModels",(function(){var e=Math.cos(n.state.angle)*n.state.radius,t=Math.sin(n.state.angle)*n.state.radius;Gu[0]+=4*t,Gu[2]+=4*e,n.state.angle>6.499&&(Zu[0]-=4*t,Zu[2]-=4*e),null!==n.state.lightPosition1Marker&&(n.state.lightPosition1Marker.translate=[n.state.lightPosition1Marker.translate[0]+4*t,n.state.lightPosition1Marker.translate[1],n.state.lightPosition1Marker.translate[2]+4*e]),null!==n.state.lightPosition2Marker&&n.state.angle>6.499&&(n.state.lightPosition2Marker.translate=[n.state.lightPosition2Marker.translate[0]-4*t,n.state.lightPosition2Marker.translate[1],n.state.lightPosition2Marker.translate[2]-4*e]),null!==n.state.interactiveTorus&&(n.state.interactiveTorus.rotate[0]+=.5*n.state.deltaTime),null!==n.state.interactiveSphere1&&(n.state.interactiveSphere1.translate=[n.state.interactiveSphere1.translate[0]+t,n.state.interactiveSphere1.translate[1]+e,n.state.interactiveSphere1.translate[2]]),null!==n.state.interactiveSphere2&&n.state.angle>6.499&&(n.state.interactiveSphere2.translate=[n.state.interactiveSphere2.translate[0]-t,n.state.interactiveSphere2.translate[1]-e,n.state.interactiveSphere2.translate[2]]),null!==n.state.interactiveSphere3&&n.state.angle>3.1&&(n.state.interactiveSphere3.translate=[n.state.interactiveSphere3.translate[0],n.state.interactiveSphere3.translate[1]+t,n.state.interactiveSphere3.translate[2]+e]),null!==n.state.interactiveSphere4&&n.state.angle>9.14&&(n.state.interactiveSphere4.translate=[n.state.interactiveSphere4.translate[0]+t,n.state.interactiveSphere4.translate[1],n.state.interactiveSphere4.translate[2]-e]),null!==n.state.interactiveSphere1&&null!==n.state.interactiveSphere2&&null!==n.state.interactiveSphere3&&null!==n.state.interactiveSphere4&&(n.setState({interactiveSphere1Translate:n.state.interactiveSphere1.translate}),n.setState({interactiveSphere2Translate:n.state.interactiveSphere2.translate}),n.setState({interactiveSphere3Translate:n.state.interactiveSphere3.translate}),n.setState({interactiveSphere4Translate:n.state.interactiveSphere4.translate}))})),Hu(Wu(n),"renderWegGL",(function(){"frustum"===ns.projectionType?ns.lrtb=n.state.zoom:"perspective"===ns.projectionType?(ns.lrtb=n.state.zoom,ns.fovy=n.state.zoom*Math.PI/180):ns.lrtb=n.state.zoom,Ku.clear(Ku.COLOR_BUFFER_BIT|Ku.DEPTH_BUFFER_BIT),n.setProjection(),n.calculateCameraOrbit(),a.lookAt(ns.vMatrix,ns.eye,ns.center,ns.up),Ku.uniform3fv(Xu.ambientLightUniform,qu.ambientLight);for(var e=0;e<qu.light.length;e++){Ku.uniform1i(Xu.lightUniform[e].isOn,qu.light[e].isOn);var t=[].concat(qu.light[e].position);t.push(1),i.transformMat4(t,t,ns.vMatrix),t.pop(),Ku.uniform3fv(Xu.lightUniform[e].position,t),Ku.uniform3fv(Xu.lightUniform[e].color,qu.light[e].color)}for(var r=0;r<es.length;r++)n.updateTransformations(es[r]),Ku.uniformMatrix4fv(Xu.mvMatrixUniform,!1,es[r].mvMatrix),Ku.uniformMatrix3fv(Xu.nMatrixUniform,!1,es[r].nMatrix),Ku.uniform4fv(Xu.colorUniform,es[r].color),Ku.uniform3fv(Xu.materialKaUniform,es[r].material.ka),Ku.uniform3fv(Xu.materialKdUniform,es[r].material.kd),Ku.uniform3fv(Xu.materialKsUniform,es[r].material.ks),Ku.uniform1f(Xu.materialKeUniform,es[r].material.ke),n.draw(es[r])})),Hu(Wu(n),"updateTransformations",(function(e){var t=e.mMatrix,n=e.mvMatrix;a.identity(t),a.identity(n),a.translate(t,t,e.translate),a.rotateX(t,t,e.rotate[0]),a.rotateY(t,t,e.rotate[1]),a.rotateZ(t,t,e.rotate[2]),a.scale(t,t,e.scale),a.multiply(n,ns.vMatrix,t),r.normalFromMat4(e.nMatrix,n)})),Hu(Wu(n),"setProjection",(function(){switch(ns.projectionType){case"ortho":var e=ns.lrtb;a.ortho(ns.pMatrix,-e,e,-e,e,-20,20);break;case"frustum":e=ns.lrtb;a.frustum(ns.pMatrix,-e/2,e/2,-e/2,e/2,1,10);break;case"perspective":a.perspective(ns.pMatrix,ns.fovy,ns.aspect,1,100)}Ku.uniformMatrix4fv(Xu.pMatrixUniform,!1,ns.pMatrix)})),Hu(Wu(n),"draw",(function(e){Ku.bindBuffer(Ku.ARRAY_BUFFER,e.vboPos),Ku.vertexAttribPointer(Xu.positionAttrib,3,Ku.FLOAT,!1,0,0),Ku.bindBuffer(Ku.ARRAY_BUFFER,e.vboNormal),Ku.vertexAttribPointer(Xu.normalAttrib,3,Ku.FLOAT,!1,0,0),-1!=e.fillstyle.search(/fill/)&&(Ku.enableVertexAttribArray(Xu.normalAttrib),Ku.bindBuffer(Ku.ELEMENT_ARRAY_BUFFER,e.iboTris),Ku.drawElements(Ku.TRIANGLES,e.iboTris.numberOfElements,Ku.UNSIGNED_SHORT,0)),-1!=e.fillstyle.search(/wireframe/)&&(Ku.disableVertexAttribArray(Xu.normalAttrib),Ku.vertexAttrib3f(Xu.normalAttrib,0,0,0),Ku.bindBuffer(Ku.ELEMENT_ARRAY_BUFFER,e.iboLines),Ku.drawElements(Ku.LINES,e.iboLines.numberOfElements,Ku.UNSIGNED_SHORT,0))})),n.state={eventKey:" ",zoom:120,xMin:-3,xMax:3,yMin:-3,yMax:3,rotationX:0,rotationY:0,rotationZ:0,cameraEyeX:0,cameraEyeY:5,cameraEyeZ:0,cameraCenterX:0,cameraCenterY:0,cameraCenterZ:0,cameraUpX:0,cameraUpY:0,cameraUpZ:0,angle:0,interactiveSphere1:null,interactiveSphere2:null,interactiveSphere3:null,interactiveSphere4:null,interactiveTorus:null,interactivePlane:null,interactiveSphere1Translate:null,interactiveSphere2Translate:null,interactiveSphere3Translate:null,interactiveSphere4Translate:null,lightPosition1Marker:null,lightPosition2Marker:null,deltaTime:.05,isLoop:!1,radius:.2,commandNote:"",drawOrbit:!1},n}var n,o,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Yu(e,t)}(t,e),n=t,(o=[{key:"componentDidMount",value:function(){this.init()}},{key:"render",value:function(){var e=this,t={width:400,margin:10};return w.a.createElement("div",null,w.a.createElement("div",null,w.a.createElement("h2",null,"EA8")),w.a.createElement("div",{className:"rowCEA5"},w.a.createElement("div",{className:"canvasBoxEA5"},w.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"})),w.a.createElement(_.a,{handleKeys:["w","a","s","d","q","e","i","o","1","2","3","k","l","p"],onKeyEvent:function(t,n){return e.handleKeyDown(t)}}),w.a.createElement("div",{className:"sliderBoxEA5"},w.a.createElement("div",{style:t},w.a.createElement("h2",null,"Note:"),w.a.createElement("p",null,"Switch with 1, 2, 3 between ortho, frustum or perspective camera"),w.a.createElement("h2",null,"Controls:"),w.a.createElement("p",null,"Start the Animated Loop with L or skip keyframe by keyframe with K. (Note: K will stop the loop.)"),w.a.createElement("p",null,"Move Camera with W,A,S,D on X and Y axis and with Q,E around Z. Zoom with I,O."),w.a.createElement("p",null,"The Look At Center is 0,0,0")),w.a.createElement("div",{style:t},"rotationX: ",this.state.rotationX," , cameraEyeX: ",this.state.cameraEyeX),w.a.createElement("div",{style:t},"rotationY: ",this.state.rotationY," , cameraEyeY: ",this.state.cameraEyeY),w.a.createElement("div",{style:t},"rotationZ: ",this.state.rotationZ,", cameraEyeZ: ",this.state.cameraEyeZ),w.a.createElement("div",{style:t},"camera Zoom: ",w.a.createElement("p",null,this.state.zoom)),w.a.createElement("div",{style:t},"function angle : ",w.a.createElement("p",null,this.state.angle)),w.a.createElement("div",{style:t},w.a.createElement("p",null,"postiton sphere1:  ",null===this.state.interactiveSphere1Translate?"null":this.state.interactiveSphere1Translate[0]+", "+this.state.interactiveSphere1Translate[1]+", "+this.state.interactiveSphere1Translate[2]),w.a.createElement("p",null,"postiton sphere2:  ",null===this.state.interactiveSphere2Translate?"null":this.state.interactiveSphere2Translate[0]+", "+this.state.interactiveSphere2Translate[1]+", "+this.state.interactiveSphere2Translate[2]),w.a.createElement("p",null,"postiton sphere3:  ",null===this.state.interactiveSphere3Translate?"null":this.state.interactiveSphere3Translate[0]+", "+this.state.interactiveSphere3Translate[1]+", "+this.state.interactiveSphere3Translate[2]),w.a.createElement("p",null,"postiton sphere4:  ",null===this.state.interactiveSphere4Translate?"null":this.state.interactiveSphere4Translate[0]+", "+this.state.interactiveSphere4Translate[1]+", "+this.state.interactiveSphere4Translate[2])),w.a.createElement("div",{style:t},"last Commands:  ",this.state.commandNote))),w.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&zu(n.prototype,o),l&&zu(n,l),t}(x.Component);Hu(as,"propTypes",{}),Hu(as,"defaultProps",{});n(168);function os(){var e=100,t=100;this.vertices=new Float32Array(30603);var n=this.vertices;this.normals=new Float32Array(30603);var r=this.normals;this.textureCoord=new Float32Array(20402);var a=this.textureCoord;this.indicesLines=new Uint16Array(4e4);var o=this.indicesLines;this.indicesTris=new Uint16Array(6e4);for(var i=this.indicesTris,l=0,u=0,s=0,c=-10;s<=e;s++,c+=.2)for(var f=0,p=-10;f<=t;f++,p+=.2){var d=101*s+f,h=c,m=p;n[3*d]=h,n[3*d+1]=0,n[3*d+2]=m,r[3*d]=0,r[3*d+1]=1,r[3*d+2]=0,a[2*d]=c,a[2*d+1]=p,f>0&&s>0&&(o[l++]=d-1,o[l++]=d),f>0&&s>0&&(o[l++]=d-101,o[l++]=d),f>0&&s>0&&(i[u++]=d,i[u++]=d-1,i[u++]=d-101,i[u++]=d-1,i[u++]=d-101-1,i[u++]=d-101)}}function is(){var e=16,t=32;this.vertices=new Float32Array(1683);var n=this.vertices;this.normals=new Float32Array(1683);var r=this.normals;this.textureCoord=new Float32Array(1683);var a=this.textureCoord;this.indicesLines=new Uint16Array(2048);var o=this.indicesLines;this.indicesTris=new Uint16Array(3072);for(var i=this.indicesTris,l=2*Math.PI/e,u=2*Math.PI/t,s=0,c=0,f=0,p=0;f<=e;f++,p+=l)for(var d=0,h=0;d<=t;d++,h+=u){var m=33*f+d,v=(.5+.3*Math.cos(p))*Math.cos(h),y=(.5+.3*Math.cos(p))*Math.sin(h),b=.3*Math.sin(p);n[3*m]=v,n[3*m+1]=y,n[3*m+2]=b;var g=Math.cos(p)*Math.cos(h),E=Math.cos(p)*Math.sin(h),x=Math.sin(p);r[3*m]=g,r[3*m+1]=E,r[3*m+2]=x,a[2*m]=p,a[2*m+1]=h,d>0&&f>0&&(o[s++]=m-1,o[s++]=m),d>0&&f>0&&(o[s++]=m-33,o[s++]=m),d>0&&f>0&&(i[c++]=m,i[c++]=m-1,i[c++]=m-33,i[c++]=m-1,i[c++]=m-33-1,i[c++]=m-33)}}var ls=n(80),us=n.n(ls),ss=n(81),cs=n.n(ss),fs=n(54),ps=n.n(fs),ds=n(55),hs=n.n(ds),ms=n.p+"x.png",vs=n.p+"grasstex.jpg",ys=n.p+"rocktex.jpg";function bs(e){return(bs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function gs(e){return(gs="function"==typeof Symbol&&"symbol"===bs(Symbol.iterator)?function(e){return bs(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":bs(e)})(e)}function Es(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xs(e){return(xs=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ws(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ss(e,t){return(Ss=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ts(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}(0,Tr.createSliderWithTooltip)(Tr.Range),Tr.Handle;var Ms,ks,_s=null,Cs=null,As=[0,5,0],Ps=[1,3,0],Os={ambientLight:[.5,.5,.5],light:[{isOn:!0,position:As,color:[1,1,1]},{isOn:!0,position:Ps,color:[1,1,1]}]},Rs=1,Ls="fill",Ns=[],Fs=1,Ds={eye:[0,5,0],center:[0,0,0],up:[0,1,0],fovy:140*Math.PI/180,lrtb:100,vMatrix:a.create(),pMatrix:a.create(),projectionType:"perspective",zAngle:0,distance:8},Us=.1,js=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==gs(t)&&"function"!=typeof t?ws(e):t}(this,xs(t).call(this,e)),Ts(ws(n),"myLoop",(function(){setTimeout((function(){n.state.isLoop&&n.animateModels(),n.renderWegGL();var e=n.state.angle+n.state.deltaTime;n.setState({angle:e}),++Rs<1e5&&n.state.isLoop&&n.myLoop()}),25)})),Ts(ws(n),"handleKeyDown",(function(e){if(n.setState({commandNote:e+" pressed! "+n.state.commandNote}),"w"===e)Ds.eye[1]+=Us;else if("s"===e)Ds.eye[1]-=Us;else if("q"===e)Ds.distance+=Us;else if("e"===e)Ds.distance-=Us;else if("a"===e)Ds.zAngle-=Us;else if("d"===e)Ds.zAngle+=Us;else if("o"===e){var t=n.state.zoom+Fs;n.setState({zoom:t})}else if("i"===e){t=n.state.zoom-Fs;n.setState({zoom:t})}if("1"===e&&(Fs=.1,Ds.up=[0,1,0],n.setState({zoom:6}),Ds.projectionType="ortho"),"2"===e&&(Fs=.1,Ds.up=[0,1,0],n.setState({zoom:6}),Ds.projectionType="frustum"),"3"===e&&(Fs=.1,Ds.lrtb=11,Ds.fovy=120*Math.PI/180,Ds.up=[0,1,0],n.setState({zoom:120}),Ds.projectionType="perspective"),"4"===e&&(Cs=cs.a,_s=us.a,n.init()),"5"===e&&(Cs=hs.a,_s=ps.a,n.init()),"k"===e){n.setState({isLoop:!1}),n.animateModels();var r=n.state.angle+n.state.deltaTime;n.setState({angle:r})}if("l"===e&&(n.setState({isLoop:!0}),n.myLoop()),"p"===e){var a=!n.state.drawOrbit;n.setState({drawOrbit:a})}n.renderWegGL()})),Ts(ws(n),"init",(function(){try{n.initWebGL(),n.initShaderProgram(),n.initUniforms(),n.initModels(),n.initPipline(),n.setState({isLoop:!0}),n.myLoop()}catch(e){alert("Error: "+e)}})),Ts(ws(n),"initWebGL",(function(){try{if(!(Ms=n.webGLCanvas.getContext("webgl")))throw"x"}catch(e){throw"Your web browser does not support WebGL!"}Ms.viewportWidth=n.webGLCanvas.width,Ms.viewportHeight=n.webGLCanvas.height})),Ts(ws(n),"initPipline",(function(){Ms.clearColor(.1,.1,.1,1),Ms.frontFace(Ms.CCW),Ms.enable(Ms.CULL_FACE),Ms.cullFace(Ms.BACK),Ms.enable(Ms.DEPTH_TEST),Ms.enable(Ms.POLYGON_OFFSET_FILL),Ms.polygonOffset(.5,0),Ms.viewport(0,0,Ms.viewportWidth,Ms.viewportHeight),Ds.aspect=Ms.viewportWidth/Ms.viewportHeight})),Ts(ws(n),"initShaderProgram",(function(){var e=n.initShader(Ms.VERTEX_SHADER,"vertexshader"),t=n.initShader(Ms.FRAGMENT_SHADER,"fragmentshader");ks=Ms.createProgram(),Ms.attachShader(ks,e),Ms.attachShader(ks,t),Ms.bindAttribLocation(ks,0,"aPosition"),Ms.linkProgram(ks),Ms.useProgram(ks)})),Ts(ws(n),"initShader",(function(e,t){var n,r=Ms.createShader(e);return n="vertexshader"==t?_s:Cs,Ms.shaderSource(r,n),Ms.compileShader(r),Ms.getShaderParameter(r,Ms.COMPILE_STATUS)?r:(console.log(t+": "+Ms.getShaderInfoLog(r)),null)})),Ts(ws(n),"initUniforms",(function(){ks.pMatrixUniform=Ms.getUniformLocation(ks,"uPMatrix"),ks.mvMatrixUniform=Ms.getUniformLocation(ks,"uMVMatrix"),ks.nMatrixUniform=Ms.getUniformLocation(ks,"uNMatrix"),ks.colorUniform=Ms.getUniformLocation(ks,"uColor"),ks.ambientLightUniform=Ms.getUniformLocation(ks,"ambientLight"),ks.lightUniform=[];for(var e=0;e<Os.light.length;e++){var t="light["+e+"]",n={};n.isOn=Ms.getUniformLocation(ks,t+".isOn"),n.position=Ms.getUniformLocation(ks,t+".position"),n.color=Ms.getUniformLocation(ks,t+".color"),ks.lightUniform[e]=n}ks.materialKaUniform=Ms.getUniformLocation(ks,"material.ka"),ks.materialKdUniform=Ms.getUniformLocation(ks,"material.kd"),ks.materialKsUniform=Ms.getUniformLocation(ks,"material.ks"),ks.materialKeUniform=Ms.getUniformLocation(ks,"material.ke"),ks.textureUniform=Ms.getUniformLocation(ks,"uTexture"),ks.timeUniform=Ms.getUniformLocation(ks,"uTime")})),Ts(ws(n),"initTexture",(function(e,t){var r=Ms.createTexture();e.texture=r,r.loaded=!1,r.image=new Image,r.image.onload=function(){n.onloadTextureImage(r)},r.image.src=t})),Ts(ws(n),"onloadTextureImage",(function(e){e.loaded=!0,Ms.bindTexture(Ms.TEXTURE_2D,e),Ms.texImage2D(Ms.TEXTURE_2D,0,Ms.RGBA,Ms.RGBA,Ms.UNSIGNED_BYTE,e.image),Ms.texParameteri(Ms.TEXTURE_2D,Ms.TEXTURE_MIN_FILTER,Ms.LINEAR_MIPMAP_LINEAR),Ms.texParameteri(Ms.TEXTURE_2D,Ms.TEXTURE_MAG_FILTER,Ms.NEAREST),Ms.generateMipmap(Ms.TEXTURE_2D),Ms.bindTexture(Ms.TEXTURE_2D,null),n.renderWegGL()})),Ts(ws(n),"createPhongMaterial",(function(e){return(e=e||{}).ka=e.ka||[.3,.3,.3],e.kd=e.kd||[.6,.6,.6],e.ks=e.ks||[.8,.8,.8],e.ke=e.ke||10,e})),Ts(ws(n),"initModels",(function(){Ns=[];var e=n.createPhongMaterial(),t=n.createPhongMaterial({kd:[1,0,0]});n.createPhongMaterial({kd:[0,1,0]}),n.createPhongMaterial({kd:[0,0,1]}),n.createPhongMaterial({ka:[1,1,1],kd:[.5,.5,.5],ks:[0,0,0]});n.createModel("plane",b,Ls,[1,1,1,1],[0,-3.8,0],[0,0,0,0],[2,2,2,2],e,"grasstex.jpg"),n.createModel("torus",g,Ls,[1,1,1,1],[0,0,0],[1.535,0,0,0],[4,4,4,4],t,"rocktex.jpg"),n.setState({interactivePlane:Ns[0]}),n.setState({interactiveTorus:Ns[1]})})),Ts(ws(n),"createModel",(function(e,t,r,a,o,i,l,u,s){var c={};c.name=e,c.fillstyle=r,c.color=a,n.initDataAndBuffers(c,t),n.initTransformations(c,o,i,l),s&&n.initTexture(c,s),c.material=u,Ns.push(c)})),Ts(ws(n),"initTransformations",(function(e,t,n,o){e.translate=t,e.rotate=n,e.scale=o,e.mMatrix=a.create(),e.mvMatrix=a.create(),e.nMatrix=r.create()})),Ts(ws(n),"initDataAndBuffers",(function(e,t){t.createVertexData.apply(e),e.vboPos=Ms.createBuffer(),Ms.bindBuffer(Ms.ARRAY_BUFFER,e.vboPos),Ms.bufferData(Ms.ARRAY_BUFFER,e.vertices,Ms.STATIC_DRAW),ks.positionAttrib=Ms.getAttribLocation(ks,"aPosition"),Ms.enableVertexAttribArray(ks.positionAttrib),e.vboNormal=Ms.createBuffer(),Ms.bindBuffer(Ms.ARRAY_BUFFER,e.vboNormal),Ms.bufferData(Ms.ARRAY_BUFFER,e.normals,Ms.STATIC_DRAW),ks.normalAttrib=Ms.getAttribLocation(ks,"aNormal"),Ms.enableVertexAttribArray(ks.normalAttrib),e.vboTextureCoord=Ms.createBuffer(),Ms.bindBuffer(Ms.ARRAY_BUFFER,e.vboTextureCoord),Ms.bufferData(Ms.ARRAY_BUFFER,e.textureCoord,Ms.STATIC_DRAW),ks.textureCoordAttrib=Ms.getAttribLocation(ks,"aTextureCoord"),Ms.enableVertexAttribArray(ks.textureCoordAttrib),e.iboLines=Ms.createBuffer(),Ms.bindBuffer(Ms.ELEMENT_ARRAY_BUFFER,e.iboLines),Ms.bufferData(Ms.ELEMENT_ARRAY_BUFFER,e.indicesLines,Ms.STATIC_DRAW),e.iboLines.numberOfElements=e.indicesLines.length,Ms.bindBuffer(Ms.ELEMENT_ARRAY_BUFFER,null),e.iboTris=Ms.createBuffer(),Ms.bindBuffer(Ms.ELEMENT_ARRAY_BUFFER,e.iboTris),Ms.bufferData(Ms.ELEMENT_ARRAY_BUFFER,e.indicesTris,Ms.STATIC_DRAW),e.iboTris.numberOfElements=e.indicesTris.length,Ms.bindBuffer(Ms.ELEMENT_ARRAY_BUFFER,null)})),Ts(ws(n),"calculateCameraOrbit",(function(){Ds.eye[0]=Ds.center[0],Ds.eye[2]=Ds.center[2],Ds.eye[0]+=Ds.distance*Math.sin(Ds.zAngle),Ds.eye[2]+=Ds.distance*Math.cos(Ds.zAngle)})),Ts(ws(n),"animateModels",(function(){var e=Math.cos(n.state.angle)*n.state.radius,t=Math.sin(n.state.angle)*n.state.radius;As[0]+=4*t,As[2]+=4*e,n.state.angle>6.499&&(Ps[0]-=4*t,Ps[2]-=4*e),null!==n.state.lightPosition1Marker&&(n.state.lightPosition1Marker.translate=[n.state.lightPosition1Marker.translate[0]+4*t,n.state.lightPosition1Marker.translate[1],n.state.lightPosition1Marker.translate[2]+4*e]),null!==n.state.lightPosition2Marker&&n.state.angle>6.499&&(n.state.lightPosition2Marker.translate=[n.state.lightPosition2Marker.translate[0]-4*t,n.state.lightPosition2Marker.translate[1],n.state.lightPosition2Marker.translate[2]-4*e]),null!==n.state.interactiveTorus&&(n.state.interactiveTorus.rotate[0]+=.5*n.state.deltaTime),null!==n.state.interactiveSphere1&&(n.state.interactiveSphere1.translate=[n.state.interactiveSphere1.translate[0]+t,n.state.interactiveSphere1.translate[1]+e,n.state.interactiveSphere1.translate[2]]),null!==n.state.interactiveSphere2&&n.state.angle>6.499&&(n.state.interactiveSphere2.translate=[n.state.interactiveSphere2.translate[0]-t,n.state.interactiveSphere2.translate[1]-e,n.state.interactiveSphere2.translate[2]]),null!==n.state.interactiveSphere3&&n.state.angle>3.1&&(n.state.interactiveSphere3.translate=[n.state.interactiveSphere3.translate[0],n.state.interactiveSphere3.translate[1]+t,n.state.interactiveSphere3.translate[2]+e]),null!==n.state.interactiveSphere4&&n.state.angle>9.14&&(n.state.interactiveSphere4.translate=[n.state.interactiveSphere4.translate[0]+t,n.state.interactiveSphere4.translate[1],n.state.interactiveSphere4.translate[2]-e]),null!==n.state.interactiveSphere1&&null!==n.state.interactiveSphere2&&null!==n.state.interactiveSphere3&&null!==n.state.interactiveSphere4&&(n.setState({interactiveSphere1Translate:n.state.interactiveSphere1.translate}),n.setState({interactiveSphere2Translate:n.state.interactiveSphere2.translate}),n.setState({interactiveSphere3Translate:n.state.interactiveSphere3.translate}),n.setState({interactiveSphere4Translate:n.state.interactiveSphere4.translate}))})),Ts(ws(n),"renderWegGL",(function(){"frustum"===Ds.projectionType?Ds.lrtb=n.state.zoom:"perspective"===Ds.projectionType?(Ds.lrtb=n.state.zoom,Ds.fovy=n.state.zoom*Math.PI/180):Ds.lrtb=n.state.zoom,Ms.clear(Ms.COLOR_BUFFER_BIT|Ms.DEPTH_BUFFER_BIT),n.setProjection(),n.calculateCameraOrbit(),a.lookAt(Ds.vMatrix,Ds.eye,Ds.center,Ds.up),Ms.uniform3fv(ks.ambientLightUniform,Os.ambientLight);for(var e=0;e<Os.light.length;e++){Ms.uniform1i(ks.lightUniform[e].isOn,Os.light[e].isOn);var t=[].concat(Os.light[e].position);t.push(1),i.transformMat4(t,t,Ds.vMatrix),t.pop(),Ms.uniform3fv(ks.lightUniform[e].position,t),Ms.uniform3fv(ks.lightUniform[e].color,Os.light[e].color)}for(var r=0;r<Ns.length;r++)Ns[r].texture.loaded&&(n.updateTransformations(Ns[r]),Ms.uniformMatrix4fv(ks.mvMatrixUniform,!1,Ns[r].mvMatrix),Ms.uniformMatrix3fv(ks.nMatrixUniform,!1,Ns[r].nMatrix),Ms.uniform4fv(ks.colorUniform,Ns[r].color),Ms.uniform3fv(ks.materialKaUniform,Ns[r].material.ka),Ms.uniform3fv(ks.materialKdUniform,Ns[r].material.kd),Ms.uniform3fv(ks.materialKsUniform,Ns[r].material.ks),Ms.uniform1f(ks.materialKeUniform,Ns[r].material.ke),Ms.activeTexture(Ms.TEXTURE0),Ms.bindTexture(Ms.TEXTURE_2D,Ns[r].texture),Ms.uniform1i(ks.textureUniform,0),Ms.uniform1f(ks.timeUniform,n.state.angle),n.draw(Ns[r]))})),Ts(ws(n),"updateTransformations",(function(e){var t=e.mMatrix,n=e.mvMatrix;a.identity(t),a.identity(n),a.translate(t,t,e.translate),a.rotateX(t,t,e.rotate[0]),a.rotateY(t,t,e.rotate[1]),a.rotateZ(t,t,e.rotate[2]),a.scale(t,t,e.scale),a.multiply(n,Ds.vMatrix,t),r.normalFromMat4(e.nMatrix,n)})),Ts(ws(n),"setProjection",(function(){switch(Ds.projectionType){case"ortho":var e=Ds.lrtb;a.ortho(Ds.pMatrix,-e,e,-e,e,-20,20);break;case"frustum":e=Ds.lrtb;a.frustum(Ds.pMatrix,-e/2,e/2,-e/2,e/2,1,10);break;case"perspective":a.perspective(Ds.pMatrix,Ds.fovy,Ds.aspect,1,100)}Ms.uniformMatrix4fv(ks.pMatrixUniform,!1,Ds.pMatrix)})),Ts(ws(n),"draw",(function(e){Ms.bindBuffer(Ms.ARRAY_BUFFER,e.vboPos),Ms.vertexAttribPointer(ks.positionAttrib,3,Ms.FLOAT,!1,0,0),Ms.bindBuffer(Ms.ARRAY_BUFFER,e.vboNormal),Ms.vertexAttribPointer(ks.normalAttrib,3,Ms.FLOAT,!1,0,0),Ms.bindBuffer(Ms.ARRAY_BUFFER,e.vboTextureCoord),Ms.vertexAttribPointer(ks.textureCoordAttrib,2,Ms.FLOAT,!1,0,0),-1!=e.fillstyle.search(/fill/)&&(Ms.enableVertexAttribArray(ks.normalAttrib),Ms.enableVertexAttribArray(ks.textureCoordAttrib),Ms.bindBuffer(Ms.ELEMENT_ARRAY_BUFFER,e.iboTris),Ms.drawElements(Ms.TRIANGLES,e.iboTris.numberOfElements,Ms.UNSIGNED_SHORT,0)),-1!=e.fillstyle.search(/wireframe/)&&(Ms.uniform4fv(ks.colorUniform,[0,0,0,1]),Ms.disableVertexAttribArray(ks.normalAttrib),Ms.disableVertexAttribArray(ks.textureCoordAttrib),Ms.vertexAttrib3f(ks.normalAttrib,0,0,0),Ms.bindBuffer(Ms.ELEMENT_ARRAY_BUFFER,e.iboLines),Ms.drawElements(Ms.LINES,e.iboLines.numberOfElements,Ms.UNSIGNED_SHORT,0))})),n.state={eventKey:" ",zoom:120,xMin:-3,xMax:3,yMin:-3,yMax:3,rotationX:0,rotationY:0,rotationZ:0,cameraEyeX:0,cameraEyeY:5,cameraEyeZ:0,cameraCenterX:0,cameraCenterY:0,cameraCenterZ:0,cameraUpX:0,cameraUpY:0,cameraUpZ:0,angle:0,interactiveSphere1:null,interactiveSphere2:null,interactiveSphere3:null,interactiveSphere4:null,interactiveTorus:null,interactivePlane:null,interactiveSphere1Translate:null,interactiveSphere2Translate:null,interactiveSphere3Translate:null,interactiveSphere4Translate:null,lightPosition1Marker:null,lightPosition2Marker:null,deltaTime:.05,isLoop:!1,radius:.2,commandNote:"",drawOrbit:!1},n}var n,o,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ss(e,t)}(t,e),n=t,(o=[{key:"componentDidMount",value:function(){_s=ps.a,Cs=hs.a,this.init()}},{key:"render",value:function(){var e=this,t={width:400,margin:10};return w.a.createElement("div",null,w.a.createElement("div",null,w.a.createElement("h2",null,"EA9")),w.a.createElement("div",{className:"rowCEA5"},w.a.createElement("div",{className:"canvasBoxEA5"},w.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"})),w.a.createElement(_.a,{handleKeys:["w","a","s","d","q","e","i","o","1","2","3","4","5","k","l","p"],onKeyEvent:function(t,n){return e.handleKeyDown(t)}}),w.a.createElement("div",{className:"sliderBoxEA5"},w.a.createElement("div",{style:t},w.a.createElement("h2",null,"Note:"),w.a.createElement("h3",null,"Switch with 4, 5 between image texture and procedural texture"),w.a.createElement("p",null,"Switch with 1, 2, 3 between ortho, frustum or perspective camera"),w.a.createElement("h2",null,"Controls:"),w.a.createElement("p",null,"Start the Animated Loop with L or skip keyframe by keyframe with K. (Note: K will stop the loop.)"),w.a.createElement("p",null,"Move Camera with W,A,S,D on X and Y axis and with Q,E around Z. Zoom with I,O."),w.a.createElement("p",null,"The Look At Center is 0,0,0")),w.a.createElement("div",{style:t},"camera Zoom: ",w.a.createElement("p",null,this.state.zoom)),w.a.createElement("div",{style:t},"function angle : ",w.a.createElement("p",null,this.state.angle)),w.a.createElement("div",{style:t},w.a.createElement("a",{href:"https://a-gilles.com/wear_rm.php/"},"Texture 1 Reference")),w.a.createElement("div",{style:t},w.a.createElement("a",{href:"https://i.pinimg.com/originals/c7/ef/80/c7ef8094f5014db6de1e6c3bf6c3d0ed.jpg"},"Texture 2 Reference")),w.a.createElement("div",null,w.a.createElement("img",{src:ms})),w.a.createElement("div",null,w.a.createElement("img",{src:vs})),w.a.createElement("div",null,w.a.createElement("img",{src:ys})))),w.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&Es(n.prototype,o),l&&Es(n,l),t}(x.Component);Ts(js,"propTypes",{}),Ts(js,"defaultProps",{});n(170);function Is(){var e=32,t=32;this.vertices=new Float32Array(3267);var n=this.vertices;this.normals=new Float32Array(3267);var r=this.normals;this.indicesLines=new Uint16Array(4096);var a=this.indicesLines;this.indicesTris=new Uint16Array(6144);for(var o=this.indicesTris,i=2*Math.PI/e,l=Math.PI/t,u=0,s=0,c=0,f=0;c<=e;c++,f+=i)for(var p=0,d=0;p<=t;p++,d+=l){var h=33*c+p,m=1*Math.sin(d)*Math.cos(f),v=1*Math.sin(d)*Math.sin(f),y=1*Math.cos(d);n[3*h]=m,n[3*h+1]=v,n[3*h+2]=y;var b=Math.sqrt(m*m+v*v+y*y);r[3*h]=m/b,r[3*h+1]=v/b,r[3*h+2]=y/b,p>0&&c>0&&(a[u++]=h-1,a[u++]=h),p>0&&c>0&&(a[u++]=h-33,a[u++]=h),p>0&&c>0&&(o[s++]=h,o[s++]=h-1,o[s++]=h-33,o[s++]=h-1,o[s++]=h-33-1,o[s++]=h-33)}}var Bs,zs,Vs,Ws,Ys=n(56),Hs=n.n(Ys);function Ks(e){var t=Hs.a.parse(e,{delimiter:",",dynamicTyping:!0,skipEmptyLines:!0});zs=t.data,Gs(),Zs(),Xs(),Bs.dataLoadedCallback(zs,Vs,Ws)}function Xs(){if(zs&&0!==zs.length){Ws={};var e,t,n,r,a=zs[0].length;for(Ws.field=Array(a).fill(0),Ws.min=Array(a).fill(0),Ws.max=Array(a).fill(0),Ws.range=Array(a).fill(0),Ws.mean=Array(a).fill(0),r=0;r<a;r++){e=t=void 0,n=0;for(var o=0;o<zs.length;o++)n+=zs[o][r],(void 0===t||zs[o][r]>t)&&(t=zs[o][r]),(void 0===e||zs[o][r]<e)&&(e=zs[o][r]);n/=zs.length,Ws.field[r]={min:e,max:t,range:t-e,mean:n},Ws.min[r]=e,Ws.max[r]=t,Ws.range[r]=t-e,Ws.mean[r]=n}for(Ws.maxRange=0,r=0;r<a;r++){var i=Math.abs(Ws.field[r].range);i>Ws.maxRange&&(Ws.maxRange=i)}}else console.log("Data no valid.")}function Gs(){Vs=[];for(var e=0;e<zs.length;e++)Vs.push(zs[e].pop())}function Zs(){for(var e=0;e<Vs.length;e++)switch(Vs[e]){case"Iris-setosa":Vs[e]=0;break;case"Iris-versicolor":Vs[e]=1;break;case"Iris-virginica":Vs[e]=2}}var qs=0;function $s(){var e=document.createElement("a");!function(e,t,n){var r="data:application/octet-stream,"+encodeURIComponent(n);e.setAttribute("href",r),e.setAttribute("download",t)}(e,"data_"+qs+".csv",function(){for(var e=JSON.parse(JSON.stringify(zs)),t=0;t<e.length;t++)e[t].push(Vs[t]);return Hs.a.unparse(e)}()),qs++,document.body.appendChild(e),e.click(),document.body.removeChild(e)}function Qs(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function l(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){e.done?a(e.value):new n((function(t){t(e.value)})).then(i,l)}u((r=r.apply(e,t||[])).next())}))}function Js(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}}function ec(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i}var tc=new Map([["avi","video/avi"],["gif","image/gif"],["ico","image/x-icon"],["jpeg","image/jpeg"],["jpg","image/jpeg"],["mkv","video/x-matroska"],["mov","video/quicktime"],["mp4","video/mp4"],["pdf","application/pdf"],["png","image/png"],["zip","application/zip"],["doc","application/msword"],["docx","application/vnd.openxmlformats-officedocument.wordprocessingml.document"]]);function nc(e,t){var n=function(e){var t=e.name;if(t&&-1!==t.lastIndexOf(".")&&!e.type){var n=t.split(".").pop().toLowerCase(),r=tc.get(n);r&&Object.defineProperty(e,"type",{value:r,writable:!1,configurable:!1,enumerable:!0})}return e}(e);if("string"!=typeof n.path){var r=e.webkitRelativePath;Object.defineProperty(n,"path",{value:"string"==typeof t?t:"string"==typeof r&&r.length>0?r:e.name,writable:!1,configurable:!1,enumerable:!0})}return n}var rc=[".DS_Store","Thumbs.db"];function ac(e){return Qs(this,void 0,void 0,(function(){return Js(this,(function(t){return[2,(n=e,n.dataTransfer&&e.dataTransfer?ic(e.dataTransfer,e.type):oc(e))];var n}))}))}function oc(e){return(null!==e.target&&e.target.files?uc(e.target.files):[]).map((function(e){return nc(e)}))}function ic(e,t){return Qs(this,void 0,void 0,(function(){var n;return Js(this,(function(r){switch(r.label){case 0:return e.items?(n=uc(e.items).filter((function(e){return"file"===e.kind})),"drop"!==t?[2,n]:[4,Promise.all(n.map(sc))]):[3,2];case 1:return[2,lc(cc(r.sent()))];case 2:return[2,lc(uc(e.files).map((function(e){return nc(e)})))]}}))}))}function lc(e){return e.filter((function(e){return-1===rc.indexOf(e.name)}))}function uc(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];t.push(r)}return t}function sc(e){if("function"!=typeof e.webkitGetAsEntry)return fc(e);var t=e.webkitGetAsEntry();return t&&t.isDirectory?dc(t):fc(e)}function cc(e){return e.reduce((function(e,t){return function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(ec(arguments[t]));return e}(e,Array.isArray(t)?cc(t):[t])}),[])}function fc(e){var t=e.getAsFile();if(!t)return Promise.reject(e+" is not a File");var n=nc(t);return Promise.resolve(n)}function pc(e){return Qs(this,void 0,void 0,(function(){return Js(this,(function(t){return[2,e.isDirectory?dc(e):hc(e)]}))}))}function dc(e){var t=e.createReader();return new Promise((function(e,n){var r=[];!function a(){var o=this;t.readEntries((function(t){return Qs(o,void 0,void 0,(function(){var o,i,l;return Js(this,(function(u){switch(u.label){case 0:if(t.length)return[3,5];u.label=1;case 1:return u.trys.push([1,3,,4]),[4,Promise.all(r)];case 2:return o=u.sent(),e(o),[3,4];case 3:return i=u.sent(),n(i),[3,4];case 4:return[3,6];case 5:l=Promise.all(t.map(pc)),r.push(l),a(),u.label=6;case 6:return[2]}}))}))}),(function(e){n(e)}))}()}))}function hc(e){return Qs(this,void 0,void 0,(function(){return Js(this,(function(t){return[2,new Promise((function(t,n){e.file((function(n){var r=nc(n,e.fullPath);t(r)}),(function(e){n(e)}))}))]}))}))}var mc=n(82),vc=n.n(mc);function yc(e,t){return"application/x-moz-file"===e.type||vc()(e,t)}function bc(e,t,n){if(gc(e.size)){if(gc(t)&&gc(n))return e.size>=t&&e.size<=n;if(gc(t))return e.size>=t;if(gc(n))return e.size<=n}return!0}function gc(e){return null!=e}function Ec(e){return"function"==typeof e.isPropagationStopped?e.isPropagationStopped():void 0!==e.cancelBubble&&e.cancelBubble}function xc(e){return e.dataTransfer?Array.prototype.some.call(e.dataTransfer.types,(function(e){return"Files"===e||"application/x-moz-file"===e})):!!e.target&&!!e.target.files}function wc(e){e.preventDefault()}function Sc(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];return t.some((function(t){return!Ec(e)&&t&&t.apply(void 0,[e].concat(r)),Ec(e)}))}}function Tc(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Mc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function kc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?kc(n,!0).forEach((function(t){Cc(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):kc(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Cc(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ac(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var Pc=Object(x.forwardRef)((function(e,t){var n=e.children,r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.accept,n=e.disabled,r=void 0!==n&&n,a=e.getFilesFromEvent,o=void 0===a?ac:a,i=e.maxSize,l=void 0===i?1/0:i,u=e.minSize,s=void 0===u?0:u,c=e.multiple,f=void 0===c||c,p=e.onDragEnter,d=e.onDragLeave,h=e.onDragOver,m=e.onDrop,v=e.onDropAccepted,y=e.onDropRejected,b=e.onFileDialogCancel,g=e.preventDropOnDocument,E=void 0===g||g,w=e.noClick,S=void 0!==w&&w,T=e.noKeyboard,M=void 0!==T&&T,k=e.noDrag,_=void 0!==k&&k,C=e.noDragEventsBubbling,A=void 0!==C&&C,P=Object(x.useRef)(null),O=Object(x.useRef)(null),R=Mc(Object(x.useReducer)(Lc,Rc),2),L=R[0],N=R[1],F=L.isFocused,D=L.isFileDialogActive,U=L.draggedFiles,j=Object(x.useCallback)((function(){O.current&&(N({type:"openDialog"}),O.current.value=null,O.current.click())}),[N]),I=function(){D&&setTimeout((function(){O.current&&(O.current.files.length||(N({type:"closeDialog"}),"function"==typeof b&&b()))}),300)};Object(x.useEffect)((function(){return window.addEventListener("focus",I,!1),function(){window.removeEventListener("focus",I,!1)}}),[O,D,b]);var B=Object(x.useCallback)((function(e){P.current&&P.current.isEqualNode(e.target)&&(32!==e.keyCode&&13!==e.keyCode||(e.preventDefault(),j()))}),[P,O]),z=Object(x.useCallback)((function(){N({type:"focus"})}),[]),V=Object(x.useCallback)((function(){N({type:"blur"})}),[]),W=Object(x.useCallback)((function(){S||(!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.navigator.userAgent;return function(e){return-1!==e.indexOf("MSIE")||-1!==e.indexOf("Trident/")}(e)||function(e){return-1!==e.indexOf("Edge/")}(e)}()?j():setTimeout(j,0))}),[O,S]),Y=Object(x.useRef)([]),H=function(e){P.current&&P.current.contains(e.target)||(e.preventDefault(),Y.current=[])};Object(x.useEffect)((function(){return E&&(document.addEventListener("dragover",wc,!1),document.addEventListener("drop",H,!1)),function(){E&&(document.removeEventListener("dragover",wc),document.removeEventListener("drop",H))}}),[P,E]);var K=Object(x.useCallback)((function(e){e.preventDefault(),e.persist(),J(e),-1===Y.current.indexOf(e.target)&&(Y.current=[].concat(Tc(Y.current),[e.target])),xc(e)&&Promise.resolve(o(e)).then((function(t){Ec(e)&&!A||(N({draggedFiles:t,isDragActive:!0,type:"setDraggedFiles"}),p&&p(e))}))}),[o,p,A]),X=Object(x.useCallback)((function(e){if(e.preventDefault(),e.persist(),J(e),e.dataTransfer)try{e.dataTransfer.dropEffect="copy"}catch(e){}return xc(e)&&h&&h(e),!1}),[h,A]),G=Object(x.useCallback)((function(e){e.preventDefault(),e.persist(),J(e);var t=Y.current.filter((function(t){return t!==e.target&&P.current&&P.current.contains(t)}));Y.current=t,t.length>0||(N({isDragActive:!1,type:"setDraggedFiles",draggedFiles:[]}),xc(e)&&d&&d(e))}),[P,d,A]),Z=Object(x.useCallback)((function(e){e.preventDefault(),e.persist(),J(e),Y.current=[],N({type:"reset"}),xc(e)&&Promise.resolve(o(e)).then((function(n){if(!Ec(e)||A){var r=[],a=[];n.forEach((function(e){yc(e,t)&&bc(e,s,l)?r.push(e):a.push(e)})),!f&&r.length>1&&a.push.apply(a,Tc(r.splice(0))),N({acceptedFiles:r,rejectedFiles:a,type:"setFiles"}),m&&m(r,a,e),a.length>0&&y&&y(a,e),r.length>0&&v&&v(r,e)}}))}),[f,t,s,l,o,m,v,y,A]),q=function(e){return r?null:e},$=function(e){return M?null:q(e)},Q=function(e){return _?null:q(e)},J=function(e){A&&e.stopPropagation()},ee=Object(x.useMemo)((function(){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.refKey,n=void 0===t?"ref":t,a=e.onKeyDown,o=e.onFocus,i=e.onBlur,l=e.onClick,u=e.onDragEnter,s=e.onDragOver,c=e.onDragLeave,f=e.onDrop,p=Ac(e,["refKey","onKeyDown","onFocus","onBlur","onClick","onDragEnter","onDragOver","onDragLeave","onDrop"]);return _c(Cc({onKeyDown:$(Sc(a,B)),onFocus:$(Sc(o,z)),onBlur:$(Sc(i,V)),onClick:q(Sc(l,W)),onDragEnter:Q(Sc(u,K)),onDragOver:Q(Sc(s,X)),onDragLeave:Q(Sc(c,G)),onDrop:Q(Sc(f,Z))},n,P),r||M?{}:{tabIndex:0},{},p)}}),[P,B,z,V,W,K,X,G,Z,M,_,r]),te=Object(x.useCallback)((function(e){e.stopPropagation()}),[]),ne=Object(x.useMemo)((function(){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.refKey,r=void 0===n?"ref":n,a=e.onChange,o=e.onClick,i=Ac(e,["refKey","onChange","onClick"]),l=Cc({accept:t,multiple:f,type:"file",style:{display:"none"},onChange:q(Sc(a,Z)),onClick:q(Sc(o,te)),autoComplete:"off",tabIndex:-1},r,O);return _c({},l,{},i)}}),[O,t,f,Z,r]),re=U.length,ae=f||re<=1,oe=re>0&&function(e,t,n,r){return e.every((function(e){return yc(e,t)&&bc(e,n,r)}))}(U,t,s,l);return _c({},L,{isDragAccept:oe,isDragReject:re>0&&(!oe||!ae),isFocused:F&&!r,getRootProps:ee,getInputProps:ne,rootRef:P,inputRef:O,open:q(j)})}(Ac(e,["children"])),a=r.open,o=Ac(r,["open"]);return Object(x.useImperativeHandle)(t,(function(){return{open:a}}),[a]),w.a.createElement(x.Fragment,null,n(_c({},o,{open:a})))}));Pc.displayName="Dropzone",Pc.propTypes={children:te.a.func,accept:te.a.oneOfType([te.a.string,te.a.arrayOf(te.a.string)]),multiple:te.a.bool,preventDropOnDocument:te.a.bool,noClick:te.a.bool,noKeyboard:te.a.bool,noDrag:te.a.bool,noDragEventsBubbling:te.a.bool,minSize:te.a.number,maxSize:te.a.number,disabled:te.a.bool,getFilesFromEvent:te.a.func,onFileDialogCancel:te.a.func,onDragEnter:te.a.func,onDragLeave:te.a.func,onDragOver:te.a.func,onDrop:te.a.func,onDropAccepted:te.a.func,onDropRejected:te.a.func};var Oc=Pc,Rc={isFocused:!1,isFileDialogActive:!1,isDragActive:!1,isDragAccept:!1,isDragReject:!1,draggedFiles:[],acceptedFiles:[],rejectedFiles:[]};function Lc(e,t){switch(t.type){case"focus":return _c({},e,{isFocused:!0});case"blur":return _c({},e,{isFocused:!1});case"openDialog":return _c({},e,{isFileDialogActive:!0});case"closeDialog":return _c({},e,{isFileDialogActive:!1});case"setDraggedFiles":var n=t.isDragActive;return _c({},e,{draggedFiles:t.draggedFiles,isDragActive:n});case"setFiles":return _c({},e,{acceptedFiles:t.acceptedFiles,rejectedFiles:t.rejectedFiles});case"reset":return _c({},e,{isFileDialogActive:!1,isDragActive:!1,draggedFiles:[]});default:return e}}var Nc,Fc=n.p+"public/data_0.csv",Dc=n(57),Uc=n.n(Dc),jc=n(58),Ic=n.n(jc),Bc=n(83),zc=n.n(Bc);function Vc(e){return(Vc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Wc(e){return(Wc="function"==typeof Symbol&&"symbol"===Vc(Symbol.iterator)?function(e){return Vc(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":Vc(e)})(e)}function Yc(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Hc(e){return(Hc=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Kc(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Xc(e,t){return(Xc=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Gc(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Tr.Handle;var Zc,qc,$c=null,Qc=null,Jc=[0,5,0],ef=[1,3,0],tf={ambientLight:[.5,.5,.5],light:[{isOn:!0,position:Jc,color:[1,1,1]},{isOn:!0,position:ef,color:[1,1,1]}]},nf=1,rf=[],af=1,of=2,lf={eye:o.fromValues(0,0,0),center:[0,0,0],fovy:60*Math.PI/180,lrtb:2,vMatrix:a.create(),pMatrix:a.create(),projectionType:"ortho",zAngle:0,distance:4,rotate:[0,0,0],rotateX:function(e){var t=a.create();a.rotateX(t,t,e),a.multiply(this.vMatrix,t,this.vMatrix)},rotateY:function(e){var t=a.create();a.rotateY(t,t,e),a.multiply(this.vMatrix,t,this.vMatrix)},rotateZ:function(e){var t=a.create();a.rotateZ(t,t,e),a.multiply(this.vMatrix,t,this.vMatrix)},translate:function(e){var t=a.create();a.translate(t,t,e),a.multiply(this.vMatrix,t,this.vMatrix)}},uf=.1,sf=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==Wc(t)&&"function"!=typeof t?Kc(e):t}(this,Hc(t).call(this,e)),Gc(Kc(n),"myLoop",(function(){setTimeout((function(){n.state.isLoop&&n.animateModels(),n.renderWegGL();var e=n.state.angle+n.state.deltaTime;n.setState({angle:e}),++nf<1e5&&n.state.isLoop&&n.myLoop()}),25)})),Gc(Kc(n),"handleKeyDown",(function(e){if(n.setState({commandNote:e+" pressed! "+n.state.commandNote}),"shift"===e&&n.setState({inverted:!n.state.inverted}),"x"===e&&(n.state.inverted?lf.rotateX(-uf):lf.rotateX(uf)),"y"===e&&(n.state.inverted?lf.rotateY(-uf):lf.rotateY(uf)),"z"===e&&(n.state.inverted?lf.rotateZ(-uf):lf.rotateZ(uf)),"w"===e&&lf.translate([0,-of,0]),"a"===e&&lf.translate([of,0,0]),"s"===e&&lf.translate([0,of,0]),"d"===e&&lf.translate([-of,0,0]),"q"===e&&(lf.distance+=uf),"e"===e&&(lf.distance-=uf),"o"===e){var t=n.state.zoom+af;n.rescaleModels(af),n.setState({zoom:t})}if("i"===e){t=n.state.zoom-af;n.rescaleModels(-af),n.setState({zoom:t})}var r;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */if("1"===e&&(af=.1,n.setState({zoom:2}),lf.projectionType="ortho"),"2"===e&&(af=.1,n.setState({zoom:2}),lf.projectionType="frustum"),"3"===e&&(af=1,n.setState({zoom:30}),lf.projectionType="perspective"),"4"===e&&(Qc=Ic.a,$c=Uc.a,n.init()),"5"===e&&(Qc=fragmentShader1,$c=vertexShader1,n.init()),"8"===e&&lf.translate([0,0,of]),"9"===e&&lf.translate([0,0,-of]),"k"===e&&(r=Nc.getSolution(),zs=r,$s()),"l"===e&&(n.setState({isLoop:!0}),n.myLoop()),"p"===e){var a=!n.state.drawOrbit;n.setState({drawOrbit:a})}"t"===e&&n.step_tSNE(1e3),n.renderWegGL()})),Gc(Kc(n),"onDrop",(function(e){e.forEach((function(e){var t=new FileReader;t.onabort=function(){return console.log("file reading was aborted")},t.onerror=function(){return console.log("file reading has failed")},t.onload=function(){console.log("file reading was succesful"),t.onload=function(e){Ks(e.target.result)},t.readAsText(e)},t.readAsArrayBuffer(e)}))})),Gc(Kc(n),"init",(function(){try{e=Kc(n),Bs=e,n.initWebGL(),n.initShaderProgram(),n.initUniforms(),n.initModels(),n.initPipline(),n.setState({isLoop:!1}),Ks(Fc),n.myLoop()}catch(e){alert("Error: "+e)}var e})),Gc(Kc(n),"initWebGL",(function(){try{if(!(Zc=n.webGLCanvas.getContext("webgl")))throw"x"}catch(e){throw"Your web browser does not support WebGL!"}Zc.viewportWidth=n.webGLCanvas.width,Zc.viewportHeight=n.webGLCanvas.height})),Gc(Kc(n),"initPipline",(function(){Zc.clearColor(.9,.9,.9,1),Zc.frontFace(Zc.CCW),Zc.enable(Zc.CULL_FACE),Zc.cullFace(Zc.BACK),Zc.enable(Zc.DEPTH_TEST),Zc.enable(Zc.POLYGON_OFFSET_FILL),Zc.polygonOffset(.5,0),Zc.viewport(0,0,Zc.viewportWidth,Zc.viewportHeight),lf.aspect=Zc.viewportWidth/Zc.viewportHeight})),Gc(Kc(n),"initShaderProgram",(function(){var e=n.initShader(Zc.VERTEX_SHADER,"vertexshader"),t=n.initShader(Zc.FRAGMENT_SHADER,"fragmentshader");qc=Zc.createProgram(),Zc.attachShader(qc,e),Zc.attachShader(qc,t),Zc.bindAttribLocation(qc,0,"aPosition"),Zc.linkProgram(qc),Zc.useProgram(qc)})),Gc(Kc(n),"initShader",(function(e,t){var n,r=Zc.createShader(e);return n="vertexshader"==t?$c:Qc,Zc.shaderSource(r,n),Zc.compileShader(r),Zc.getShaderParameter(r,Zc.COMPILE_STATUS)?r:(console.log(t+": "+Zc.getShaderInfoLog(r)),null)})),Gc(Kc(n),"initUniforms",(function(){qc.pMatrixUniform=Zc.getUniformLocation(qc,"uPMatrix"),qc.mvMatrixUniform=Zc.getUniformLocation(qc,"uMVMatrix"),qc.nMatrixUniform=Zc.getUniformLocation(qc,"uNMatrix"),qc.colorUniform=Zc.getUniformLocation(qc,"uColor"),qc.ambientLightUniform=Zc.getUniformLocation(qc,"ambientLight"),qc.lightUniform=[];for(var e=0;e<tf.light.length;e++){var t="light["+e+"]",n={};n.isOn=Zc.getUniformLocation(qc,t+".isOn"),n.position=Zc.getUniformLocation(qc,t+".position"),n.color=Zc.getUniformLocation(qc,t+".color"),qc.lightUniform[e]=n}qc.materialKaUniform=Zc.getUniformLocation(qc,"material.ka"),qc.materialKdUniform=Zc.getUniformLocation(qc,"material.kd"),qc.materialKsUniform=Zc.getUniformLocation(qc,"material.ks"),qc.materialKeUniform=Zc.getUniformLocation(qc,"material.ke"),qc.textureUniform=Zc.getUniformLocation(qc,"uTexture"),qc.timeUniform=Zc.getUniformLocation(qc,"uTime")})),Gc(Kc(n),"initTexture",(function(e,t){var r=Zc.createTexture();e.texture=r,r.loaded=!1,r.image=new Image,r.image.onload=function(){n.onloadTextureImage(r)},r.image.src=t})),Gc(Kc(n),"onloadTextureImage",(function(e){e.loaded=!0,Zc.bindTexture(Zc.TEXTURE_2D,e),Zc.texImage2D(Zc.TEXTURE_2D,0,Zc.RGBA,Zc.RGBA,Zc.UNSIGNED_BYTE,e.image),Zc.texParameteri(Zc.TEXTURE_2D,Zc.TEXTURE_MIN_FILTER,Zc.LINEAR_MIPMAP_LINEAR),Zc.texParameteri(Zc.TEXTURE_2D,Zc.TEXTURE_MAG_FILTER,Zc.NEAREST),Zc.generateMipmap(Zc.TEXTURE_2D),Zc.bindTexture(Zc.TEXTURE_2D,null),n.renderWegGL()})),Gc(Kc(n),"createPhongMaterial",(function(e){return(e=e||{}).ka=e.ka||[.3,.3,.3],e.kd=e.kd||[.6,.6,.6],e.ks=e.ks||[.8,.8,.8],e.ke=e.ke||10,e})),Gc(Kc(n),"initModels",(function(){})),Gc(Kc(n),"createModel",(function(e,t,r,a,o,i,l,u){var s={};s.fillstyle=t,s.color=r,n.initDataAndBuffers(s,e),n.initTransformations(s,a,o,i),u&&n.initTexture(s,u),s.material=l,rf.push(s)})),Gc(Kc(n),"initTransformations",(function(e,t,n,o){e.translate=t,e.rotate=n,e.scale=o,e.mMatrix=a.create(),e.mvMatrix=a.create(),e.nMatrix=r.create()})),Gc(Kc(n),"initDataAndBuffers",(function(e,t){t.createVertexData.apply(e),e.vboPos=Zc.createBuffer(),Zc.bindBuffer(Zc.ARRAY_BUFFER,e.vboPos),Zc.bufferData(Zc.ARRAY_BUFFER,e.vertices,Zc.STATIC_DRAW),qc.positionAttrib=Zc.getAttribLocation(qc,"aPosition"),Zc.enableVertexAttribArray(qc.positionAttrib),e.vboNormal=Zc.createBuffer(),Zc.bindBuffer(Zc.ARRAY_BUFFER,e.vboNormal),Zc.bufferData(Zc.ARRAY_BUFFER,e.normals,Zc.STATIC_DRAW),qc.normalAttrib=Zc.getAttribLocation(qc,"aNormal"),Zc.enableVertexAttribArray(qc.normalAttrib),e.texture&&(e.vboTextureCoord=Zc.createBuffer(),Zc.bindBuffer(Zc.ARRAY_BUFFER,e.vboTextureCoord),Zc.bufferData(Zc.ARRAY_BUFFER,e.textureCoord,Zc.STATIC_DRAW),qc.textureCoordAttrib=Zc.getAttribLocation(qc,"aTextureCoord"),Zc.enableVertexAttribArray(qc.textureCoordAttrib)),e.iboLines=Zc.createBuffer(),Zc.bindBuffer(Zc.ELEMENT_ARRAY_BUFFER,e.iboLines),Zc.bufferData(Zc.ELEMENT_ARRAY_BUFFER,e.indicesLines,Zc.STATIC_DRAW),e.iboLines.numberOfElements=e.indicesLines.length,Zc.bindBuffer(Zc.ELEMENT_ARRAY_BUFFER,null),e.iboTris=Zc.createBuffer(),Zc.bindBuffer(Zc.ELEMENT_ARRAY_BUFFER,e.iboTris),Zc.bufferData(Zc.ELEMENT_ARRAY_BUFFER,e.indicesTris,Zc.STATIC_DRAW),e.iboTris.numberOfElements=e.indicesTris.length,Zc.bindBuffer(Zc.ELEMENT_ARRAY_BUFFER,null)})),Gc(Kc(n),"calculateCameraOrbit",(function(){lf.eye[0]=lf.center[0],lf.eye[2]=lf.center[2],lf.eye[0]+=lf.distance*Math.sin(lf.zAngle),lf.eye[2]+=lf.distance*Math.cos(lf.zAngle)})),Gc(Kc(n),"calculateCamera",(function(){var e=lf.vMatrix;a.identity(e),a.rotateX(e,e,lf.rotate[0]),a.rotateY(e,e,lf.rotate[1]),a.rotateZ(e,e,lf.rotate[2]);var t=o.clone(lf.eye);o.scale(t,t,-1),a.translate(e,e,t)})),Gc(Kc(n),"animateModels",(function(){var e=Math.cos(n.state.angle)*n.state.radius,t=Math.sin(n.state.angle)*n.state.radius;Jc[0]+=4*t,Jc[2]+=4*e,n.state.angle>6.499&&(ef[0]-=4*t,ef[2]-=4*e),null!==n.state.lightPosition1Marker&&(n.state.lightPosition1Marker.translate=[n.state.lightPosition1Marker.translate[0]+4*t,n.state.lightPosition1Marker.translate[1],n.state.lightPosition1Marker.translate[2]+4*e]),null!==n.state.lightPosition2Marker&&n.state.angle>6.499&&(n.state.lightPosition2Marker.translate=[n.state.lightPosition2Marker.translate[0]-4*t,n.state.lightPosition2Marker.translate[1],n.state.lightPosition2Marker.translate[2]-4*e]),null!==n.state.interactiveTorus&&(n.state.interactiveTorus.rotate[0]+=.5*n.state.deltaTime),null!==n.state.interactiveSphere1&&(n.state.interactiveSphere1.translate=[n.state.interactiveSphere1.translate[0]+t,n.state.interactiveSphere1.translate[1]+e,n.state.interactiveSphere1.translate[2]]),null!==n.state.interactiveSphere2&&n.state.angle>6.499&&(n.state.interactiveSphere2.translate=[n.state.interactiveSphere2.translate[0]-t,n.state.interactiveSphere2.translate[1]-e,n.state.interactiveSphere2.translate[2]]),null!==n.state.interactiveSphere3&&n.state.angle>3.1&&(n.state.interactiveSphere3.translate=[n.state.interactiveSphere3.translate[0],n.state.interactiveSphere3.translate[1]+t,n.state.interactiveSphere3.translate[2]+e]),null!==n.state.interactiveSphere4&&n.state.angle>9.14&&(n.state.interactiveSphere4.translate=[n.state.interactiveSphere4.translate[0]+t,n.state.interactiveSphere4.translate[1],n.state.interactiveSphere4.translate[2]-e]),null!==n.state.interactiveSphere1&&null!==n.state.interactiveSphere2&&null!==n.state.interactiveSphere3&&null!==n.state.interactiveSphere4&&(n.setState({interactiveSphere1Translate:n.state.interactiveSphere1.translate}),n.setState({interactiveSphere2Translate:n.state.interactiveSphere2.translate}),n.setState({interactiveSphere3Translate:n.state.interactiveSphere3.translate}),n.setState({interactiveSphere4Translate:n.state.interactiveSphere4.translate}))})),Gc(Kc(n),"renderWegGL",(function(){Zc.clear(Zc.COLOR_BUFFER_BIT|Zc.DEPTH_BUFFER_BIT),n.setProjection(),Zc.uniform3fv(qc.ambientLightUniform,tf.ambientLight);for(var e=0;e<tf.light.length;e++){Zc.uniform1i(qc.lightUniform[e].isOn,tf.light[e].isOn);var t=[].concat(tf.light[e].position);t.push(1),i.transformMat4(t,t,lf.vMatrix),t.pop(),Zc.uniform3fv(qc.lightUniform[e].position,t),Zc.uniform3fv(qc.lightUniform[e].color,tf.light[e].color)}for(var r=0;r<rf.length;r++)rf[r].texture&&!rf[r].texture.loaded||(n.updateTransformations(rf[r]),Zc.uniformMatrix4fv(qc.mvMatrixUniform,!1,rf[r].mvMatrix),Zc.uniformMatrix3fv(qc.nMatrixUniform,!1,rf[r].nMatrix),Zc.uniform4fv(qc.colorUniform,rf[r].color),Zc.uniform3fv(qc.materialKaUniform,rf[r].material.ka),Zc.uniform3fv(qc.materialKdUniform,rf[r].material.kd),Zc.uniform3fv(qc.materialKsUniform,rf[r].material.ks),Zc.uniform1f(qc.materialKeUniform,rf[r].material.ke),Zc.activeTexture(Zc.TEXTURE0),Zc.bindTexture(Zc.TEXTURE_2D,rf[r].texture),Zc.uniform1i(qc.textureUniform,0),Zc.uniform1f(qc.timeUniform,n.state.angle),n.draw(rf[r]))})),Gc(Kc(n),"updateTransformations",(function(e){var t=e.mMatrix,n=e.mvMatrix;a.identity(t),a.identity(n),a.translate(t,t,e.translate),a.rotateX(t,t,e.rotate[0]),a.rotateY(t,t,e.rotate[1]),a.rotateZ(t,t,e.rotate[2]),a.scale(t,t,e.scale),a.multiply(n,lf.vMatrix,t),r.normalFromMat4(e.nMatrix,n)})),Gc(Kc(n),"setProjection",(function(){switch(lf.projectionType){case"ortho":lf.lrtb=n.state.zoom;var e=lf.lrtb;a.ortho(lf.pMatrix,-e,e,-e,e,-20,20);break;case"frustum":lf.lrtb=n.state.zoom;e=lf.lrtb;a.frustum(lf.pMatrix,-e/2,e/2,-e/2,e/2,1,lf.lrtb);break;case"perspective":lf.lrtb=n.state.zoom,a.perspective(lf.pMatrix,lf.fovy,lf.aspect,1,lf.lrtb)}Zc.uniformMatrix4fv(qc.pMatrixUniform,!1,lf.pMatrix)})),Gc(Kc(n),"draw",(function(e){Zc.bindBuffer(Zc.ARRAY_BUFFER,e.vboPos),Zc.vertexAttribPointer(qc.positionAttrib,3,Zc.FLOAT,!1,0,0),Zc.bindBuffer(Zc.ARRAY_BUFFER,e.vboNormal),Zc.vertexAttribPointer(qc.normalAttrib,3,Zc.FLOAT,!1,0,0),e.texture&&(Zc.bindBuffer(Zc.ARRAY_BUFFER,e.vboTextureCoord),Zc.vertexAttribPointer(qc.textureCoordAttrib,2,Zc.FLOAT,!1,0,0)),-1!=e.fillstyle.search(/fill/)&&(Zc.enableVertexAttribArray(qc.normalAttrib),e.texture&&Zc.enableVertexAttribArray(qc.textureCoordAttrib),Zc.bindBuffer(Zc.ELEMENT_ARRAY_BUFFER,e.iboTris),Zc.drawElements(Zc.TRIANGLES,e.iboTris.numberOfElements,Zc.UNSIGNED_SHORT,0)),-1!=e.fillstyle.search(/wireframe/)&&(Zc.uniform4fv(qc.colorUniform,[0,0,0,1]),Zc.disableVertexAttribArray(qc.normalAttrib),e.texture&&Zc.disableVertexAttribArray(qc.textureCoordAttrib),Zc.vertexAttrib3f(qc.normalAttrib,0,0,0),Zc.bindBuffer(Zc.ELEMENT_ARRAY_BUFFER,e.iboLines),Zc.drawElements(Zc.LINES,e.iboLines.numberOfElements,Zc.UNSIGNED_SHORT,0))})),Gc(Kc(n),"dataLoadedCallback",(function(e,t,r){console.log("dataResult: "+e),console.log("calculatedStats: "+r),n.initModelsFromData(e,t,r),n.initCameraFromData(r),n.renderWegGL(),n.init_tSNE(e)})),Gc(Kc(n),"initModelsFromData",(function(e,t,r){var a=[n.createPhongMaterial({kd:[1,0,0]}),n.createPhongMaterial({kd:[0,1,0]}),n.createPhongMaterial({kd:[0,0,1]}),n.createPhongMaterial({kd:[1,1,0]}),n.createPhongMaterial({kd:[0,1,1]}),n.createPhongMaterial({kd:[1,0,1]})];rf=[];for(var o=0;o<e.length;o++){for(var i=e[o],l=Array(3).fill(0),u=Math.min(i.length,3),s=0;s<u;s++)l[s]=i[s];var c=r.maxRange/100,f=[c,c,c];n.createModel(E,"fill",[1,1,1,1],l,[0,0,0],f,a[t[o]])}})),Gc(Kc(n),"initCameraFromData",(function(e){lf.projectionType="ortho",lf.lrtb=e.maxRange,lf.distance=0,o.copy(lf.eye,e.mean);var t=lf.vMatrix;a.identity(t);var n=o.clone(lf.eye);o.scale(n,n,-1),a.translate(t,t,n)})),Gc(Kc(n),"setModelTransformationFromData",(function(e){for(var t=0;t<e.length;t++){for(var n=e[t],r=Array(3).fill(0),a=Math.min(n.length,3),o=0;o<a;o++)r[o]=n[o];rf[t].translate=r}})),Gc(Kc(n),"rescaleModels",(function(e){for(var t=0;t<rf.length;t++)rf[t].scale[0]*=e,rf[t].scale[1]*=e,rf[t].scale[2]*=e})),Gc(Kc(n),"init_tSNE",(function(e){var t={epsilon:10,perplexity:50,dim:3};(Nc=new zc.a.tSNE(t)).initDataRaw(e),n.displayParameter_tSNE(),n.displayStepCounter_tSNE()})),Gc(Kc(n),"step_tSNE",(function(e){e=void 0!==e?e:1;for(var t=0;t<e;t++)Nc.step();var r=Nc.getSolution();n.setModelTransformationFromData(r),1===Nc.iter&&a.identity(lf.vMatrix),n.displayStepCounter_tSNE(),$s()})),Gc(Kc(n),"displayParameter_tSNE",(function(){n.setState({epsilon:Nc.epsilon}),n.setState({perplexity:Nc.perplexity}),n.setState({dim:Nc.dim})})),Gc(Kc(n),"displayStepCounter_tSNE",(function(){n.setState({iter:Nc.iter})})),n.state={eventKey:" ",zoom:2,xMin:-3,xMax:3,yMin:-3,yMax:3,rotationX:0,rotationY:0,rotationZ:0,cameraEyeX:0,cameraEyeY:0,cameraEyeZ:0,cameraCenterX:0,cameraCenterY:0,cameraCenterZ:0,cameraUpX:0,cameraUpY:0,cameraUpZ:0,angle:0,interactiveSphere0:null,interactiveSphere1:null,interactiveSphere2:null,interactiveSphere3:null,interactiveSphere4:null,interactiveTorus:null,interactivePlane:null,interactiveSphere1Translate:null,interactiveSphere2Translate:null,interactiveSphere3Translate:null,interactiveSphere4Translate:null,lightPosition1Marker:null,lightPosition2Marker:null,deltaTime:.05,isLoop:!1,radius:.2,commandNote:"",drawOrbit:!1,inverted:!1,perplexity:" ",iter:" ",dim:" ",epsilon:" "},n}var n,l,u;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Xc(e,t)}(t,e),n=t,(l=[{key:"componentDidMount",value:function(){$c=Uc.a,Qc=Ic.a,this.init()}},{key:"render",value:function(){var e=this,t={width:400,margin:10};return w.a.createElement("div",null,w.a.createElement("div",null,w.a.createElement("h2",null,"EA10")),w.a.createElement("div",{className:"rowCEA5"},w.a.createElement("div",{className:"canvasBoxEA5"},w.a.createElement("canvas",{ref:function(t){return e.webGLCanvas=t},width:"512px",height:"512px"}),w.a.createElement("p",null,"epsilon: ",this.state.epsilon," perplexity: ",this.state.perplexity," dim: ",this.state.dim," iter: ",this.state.iter," ")),w.a.createElement(_.a,{handleKeys:["all","shift + space"],onKeyEvent:function(t,n){return e.handleKeyDown(t)}}),w.a.createElement("div",{className:"sliderBoxEA5"},w.a.createElement("div",{style:t},w.a.createElement("h2",null,"Note:"),w.a.createElement("h3",null,"Switch with 8, 9 to move perspective camera forward or backward on z axis"),w.a.createElement("p",null,"Switch with 1, 2, 3 between ortho, frustum or perspective camera"),w.a.createElement("h2",null,"Controls:"),w.a.createElement("p",null,"Start the Animated Loop with L or skip keyframe by keyframe with K. (Note: K will stop the loop.)"),w.a.createElement("p",null,"Move Camera with W,A,S,D on X and Y axis and with Q,E around Z. Zoom with I,O."),w.a.createElement("p",null,"The Look At Center is 0,0,0")),w.a.createElement("div",{style:t},"camera Zoom: ",w.a.createElement("p",null,this.state.zoom)),w.a.createElement("div",{style:t},"function angle : ",w.a.createElement("p",null,this.state.angle)),w.a.createElement(Oc,{onDrop:function(t){return e.onDrop(t)},width:"512px",height:"100px"},(function(e){var t=e.getRootProps,n=e.getInputProps;return w.a.createElement("section",null,w.a.createElement("div",t(),w.a.createElement("input",n()),w.a.createElement("p",null,"Drag 'n' drop some files here, or click to select files")))})),w.a.createElement("div",{style:t},"last commands : ",w.a.createElement("p",null,this.state.commandNote)))),w.a.createElement("div",{style:{position:"relative",height:"30px"}}))}}])&&Yc(n.prototype,l),u&&Yc(n,u),t}(x.Component);function cf(e){return(cf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ff(e){return(ff="function"==typeof Symbol&&"symbol"===cf(Symbol.iterator)?function(e){return cf(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":cf(e)})(e)}function pf(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function df(e){return(df=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function hf(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function mf(e,t){return(mf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function vf(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Gc(sf,"propTypes",{}),Gc(sf,"defaultProps",{});var yf=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return n=function(e,t){return!t||"object"!==ff(t)&&"function"!=typeof t?hf(e):t}(this,(e=df(t)).call.apply(e,[this].concat(a))),vf(hf(n),"state",{renderView:0}),vf(hf(n),"clickBtn",(function(e){n.setState({renderView:+e.target.value})})),n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&mf(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){switch(this.state.renderView){case 1:return w.a.createElement(F,null);case 2:return w.a.createElement(W,null);case 3:return w.a.createElement(Br,null);case 4:return w.a.createElement(ta,null);case 5:return w.a.createElement(ha,null);case 6:return w.a.createElement(zl,null);case 7:return w.a.createElement(lu,null);case 8:return w.a.createElement(Ou,null);case 9:return w.a.createElement(as,null);case 10:return w.a.createElement(js,null);case 11:return w.a.createElement(sf,null);default:return w.a.createElement(M,{clickBtn:this.clickBtn})}}}])&&pf(n.prototype,r),a&&pf(n,a),t}(x.Component);function bf(e){return(bf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function gf(e){return(gf="function"==typeof Symbol&&"symbol"===bf(Symbol.iterator)?function(e){return bf(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":bf(e)})(e)}function Ef(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xf(e,t){return!t||"object"!==gf(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function wf(e){return(wf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Sf(e,t){return(Sf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Tf=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),xf(this,wf(t).apply(this,arguments))}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Sf(e,t)}(t,e),n=t,(r=[{key:"_refreshPage",value:function(){console.log("Clicked"),window.location.reload()}},{key:"render",value:function(){return w.a.createElement("div",null,w.a.createElement("button",{onClick:this._refreshPage}," Home "),w.a.createElement(yf,null))}}])&&Ef(n.prototype,r),a&&Ef(n,a),t}(x.Component),Mf=n(84),kf=document.getElementById("root");T.a.render(w.a.createElement(Tf,null),kf),Mf.a()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,